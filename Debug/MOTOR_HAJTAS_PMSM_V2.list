
MOTOR_HAJTAS_PMSM_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d94  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08004ea0  08004ea0  00014ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ecc  08004ecc  00020030  2**0
                  CONTENTS
  4 .ARM          00000000  08004ecc  08004ecc  00020030  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004ecc  08004ecc  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ecc  08004ecc  00014ecc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ed0  08004ed0  00014ed0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  08004ed4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a8  20000030  08004f04  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d8  08004f04  000201d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e6bf  00000000  00000000  00020059  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001fe8  00000000  00000000  0002e718  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e80  00000000  00000000  00030700  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d90  00000000  00000000  00031580  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001828d  00000000  00000000  00032310  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bf6b  00000000  00000000  0004a59d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008f14f  00000000  00000000  00056508  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e5657  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ecc  00000000  00000000  000e56d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000030 	.word	0x20000030
 8000128:	00000000 	.word	0x00000000
 800012c:	08004e88 	.word	0x08004e88

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000034 	.word	0x20000034
 8000148:	08004e88 	.word	0x08004e88

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028a:	f1a4 0401 	sub.w	r4, r4, #1
 800028e:	d1e9      	bne.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2f>:
 80008e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008ec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f0:	bf24      	itt	cs
 80008f2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008f6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fa:	d90d      	bls.n	8000918 <__aeabi_d2f+0x30>
 80008fc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000900:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000904:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000908:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800090c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000910:	bf08      	it	eq
 8000912:	f020 0001 	biceq.w	r0, r0, #1
 8000916:	4770      	bx	lr
 8000918:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800091c:	d121      	bne.n	8000962 <__aeabi_d2f+0x7a>
 800091e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000922:	bfbc      	itt	lt
 8000924:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000928:	4770      	bxlt	lr
 800092a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000932:	f1c2 0218 	rsb	r2, r2, #24
 8000936:	f1c2 0c20 	rsb	ip, r2, #32
 800093a:	fa10 f30c 	lsls.w	r3, r0, ip
 800093e:	fa20 f002 	lsr.w	r0, r0, r2
 8000942:	bf18      	it	ne
 8000944:	f040 0001 	orrne.w	r0, r0, #1
 8000948:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800094c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000950:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000954:	ea40 000c 	orr.w	r0, r0, ip
 8000958:	fa23 f302 	lsr.w	r3, r3, r2
 800095c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000960:	e7cc      	b.n	80008fc <__aeabi_d2f+0x14>
 8000962:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000966:	d107      	bne.n	8000978 <__aeabi_d2f+0x90>
 8000968:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800096c:	bf1e      	ittt	ne
 800096e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000972:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000976:	4770      	bxne	lr
 8000978:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800097c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000980:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_frsub>:
 8000988:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800098c:	e002      	b.n	8000994 <__addsf3>
 800098e:	bf00      	nop

08000990 <__aeabi_fsub>:
 8000990:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000994 <__addsf3>:
 8000994:	0042      	lsls	r2, r0, #1
 8000996:	bf1f      	itttt	ne
 8000998:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800099c:	ea92 0f03 	teqne	r2, r3
 80009a0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009a4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009a8:	d06a      	beq.n	8000a80 <__addsf3+0xec>
 80009aa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009ae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009b2:	bfc1      	itttt	gt
 80009b4:	18d2      	addgt	r2, r2, r3
 80009b6:	4041      	eorgt	r1, r0
 80009b8:	4048      	eorgt	r0, r1
 80009ba:	4041      	eorgt	r1, r0
 80009bc:	bfb8      	it	lt
 80009be:	425b      	neglt	r3, r3
 80009c0:	2b19      	cmp	r3, #25
 80009c2:	bf88      	it	hi
 80009c4:	4770      	bxhi	lr
 80009c6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009ca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009ce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009d2:	bf18      	it	ne
 80009d4:	4240      	negne	r0, r0
 80009d6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009da:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009de:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009e2:	bf18      	it	ne
 80009e4:	4249      	negne	r1, r1
 80009e6:	ea92 0f03 	teq	r2, r3
 80009ea:	d03f      	beq.n	8000a6c <__addsf3+0xd8>
 80009ec:	f1a2 0201 	sub.w	r2, r2, #1
 80009f0:	fa41 fc03 	asr.w	ip, r1, r3
 80009f4:	eb10 000c 	adds.w	r0, r0, ip
 80009f8:	f1c3 0320 	rsb	r3, r3, #32
 80009fc:	fa01 f103 	lsl.w	r1, r1, r3
 8000a00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a04:	d502      	bpl.n	8000a0c <__addsf3+0x78>
 8000a06:	4249      	negs	r1, r1
 8000a08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a10:	d313      	bcc.n	8000a3a <__addsf3+0xa6>
 8000a12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a16:	d306      	bcc.n	8000a26 <__addsf3+0x92>
 8000a18:	0840      	lsrs	r0, r0, #1
 8000a1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a1e:	f102 0201 	add.w	r2, r2, #1
 8000a22:	2afe      	cmp	r2, #254	; 0xfe
 8000a24:	d251      	bcs.n	8000aca <__addsf3+0x136>
 8000a26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a2e:	bf08      	it	eq
 8000a30:	f020 0001 	biceq.w	r0, r0, #1
 8000a34:	ea40 0003 	orr.w	r0, r0, r3
 8000a38:	4770      	bx	lr
 8000a3a:	0049      	lsls	r1, r1, #1
 8000a3c:	eb40 0000 	adc.w	r0, r0, r0
 8000a40:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000a44:	f1a2 0201 	sub.w	r2, r2, #1
 8000a48:	d1ed      	bne.n	8000a26 <__addsf3+0x92>
 8000a4a:	fab0 fc80 	clz	ip, r0
 8000a4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a52:	ebb2 020c 	subs.w	r2, r2, ip
 8000a56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a5a:	bfaa      	itet	ge
 8000a5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a60:	4252      	neglt	r2, r2
 8000a62:	4318      	orrge	r0, r3
 8000a64:	bfbc      	itt	lt
 8000a66:	40d0      	lsrlt	r0, r2
 8000a68:	4318      	orrlt	r0, r3
 8000a6a:	4770      	bx	lr
 8000a6c:	f092 0f00 	teq	r2, #0
 8000a70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a74:	bf06      	itte	eq
 8000a76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a7a:	3201      	addeq	r2, #1
 8000a7c:	3b01      	subne	r3, #1
 8000a7e:	e7b5      	b.n	80009ec <__addsf3+0x58>
 8000a80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a8e:	d021      	beq.n	8000ad4 <__addsf3+0x140>
 8000a90:	ea92 0f03 	teq	r2, r3
 8000a94:	d004      	beq.n	8000aa0 <__addsf3+0x10c>
 8000a96:	f092 0f00 	teq	r2, #0
 8000a9a:	bf08      	it	eq
 8000a9c:	4608      	moveq	r0, r1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea90 0f01 	teq	r0, r1
 8000aa4:	bf1c      	itt	ne
 8000aa6:	2000      	movne	r0, #0
 8000aa8:	4770      	bxne	lr
 8000aaa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000aae:	d104      	bne.n	8000aba <__addsf3+0x126>
 8000ab0:	0040      	lsls	r0, r0, #1
 8000ab2:	bf28      	it	cs
 8000ab4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ab8:	4770      	bx	lr
 8000aba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000abe:	bf3c      	itt	cc
 8000ac0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ac4:	4770      	bxcc	lr
 8000ac6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000aca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ace:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad2:	4770      	bx	lr
 8000ad4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ad8:	bf16      	itet	ne
 8000ada:	4608      	movne	r0, r1
 8000adc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ae0:	4601      	movne	r1, r0
 8000ae2:	0242      	lsls	r2, r0, #9
 8000ae4:	bf06      	itte	eq
 8000ae6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aea:	ea90 0f01 	teqeq	r0, r1
 8000aee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000af2:	4770      	bx	lr

08000af4 <__aeabi_ui2f>:
 8000af4:	f04f 0300 	mov.w	r3, #0
 8000af8:	e004      	b.n	8000b04 <__aeabi_i2f+0x8>
 8000afa:	bf00      	nop

08000afc <__aeabi_i2f>:
 8000afc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b00:	bf48      	it	mi
 8000b02:	4240      	negmi	r0, r0
 8000b04:	ea5f 0c00 	movs.w	ip, r0
 8000b08:	bf08      	it	eq
 8000b0a:	4770      	bxeq	lr
 8000b0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b10:	4601      	mov	r1, r0
 8000b12:	f04f 0000 	mov.w	r0, #0
 8000b16:	e01c      	b.n	8000b52 <__aeabi_l2f+0x2a>

08000b18 <__aeabi_ul2f>:
 8000b18:	ea50 0201 	orrs.w	r2, r0, r1
 8000b1c:	bf08      	it	eq
 8000b1e:	4770      	bxeq	lr
 8000b20:	f04f 0300 	mov.w	r3, #0
 8000b24:	e00a      	b.n	8000b3c <__aeabi_l2f+0x14>
 8000b26:	bf00      	nop

08000b28 <__aeabi_l2f>:
 8000b28:	ea50 0201 	orrs.w	r2, r0, r1
 8000b2c:	bf08      	it	eq
 8000b2e:	4770      	bxeq	lr
 8000b30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b34:	d502      	bpl.n	8000b3c <__aeabi_l2f+0x14>
 8000b36:	4240      	negs	r0, r0
 8000b38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b3c:	ea5f 0c01 	movs.w	ip, r1
 8000b40:	bf02      	ittt	eq
 8000b42:	4684      	moveq	ip, r0
 8000b44:	4601      	moveq	r1, r0
 8000b46:	2000      	moveq	r0, #0
 8000b48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b4c:	bf08      	it	eq
 8000b4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b56:	fabc f28c 	clz	r2, ip
 8000b5a:	3a08      	subs	r2, #8
 8000b5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b60:	db10      	blt.n	8000b84 <__aeabi_l2f+0x5c>
 8000b62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b66:	4463      	add	r3, ip
 8000b68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b6c:	f1c2 0220 	rsb	r2, r2, #32
 8000b70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b74:	fa20 f202 	lsr.w	r2, r0, r2
 8000b78:	eb43 0002 	adc.w	r0, r3, r2
 8000b7c:	bf08      	it	eq
 8000b7e:	f020 0001 	biceq.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	f102 0220 	add.w	r2, r2, #32
 8000b88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b8c:	f1c2 0220 	rsb	r2, r2, #32
 8000b90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b94:	fa21 f202 	lsr.w	r2, r1, r2
 8000b98:	eb43 0002 	adc.w	r0, r3, r2
 8000b9c:	bf08      	it	eq
 8000b9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ba2:	4770      	bx	lr

08000ba4 <__aeabi_fmul>:
 8000ba4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ba8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bac:	bf1e      	ittt	ne
 8000bae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bb2:	ea92 0f0c 	teqne	r2, ip
 8000bb6:	ea93 0f0c 	teqne	r3, ip
 8000bba:	d06f      	beq.n	8000c9c <__aeabi_fmul+0xf8>
 8000bbc:	441a      	add	r2, r3
 8000bbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000bc2:	0240      	lsls	r0, r0, #9
 8000bc4:	bf18      	it	ne
 8000bc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bca:	d01e      	beq.n	8000c0a <__aeabi_fmul+0x66>
 8000bcc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000bd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000bdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000be0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000be4:	bf3e      	ittt	cc
 8000be6:	0049      	lslcc	r1, r1, #1
 8000be8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bec:	005b      	lslcc	r3, r3, #1
 8000bee:	ea40 0001 	orr.w	r0, r0, r1
 8000bf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000bf6:	2afd      	cmp	r2, #253	; 0xfd
 8000bf8:	d81d      	bhi.n	8000c36 <__aeabi_fmul+0x92>
 8000bfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000bfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c02:	bf08      	it	eq
 8000c04:	f020 0001 	biceq.w	r0, r0, #1
 8000c08:	4770      	bx	lr
 8000c0a:	f090 0f00 	teq	r0, #0
 8000c0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c12:	bf08      	it	eq
 8000c14:	0249      	lsleq	r1, r1, #9
 8000c16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c1e:	3a7f      	subs	r2, #127	; 0x7f
 8000c20:	bfc2      	ittt	gt
 8000c22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c2a:	4770      	bxgt	lr
 8000c2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c30:	f04f 0300 	mov.w	r3, #0
 8000c34:	3a01      	subs	r2, #1
 8000c36:	dc5d      	bgt.n	8000cf4 <__aeabi_fmul+0x150>
 8000c38:	f112 0f19 	cmn.w	r2, #25
 8000c3c:	bfdc      	itt	le
 8000c3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c42:	4770      	bxle	lr
 8000c44:	f1c2 0200 	rsb	r2, r2, #0
 8000c48:	0041      	lsls	r1, r0, #1
 8000c4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000c4e:	f1c2 0220 	rsb	r2, r2, #32
 8000c52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c5a:	f140 0000 	adc.w	r0, r0, #0
 8000c5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c62:	bf08      	it	eq
 8000c64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c68:	4770      	bx	lr
 8000c6a:	f092 0f00 	teq	r2, #0
 8000c6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c72:	bf02      	ittt	eq
 8000c74:	0040      	lsleq	r0, r0, #1
 8000c76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c7a:	3a01      	subeq	r2, #1
 8000c7c:	d0f9      	beq.n	8000c72 <__aeabi_fmul+0xce>
 8000c7e:	ea40 000c 	orr.w	r0, r0, ip
 8000c82:	f093 0f00 	teq	r3, #0
 8000c86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c8a:	bf02      	ittt	eq
 8000c8c:	0049      	lsleq	r1, r1, #1
 8000c8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c92:	3b01      	subeq	r3, #1
 8000c94:	d0f9      	beq.n	8000c8a <__aeabi_fmul+0xe6>
 8000c96:	ea41 010c 	orr.w	r1, r1, ip
 8000c9a:	e78f      	b.n	8000bbc <__aeabi_fmul+0x18>
 8000c9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ca0:	ea92 0f0c 	teq	r2, ip
 8000ca4:	bf18      	it	ne
 8000ca6:	ea93 0f0c 	teqne	r3, ip
 8000caa:	d00a      	beq.n	8000cc2 <__aeabi_fmul+0x11e>
 8000cac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cb0:	bf18      	it	ne
 8000cb2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cb6:	d1d8      	bne.n	8000c6a <__aeabi_fmul+0xc6>
 8000cb8:	ea80 0001 	eor.w	r0, r0, r1
 8000cbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cc0:	4770      	bx	lr
 8000cc2:	f090 0f00 	teq	r0, #0
 8000cc6:	bf17      	itett	ne
 8000cc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ccc:	4608      	moveq	r0, r1
 8000cce:	f091 0f00 	teqne	r1, #0
 8000cd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cd6:	d014      	beq.n	8000d02 <__aeabi_fmul+0x15e>
 8000cd8:	ea92 0f0c 	teq	r2, ip
 8000cdc:	d101      	bne.n	8000ce2 <__aeabi_fmul+0x13e>
 8000cde:	0242      	lsls	r2, r0, #9
 8000ce0:	d10f      	bne.n	8000d02 <__aeabi_fmul+0x15e>
 8000ce2:	ea93 0f0c 	teq	r3, ip
 8000ce6:	d103      	bne.n	8000cf0 <__aeabi_fmul+0x14c>
 8000ce8:	024b      	lsls	r3, r1, #9
 8000cea:	bf18      	it	ne
 8000cec:	4608      	movne	r0, r1
 8000cee:	d108      	bne.n	8000d02 <__aeabi_fmul+0x15e>
 8000cf0:	ea80 0001 	eor.w	r0, r0, r1
 8000cf4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cf8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d00:	4770      	bx	lr
 8000d02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d0a:	4770      	bx	lr

08000d0c <__aeabi_fdiv>:
 8000d0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d14:	bf1e      	ittt	ne
 8000d16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d1a:	ea92 0f0c 	teqne	r2, ip
 8000d1e:	ea93 0f0c 	teqne	r3, ip
 8000d22:	d069      	beq.n	8000df8 <__aeabi_fdiv+0xec>
 8000d24:	eba2 0203 	sub.w	r2, r2, r3
 8000d28:	ea80 0c01 	eor.w	ip, r0, r1
 8000d2c:	0249      	lsls	r1, r1, #9
 8000d2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d32:	d037      	beq.n	8000da4 <__aeabi_fdiv+0x98>
 8000d34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d44:	428b      	cmp	r3, r1
 8000d46:	bf38      	it	cc
 8000d48:	005b      	lslcc	r3, r3, #1
 8000d4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d52:	428b      	cmp	r3, r1
 8000d54:	bf24      	itt	cs
 8000d56:	1a5b      	subcs	r3, r3, r1
 8000d58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d60:	bf24      	itt	cs
 8000d62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d6e:	bf24      	itt	cs
 8000d70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d7c:	bf24      	itt	cs
 8000d7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d86:	011b      	lsls	r3, r3, #4
 8000d88:	bf18      	it	ne
 8000d8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d8e:	d1e0      	bne.n	8000d52 <__aeabi_fdiv+0x46>
 8000d90:	2afd      	cmp	r2, #253	; 0xfd
 8000d92:	f63f af50 	bhi.w	8000c36 <__aeabi_fmul+0x92>
 8000d96:	428b      	cmp	r3, r1
 8000d98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d9c:	bf08      	it	eq
 8000d9e:	f020 0001 	biceq.w	r0, r0, #1
 8000da2:	4770      	bx	lr
 8000da4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000da8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dac:	327f      	adds	r2, #127	; 0x7f
 8000dae:	bfc2      	ittt	gt
 8000db0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000db8:	4770      	bxgt	lr
 8000dba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dbe:	f04f 0300 	mov.w	r3, #0
 8000dc2:	3a01      	subs	r2, #1
 8000dc4:	e737      	b.n	8000c36 <__aeabi_fmul+0x92>
 8000dc6:	f092 0f00 	teq	r2, #0
 8000dca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dce:	bf02      	ittt	eq
 8000dd0:	0040      	lsleq	r0, r0, #1
 8000dd2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dd6:	3a01      	subeq	r2, #1
 8000dd8:	d0f9      	beq.n	8000dce <__aeabi_fdiv+0xc2>
 8000dda:	ea40 000c 	orr.w	r0, r0, ip
 8000dde:	f093 0f00 	teq	r3, #0
 8000de2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000de6:	bf02      	ittt	eq
 8000de8:	0049      	lsleq	r1, r1, #1
 8000dea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dee:	3b01      	subeq	r3, #1
 8000df0:	d0f9      	beq.n	8000de6 <__aeabi_fdiv+0xda>
 8000df2:	ea41 010c 	orr.w	r1, r1, ip
 8000df6:	e795      	b.n	8000d24 <__aeabi_fdiv+0x18>
 8000df8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dfc:	ea92 0f0c 	teq	r2, ip
 8000e00:	d108      	bne.n	8000e14 <__aeabi_fdiv+0x108>
 8000e02:	0242      	lsls	r2, r0, #9
 8000e04:	f47f af7d 	bne.w	8000d02 <__aeabi_fmul+0x15e>
 8000e08:	ea93 0f0c 	teq	r3, ip
 8000e0c:	f47f af70 	bne.w	8000cf0 <__aeabi_fmul+0x14c>
 8000e10:	4608      	mov	r0, r1
 8000e12:	e776      	b.n	8000d02 <__aeabi_fmul+0x15e>
 8000e14:	ea93 0f0c 	teq	r3, ip
 8000e18:	d104      	bne.n	8000e24 <__aeabi_fdiv+0x118>
 8000e1a:	024b      	lsls	r3, r1, #9
 8000e1c:	f43f af4c 	beq.w	8000cb8 <__aeabi_fmul+0x114>
 8000e20:	4608      	mov	r0, r1
 8000e22:	e76e      	b.n	8000d02 <__aeabi_fmul+0x15e>
 8000e24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e28:	bf18      	it	ne
 8000e2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e2e:	d1ca      	bne.n	8000dc6 <__aeabi_fdiv+0xba>
 8000e30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e34:	f47f af5c 	bne.w	8000cf0 <__aeabi_fmul+0x14c>
 8000e38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e3c:	f47f af3c 	bne.w	8000cb8 <__aeabi_fmul+0x114>
 8000e40:	e75f      	b.n	8000d02 <__aeabi_fmul+0x15e>
 8000e42:	bf00      	nop

08000e44 <__gesf2>:
 8000e44:	f04f 3cff 	mov.w	ip, #4294967295
 8000e48:	e006      	b.n	8000e58 <__cmpsf2+0x4>
 8000e4a:	bf00      	nop

08000e4c <__lesf2>:
 8000e4c:	f04f 0c01 	mov.w	ip, #1
 8000e50:	e002      	b.n	8000e58 <__cmpsf2+0x4>
 8000e52:	bf00      	nop

08000e54 <__cmpsf2>:
 8000e54:	f04f 0c01 	mov.w	ip, #1
 8000e58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e68:	bf18      	it	ne
 8000e6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e6e:	d011      	beq.n	8000e94 <__cmpsf2+0x40>
 8000e70:	b001      	add	sp, #4
 8000e72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e76:	bf18      	it	ne
 8000e78:	ea90 0f01 	teqne	r0, r1
 8000e7c:	bf58      	it	pl
 8000e7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e82:	bf88      	it	hi
 8000e84:	17c8      	asrhi	r0, r1, #31
 8000e86:	bf38      	it	cc
 8000e88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e8c:	bf18      	it	ne
 8000e8e:	f040 0001 	orrne.w	r0, r0, #1
 8000e92:	4770      	bx	lr
 8000e94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e98:	d102      	bne.n	8000ea0 <__cmpsf2+0x4c>
 8000e9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000e9e:	d105      	bne.n	8000eac <__cmpsf2+0x58>
 8000ea0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ea4:	d1e4      	bne.n	8000e70 <__cmpsf2+0x1c>
 8000ea6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000eaa:	d0e1      	beq.n	8000e70 <__cmpsf2+0x1c>
 8000eac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <__aeabi_cfrcmple>:
 8000eb4:	4684      	mov	ip, r0
 8000eb6:	4608      	mov	r0, r1
 8000eb8:	4661      	mov	r1, ip
 8000eba:	e7ff      	b.n	8000ebc <__aeabi_cfcmpeq>

08000ebc <__aeabi_cfcmpeq>:
 8000ebc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ebe:	f7ff ffc9 	bl	8000e54 <__cmpsf2>
 8000ec2:	2800      	cmp	r0, #0
 8000ec4:	bf48      	it	mi
 8000ec6:	f110 0f00 	cmnmi.w	r0, #0
 8000eca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ecc <__aeabi_fcmpeq>:
 8000ecc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ed0:	f7ff fff4 	bl	8000ebc <__aeabi_cfcmpeq>
 8000ed4:	bf0c      	ite	eq
 8000ed6:	2001      	moveq	r0, #1
 8000ed8:	2000      	movne	r0, #0
 8000eda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ede:	bf00      	nop

08000ee0 <__aeabi_fcmplt>:
 8000ee0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee4:	f7ff ffea 	bl	8000ebc <__aeabi_cfcmpeq>
 8000ee8:	bf34      	ite	cc
 8000eea:	2001      	movcc	r0, #1
 8000eec:	2000      	movcs	r0, #0
 8000eee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ef2:	bf00      	nop

08000ef4 <__aeabi_fcmple>:
 8000ef4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ef8:	f7ff ffe0 	bl	8000ebc <__aeabi_cfcmpeq>
 8000efc:	bf94      	ite	ls
 8000efe:	2001      	movls	r0, #1
 8000f00:	2000      	movhi	r0, #0
 8000f02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f06:	bf00      	nop

08000f08 <__aeabi_fcmpge>:
 8000f08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f0c:	f7ff ffd2 	bl	8000eb4 <__aeabi_cfrcmple>
 8000f10:	bf94      	ite	ls
 8000f12:	2001      	movls	r0, #1
 8000f14:	2000      	movhi	r0, #0
 8000f16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f1a:	bf00      	nop

08000f1c <__aeabi_fcmpgt>:
 8000f1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f20:	f7ff ffc8 	bl	8000eb4 <__aeabi_cfrcmple>
 8000f24:	bf34      	ite	cc
 8000f26:	2001      	movcc	r0, #1
 8000f28:	2000      	movcs	r0, #0
 8000f2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f2e:	bf00      	nop

08000f30 <init_SixStep>:


/* Init timers in choosen pwm mode  */

void init_SixStep(TIM_HandleTypeDef* htim)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
	htim->Instance->CCMR1 &= (~TIM_CCMR1_OC1M_Msk) + (~TIM_CCMR1_OC2M_Msk);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	699b      	ldr	r3, [r3, #24]
 8000f3e:	687a      	ldr	r2, [r7, #4]
 8000f40:	6812      	ldr	r2, [r2, #0]
 8000f42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000f46:	f023 0371 	bic.w	r3, r3, #113	; 0x71
 8000f4a:	6193      	str	r3, [r2, #24]
	htim->Instance->CCMR2 &= (~TIM_CCMR2_OC3M_Msk) + (~TIM_CCMR2_OC4M_Msk);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	69db      	ldr	r3, [r3, #28]
 8000f52:	687a      	ldr	r2, [r7, #4]
 8000f54:	6812      	ldr	r2, [r2, #0]
 8000f56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000f5a:	f023 0371 	bic.w	r3, r3, #113	; 0x71
 8000f5e:	61d3      	str	r3, [r2, #28]
	htim->Instance->CCMR1 |= ((enable_pwm << TIM_CCMR1_OC1M_Pos) + (enable_pwm << TIM_CCMR1_OC2M_Pos));
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	699b      	ldr	r3, [r3, #24]
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	6812      	ldr	r2, [r2, #0]
 8000f6a:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8000f6e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8000f72:	6193      	str	r3, [r2, #24]
	htim->Instance->CCMR2 |= enable_pwm << TIM_CCMR2_OC3M_Pos;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	69da      	ldr	r2, [r3, #28]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 8000f82:	61da      	str	r2, [r3, #28]
}
 8000f84:	bf00      	nop
 8000f86:	370c      	adds	r7, #12
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bc80      	pop	{r7}
 8000f8c:	4770      	bx	lr
	...

08000f90 <six_step_commutation>:


void six_step_commutation(six_step_handler *handler)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
	int saved_hall_state_actual = (handler->hall_sensor_Actual_state & 0x7);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f003 0307 	and.w	r3, r3, #7
 8000fa0:	60fb      	str	r3, [r7, #12]

	uint16_t duty_cycle = ((handler->pwm_duty * handler->pwn_period_time_ARR) >> 16); // 16BIT PWM
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	8a1b      	ldrh	r3, [r3, #16]
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	8adb      	ldrh	r3, [r3, #22]
 8000fac:	fb03 f302 	mul.w	r3, r3, r2
 8000fb0:	141b      	asrs	r3, r3, #16
 8000fb2:	817b      	strh	r3, [r7, #10]

	if((handler->hall_sensor_Actual_state) != (handler->hall_sensor_Last_state))
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	d007      	beq.n	8000fd0 <six_step_commutation+0x40>
	{
		handler->htim->Instance->CCER = hall_CCER_reg[saved_hall_state_actual];
 8000fc0:	4a12      	ldr	r2, [pc, #72]	; (800100c <six_step_commutation+0x7c>)
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	621a      	str	r2, [r3, #32]
	};

	if(handler->pwm_duty != handler->last_pwm_duty)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	8a1a      	ldrh	r2, [r3, #16]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	8a9b      	ldrh	r3, [r3, #20]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d00e      	beq.n	8000ffa <six_step_commutation+0x6a>
	{
		handler->htim->Instance->CCR1 = duty_cycle;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	897a      	ldrh	r2, [r7, #10]
 8000fe4:	635a      	str	r2, [r3, #52]	; 0x34
		handler->htim->Instance->CCR2 = duty_cycle;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	68db      	ldr	r3, [r3, #12]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	897a      	ldrh	r2, [r7, #10]
 8000fee:	639a      	str	r2, [r3, #56]	; 0x38
		handler->htim->Instance->CCR3 = duty_cycle;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	897a      	ldrh	r2, [r7, #10]
 8000ff8:	63da      	str	r2, [r3, #60]	; 0x3c
	}
	handler->hall_sensor_Last_state = saved_hall_state_actual;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	68fa      	ldr	r2, [r7, #12]
 8000ffe:	605a      	str	r2, [r3, #4]

}
 8001000:	bf00      	nop
 8001002:	3714      	adds	r7, #20
 8001004:	46bd      	mov	sp, r7
 8001006:	bc80      	pop	{r7}
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	20000000 	.word	0x20000000

08001010 <hall_read_actual_value>:

int hall_read_actual_value()
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
	int hall_status = ~(((GPIOB->IDR & ((1 << 6)  | (1 << 7  ) |(1 << 8  ) ))) >> 6) & 0x7;
 8001016:	4b06      	ldr	r3, [pc, #24]	; (8001030 <hall_read_actual_value+0x20>)
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	099b      	lsrs	r3, r3, #6
 800101c:	43db      	mvns	r3, r3
 800101e:	f003 0307 	and.w	r3, r3, #7
 8001022:	607b      	str	r3, [r7, #4]
	return hall_status;
 8001024:	687b      	ldr	r3, [r7, #4]
}
 8001026:	4618      	mov	r0, r3
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	bc80      	pop	{r7}
 800102e:	4770      	bx	lr
 8001030:	40010c00 	.word	0x40010c00

08001034 <Adc_read_values>:

void Adc_read_values(adc_result_values *adc)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
	adc->Current_main = ((adc->hadc->Instance->JDR1) >> 4) - 0x7F;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	689b      	ldr	r3, [r3, #8]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001044:	091b      	lsrs	r3, r3, #4
 8001046:	b29b      	uxth	r3, r3
 8001048:	3b7f      	subs	r3, #127	; 0x7f
 800104a:	b29b      	uxth	r3, r3
 800104c:	b21a      	sxth	r2, r3
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	801a      	strh	r2, [r3, #0]
	adc->Current_V = ((adc->hadc->Instance->JDR2) >> 4) - 0x7F;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	689b      	ldr	r3, [r3, #8]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105a:	091b      	lsrs	r3, r3, #4
 800105c:	b29b      	uxth	r3, r3
 800105e:	3b7f      	subs	r3, #127	; 0x7f
 8001060:	b29b      	uxth	r3, r3
 8001062:	b21a      	sxth	r2, r3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	805a      	strh	r2, [r3, #2]
	adc->Current_W = ((adc->hadc->Instance->JDR3) >> 4) - 0x7F;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001070:	091b      	lsrs	r3, r3, #4
 8001072:	b29b      	uxth	r3, r3
 8001074:	3b7f      	subs	r3, #127	; 0x7f
 8001076:	b29b      	uxth	r3, r3
 8001078:	b21a      	sxth	r2, r3
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	809a      	strh	r2, [r3, #4]
	adc->Input_potmeter_value = (adc->hadc->Instance->JDR4);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	689b      	ldr	r3, [r3, #8]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001086:	b21a      	sxth	r2, r3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	80da      	strh	r2, [r3, #6]
}
 800108c:	bf00      	nop
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	bc80      	pop	{r7}
 8001094:	4770      	bx	lr
	...

08001098 <get_mech_freq>:

/*FREQ CALC X * (ARR/T)/5			*/

void get_mech_freq(hall_transit_times *hall_sensor)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
	hall_sensor->last_mech_freq = ((float) 21262 / hall_sensor->hall_A_last_transit_time);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	881b      	ldrh	r3, [r3, #0]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff fd29 	bl	8000afc <__aeabi_i2f>
 80010aa:	4603      	mov	r3, r0
 80010ac:	4619      	mov	r1, r3
 80010ae:	4805      	ldr	r0, [pc, #20]	; (80010c4 <get_mech_freq+0x2c>)
 80010b0:	f7ff fe2c 	bl	8000d0c <__aeabi_fdiv>
 80010b4:	4603      	mov	r3, r0
 80010b6:	461a      	mov	r2, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	605a      	str	r2, [r3, #4]
}
 80010bc:	bf00      	nop
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	46a61c00 	.word	0x46a61c00

080010c8 <get_mech_period>:


/*PERIOD CALC: X * T/ARR *5   */

void get_mech_period(hall_transit_times *hall_sensor)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
	hall_sensor->last_mech_period_time = ((float) hall_sensor->hall_A_last_transit_time) * ((float) 0.000047031);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	881b      	ldrh	r3, [r3, #0]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff fd0d 	bl	8000af4 <__aeabi_ui2f>
 80010da:	4603      	mov	r3, r0
 80010dc:	4905      	ldr	r1, [pc, #20]	; (80010f4 <get_mech_period+0x2c>)
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff fd60 	bl	8000ba4 <__aeabi_fmul>
 80010e4:	4603      	mov	r3, r0
 80010e6:	461a      	mov	r2, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	609a      	str	r2, [r3, #8]

}
 80010ec:	bf00      	nop
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	38454327 	.word	0x38454327

080010f8 <set_pwm_duty_non_inverted>:


void set_pwm_duty_non_inverted(six_step_handler *six_step_handler, uint16_t duty)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	460b      	mov	r3, r1
 8001102:	807b      	strh	r3, [r7, #2]
	six_step_handler->pwm_duty_normal = duty;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	887a      	ldrh	r2, [r7, #2]
 8001108:	825a      	strh	r2, [r3, #18]
	six_step_handler->pwm_duty = 65535 - duty;
 800110a:	887b      	ldrh	r3, [r7, #2]
 800110c:	43db      	mvns	r3, r3
 800110e:	b29a      	uxth	r2, r3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	821a      	strh	r2, [r3, #16]
}
 8001114:	bf00      	nop
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	bc80      	pop	{r7}
 800111c:	4770      	bx	lr

0800111e <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001122:	f000 feb5 	bl	8001e90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001126:	f000 f811 	bl	800114c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800112a:	f000 fa61 	bl	80015f0 <MX_GPIO_Init>
  MX_TIM1_Init();
 800112e:	f000 f91b 	bl	8001368 <MX_TIM1_Init>
  MX_I2C2_Init();
 8001132:	f000 f8eb 	bl	800130c <MX_I2C2_Init>
  MX_ADC1_Init();
 8001136:	f000 f871 	bl	800121c <MX_ADC1_Init>
  MX_TIM4_Init();
 800113a:	f000 f9cf 	bl	80014dc <MX_TIM4_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800113e:	f000 f860 	bl	8001202 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  init_peripheral();
 8001142:	f000 fc0d 	bl	8001960 <init_peripheral>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  main_loop();
 8001146:	f000 fc97 	bl	8001a78 <main_loop>
 800114a:	e7fc      	b.n	8001146 <main+0x28>

0800114c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b094      	sub	sp, #80	; 0x50
 8001150:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001152:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001156:	2228      	movs	r2, #40	; 0x28
 8001158:	2100      	movs	r1, #0
 800115a:	4618      	mov	r0, r3
 800115c:	f003 fe8c 	bl	8004e78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001160:	f107 0314 	add.w	r3, r7, #20
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	60da      	str	r2, [r3, #12]
 800116e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001170:	1d3b      	adds	r3, r7, #4
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	605a      	str	r2, [r3, #4]
 8001178:	609a      	str	r2, [r3, #8]
 800117a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800117c:	2301      	movs	r3, #1
 800117e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001180:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001184:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001186:	2300      	movs	r3, #0
 8001188:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800118a:	2301      	movs	r3, #1
 800118c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800118e:	2302      	movs	r3, #2
 8001190:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001192:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001196:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001198:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800119c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800119e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011a2:	4618      	mov	r0, r3
 80011a4:	f001 feec 	bl	8002f80 <HAL_RCC_OscConfig>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80011ae:	f000 fa77 	bl	80016a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011b2:	230f      	movs	r3, #15
 80011b4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011b6:	2302      	movs	r3, #2
 80011b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ba:	2300      	movs	r3, #0
 80011bc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011c2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011c4:	2300      	movs	r3, #0
 80011c6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011c8:	f107 0314 	add.w	r3, r7, #20
 80011cc:	2102      	movs	r1, #2
 80011ce:	4618      	mov	r0, r3
 80011d0:	f002 f956 	bl	8003480 <HAL_RCC_ClockConfig>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <SystemClock_Config+0x92>
  {
    Error_Handler();
 80011da:	f000 fa61 	bl	80016a0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80011de:	2302      	movs	r3, #2
 80011e0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80011e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011e6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011e8:	1d3b      	adds	r3, r7, #4
 80011ea:	4618      	mov	r0, r3
 80011ec:	f002 fad0 	bl	8003790 <HAL_RCCEx_PeriphCLKConfig>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <SystemClock_Config+0xae>
  {
    Error_Handler();
 80011f6:	f000 fa53 	bl	80016a0 <Error_Handler>
  }
}
 80011fa:	bf00      	nop
 80011fc:	3750      	adds	r7, #80	; 0x50
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}

08001202 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001202:	b580      	push	{r7, lr}
 8001204:	af00      	add	r7, sp, #0
  /* TIM4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8001206:	2200      	movs	r2, #0
 8001208:	2101      	movs	r1, #1
 800120a:	201e      	movs	r0, #30
 800120c:	f001 fbd7 	bl	80029be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001210:	201e      	movs	r0, #30
 8001212:	f001 fbf0 	bl	80029f6 <HAL_NVIC_EnableIRQ>
}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
	...

0800121c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b088      	sub	sp, #32
 8001220:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001222:	1d3b      	adds	r3, r7, #4
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
 800122c:	60da      	str	r2, [r3, #12]
 800122e:	611a      	str	r2, [r3, #16]
 8001230:	615a      	str	r2, [r3, #20]
 8001232:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001234:	4b33      	ldr	r3, [pc, #204]	; (8001304 <MX_ADC1_Init+0xe8>)
 8001236:	4a34      	ldr	r2, [pc, #208]	; (8001308 <MX_ADC1_Init+0xec>)
 8001238:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800123a:	4b32      	ldr	r3, [pc, #200]	; (8001304 <MX_ADC1_Init+0xe8>)
 800123c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001240:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001242:	4b30      	ldr	r3, [pc, #192]	; (8001304 <MX_ADC1_Init+0xe8>)
 8001244:	2200      	movs	r2, #0
 8001246:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001248:	4b2e      	ldr	r3, [pc, #184]	; (8001304 <MX_ADC1_Init+0xe8>)
 800124a:	2200      	movs	r2, #0
 800124c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800124e:	4b2d      	ldr	r3, [pc, #180]	; (8001304 <MX_ADC1_Init+0xe8>)
 8001250:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001254:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001256:	4b2b      	ldr	r3, [pc, #172]	; (8001304 <MX_ADC1_Init+0xe8>)
 8001258:	2200      	movs	r2, #0
 800125a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800125c:	4b29      	ldr	r3, [pc, #164]	; (8001304 <MX_ADC1_Init+0xe8>)
 800125e:	2201      	movs	r2, #1
 8001260:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001262:	4828      	ldr	r0, [pc, #160]	; (8001304 <MX_ADC1_Init+0xe8>)
 8001264:	f000 fe76 	bl	8001f54 <HAL_ADC_Init>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_ADC1_Init+0x56>
  {
    Error_Handler();
 800126e:	f000 fa17 	bl	80016a0 <Error_Handler>
  }
  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_0;
 8001272:	2300      	movs	r3, #0
 8001274:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8001276:	2301      	movs	r3, #1
 8001278:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedNbrOfConversion = 4;
 800127a:	2304      	movs	r3, #4
 800127c:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 800127e:	2305      	movs	r3, #5
 8001280:	60fb      	str	r3, [r7, #12]
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_TRGO;
 8001282:	2300      	movs	r3, #0
 8001284:	61fb      	str	r3, [r7, #28]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8001286:	2300      	movs	r3, #0
 8001288:	767b      	strb	r3, [r7, #25]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800128a:	2300      	movs	r3, #0
 800128c:	763b      	strb	r3, [r7, #24]
  sConfigInjected.InjectedOffset = 0;
 800128e:	2300      	movs	r3, #0
 8001290:	613b      	str	r3, [r7, #16]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001292:	1d3b      	adds	r3, r7, #4
 8001294:	4619      	mov	r1, r3
 8001296:	481b      	ldr	r0, [pc, #108]	; (8001304 <MX_ADC1_Init+0xe8>)
 8001298:	f001 f924 	bl	80024e4 <HAL_ADCEx_InjectedConfigChannel>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80012a2:	f000 f9fd 	bl	80016a0 <Error_Handler>
  }
  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 80012a6:	2301      	movs	r3, #1
 80012a8:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 80012aa:	2302      	movs	r3, #2
 80012ac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80012ae:	1d3b      	adds	r3, r7, #4
 80012b0:	4619      	mov	r1, r3
 80012b2:	4814      	ldr	r0, [pc, #80]	; (8001304 <MX_ADC1_Init+0xe8>)
 80012b4:	f001 f916 	bl	80024e4 <HAL_ADCEx_InjectedConfigChannel>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80012be:	f000 f9ef 	bl	80016a0 <Error_Handler>
  }
  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 80012c2:	2302      	movs	r3, #2
 80012c4:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 80012c6:	2303      	movs	r3, #3
 80012c8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80012ca:	1d3b      	adds	r3, r7, #4
 80012cc:	4619      	mov	r1, r3
 80012ce:	480d      	ldr	r0, [pc, #52]	; (8001304 <MX_ADC1_Init+0xe8>)
 80012d0:	f001 f908 	bl	80024e4 <HAL_ADCEx_InjectedConfigChannel>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 80012da:	f000 f9e1 	bl	80016a0 <Error_Handler>
  }
  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 80012de:	2303      	movs	r3, #3
 80012e0:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_4;
 80012e2:	2304      	movs	r3, #4
 80012e4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80012e6:	1d3b      	adds	r3, r7, #4
 80012e8:	4619      	mov	r1, r3
 80012ea:	4806      	ldr	r0, [pc, #24]	; (8001304 <MX_ADC1_Init+0xe8>)
 80012ec:	f001 f8fa 	bl	80024e4 <HAL_ADCEx_InjectedConfigChannel>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80012f6:	f000 f9d3 	bl	80016a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012fa:	bf00      	nop
 80012fc:	3720      	adds	r7, #32
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	200000e8 	.word	0x200000e8
 8001308:	40012400 	.word	0x40012400

0800130c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001310:	4b12      	ldr	r3, [pc, #72]	; (800135c <MX_I2C2_Init+0x50>)
 8001312:	4a13      	ldr	r2, [pc, #76]	; (8001360 <MX_I2C2_Init+0x54>)
 8001314:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001316:	4b11      	ldr	r3, [pc, #68]	; (800135c <MX_I2C2_Init+0x50>)
 8001318:	4a12      	ldr	r2, [pc, #72]	; (8001364 <MX_I2C2_Init+0x58>)
 800131a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800131c:	4b0f      	ldr	r3, [pc, #60]	; (800135c <MX_I2C2_Init+0x50>)
 800131e:	2200      	movs	r2, #0
 8001320:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001322:	4b0e      	ldr	r3, [pc, #56]	; (800135c <MX_I2C2_Init+0x50>)
 8001324:	2200      	movs	r2, #0
 8001326:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001328:	4b0c      	ldr	r3, [pc, #48]	; (800135c <MX_I2C2_Init+0x50>)
 800132a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800132e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001330:	4b0a      	ldr	r3, [pc, #40]	; (800135c <MX_I2C2_Init+0x50>)
 8001332:	2200      	movs	r2, #0
 8001334:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001336:	4b09      	ldr	r3, [pc, #36]	; (800135c <MX_I2C2_Init+0x50>)
 8001338:	2200      	movs	r2, #0
 800133a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800133c:	4b07      	ldr	r3, [pc, #28]	; (800135c <MX_I2C2_Init+0x50>)
 800133e:	2200      	movs	r2, #0
 8001340:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001342:	4b06      	ldr	r3, [pc, #24]	; (800135c <MX_I2C2_Init+0x50>)
 8001344:	2200      	movs	r2, #0
 8001346:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001348:	4804      	ldr	r0, [pc, #16]	; (800135c <MX_I2C2_Init+0x50>)
 800134a:	f001 fce1 	bl	8002d10 <HAL_I2C_Init>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001354:	f000 f9a4 	bl	80016a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001358:	bf00      	nop
 800135a:	bd80      	pop	{r7, pc}
 800135c:	20000094 	.word	0x20000094
 8001360:	40005800 	.word	0x40005800
 8001364:	000186a0 	.word	0x000186a0

08001368 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b096      	sub	sp, #88	; 0x58
 800136c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800136e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	605a      	str	r2, [r3, #4]
 8001378:	609a      	str	r2, [r3, #8]
 800137a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800137c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001386:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800138a:	2200      	movs	r2, #0
 800138c:	601a      	str	r2, [r3, #0]
 800138e:	605a      	str	r2, [r3, #4]
 8001390:	609a      	str	r2, [r3, #8]
 8001392:	60da      	str	r2, [r3, #12]
 8001394:	611a      	str	r2, [r3, #16]
 8001396:	615a      	str	r2, [r3, #20]
 8001398:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800139a:	1d3b      	adds	r3, r7, #4
 800139c:	2220      	movs	r2, #32
 800139e:	2100      	movs	r1, #0
 80013a0:	4618      	mov	r0, r3
 80013a2:	f003 fd69 	bl	8004e78 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013a6:	4b4b      	ldr	r3, [pc, #300]	; (80014d4 <MX_TIM1_Init+0x16c>)
 80013a8:	4a4b      	ldr	r2, [pc, #300]	; (80014d8 <MX_TIM1_Init+0x170>)
 80013aa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80013ac:	4b49      	ldr	r3, [pc, #292]	; (80014d4 <MX_TIM1_Init+0x16c>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80013b2:	4b48      	ldr	r3, [pc, #288]	; (80014d4 <MX_TIM1_Init+0x16c>)
 80013b4:	2220      	movs	r2, #32
 80013b6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3600;
 80013b8:	4b46      	ldr	r3, [pc, #280]	; (80014d4 <MX_TIM1_Init+0x16c>)
 80013ba:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80013be:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013c0:	4b44      	ldr	r3, [pc, #272]	; (80014d4 <MX_TIM1_Init+0x16c>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 80013c6:	4b43      	ldr	r3, [pc, #268]	; (80014d4 <MX_TIM1_Init+0x16c>)
 80013c8:	2201      	movs	r2, #1
 80013ca:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013cc:	4b41      	ldr	r3, [pc, #260]	; (80014d4 <MX_TIM1_Init+0x16c>)
 80013ce:	2280      	movs	r2, #128	; 0x80
 80013d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013d2:	4840      	ldr	r0, [pc, #256]	; (80014d4 <MX_TIM1_Init+0x16c>)
 80013d4:	f002 fa92 	bl	80038fc <HAL_TIM_Base_Init>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80013de:	f000 f95f 	bl	80016a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013e6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013e8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80013ec:	4619      	mov	r1, r3
 80013ee:	4839      	ldr	r0, [pc, #228]	; (80014d4 <MX_TIM1_Init+0x16c>)
 80013f0:	f002 ffd8 	bl	80043a4 <HAL_TIM_ConfigClockSource>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80013fa:	f000 f951 	bl	80016a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80013fe:	4835      	ldr	r0, [pc, #212]	; (80014d4 <MX_TIM1_Init+0x16c>)
 8001400:	f002 fb1e 	bl	8003a40 <HAL_TIM_PWM_Init>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800140a:	f000 f949 	bl	80016a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800140e:	2320      	movs	r3, #32
 8001410:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001412:	2300      	movs	r3, #0
 8001414:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001416:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800141a:	4619      	mov	r1, r3
 800141c:	482d      	ldr	r0, [pc, #180]	; (80014d4 <MX_TIM1_Init+0x16c>)
 800141e:	f003 fc45 	bl	8004cac <HAL_TIMEx_MasterConfigSynchronization>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001428:	f000 f93a 	bl	80016a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800142c:	2370      	movs	r3, #112	; 0x70
 800142e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001430:	2300      	movs	r3, #0
 8001432:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001434:	2300      	movs	r3, #0
 8001436:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001438:	2300      	movs	r3, #0
 800143a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800143c:	2300      	movs	r3, #0
 800143e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001440:	2300      	movs	r3, #0
 8001442:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001444:	2300      	movs	r3, #0
 8001446:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001448:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800144c:	2200      	movs	r2, #0
 800144e:	4619      	mov	r1, r3
 8001450:	4820      	ldr	r0, [pc, #128]	; (80014d4 <MX_TIM1_Init+0x16c>)
 8001452:	f002 fee9 	bl	8004228 <HAL_TIM_PWM_ConfigChannel>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800145c:	f000 f920 	bl	80016a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001460:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001464:	2204      	movs	r2, #4
 8001466:	4619      	mov	r1, r3
 8001468:	481a      	ldr	r0, [pc, #104]	; (80014d4 <MX_TIM1_Init+0x16c>)
 800146a:	f002 fedd 	bl	8004228 <HAL_TIM_PWM_ConfigChannel>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001474:	f000 f914 	bl	80016a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001478:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800147c:	2208      	movs	r2, #8
 800147e:	4619      	mov	r1, r3
 8001480:	4814      	ldr	r0, [pc, #80]	; (80014d4 <MX_TIM1_Init+0x16c>)
 8001482:	f002 fed1 	bl	8004228 <HAL_TIM_PWM_ConfigChannel>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 800148c:	f000 f908 	bl	80016a0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8001490:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001494:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001496:	2300      	movs	r3, #0
 8001498:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800149a:	2300      	movs	r3, #0
 800149c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 50;
 800149e:	2332      	movs	r3, #50	; 0x32
 80014a0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014a2:	2300      	movs	r3, #0
 80014a4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014aa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014ac:	2300      	movs	r3, #0
 80014ae:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80014b0:	1d3b      	adds	r3, r7, #4
 80014b2:	4619      	mov	r1, r3
 80014b4:	4807      	ldr	r0, [pc, #28]	; (80014d4 <MX_TIM1_Init+0x16c>)
 80014b6:	f003 fc57 	bl	8004d68 <HAL_TIMEx_ConfigBreakDeadTime>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_TIM1_Init+0x15c>
  {
    Error_Handler();
 80014c0:	f000 f8ee 	bl	80016a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80014c4:	4803      	ldr	r0, [pc, #12]	; (80014d4 <MX_TIM1_Init+0x16c>)
 80014c6:	f000 fc0f 	bl	8001ce8 <HAL_TIM_MspPostInit>

}
 80014ca:	bf00      	nop
 80014cc:	3758      	adds	r7, #88	; 0x58
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20000118 	.word	0x20000118
 80014d8:	40012c00 	.word	0x40012c00

080014dc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b08a      	sub	sp, #40	; 0x28
 80014e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014e2:	f107 0318 	add.w	r3, r7, #24
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	605a      	str	r2, [r3, #4]
 80014ec:	609a      	str	r2, [r3, #8]
 80014ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014f0:	f107 0310 	add.w	r3, r7, #16
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80014fa:	463b      	mov	r3, r7
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001506:	4b38      	ldr	r3, [pc, #224]	; (80015e8 <MX_TIM4_Init+0x10c>)
 8001508:	4a38      	ldr	r2, [pc, #224]	; (80015ec <MX_TIM4_Init+0x110>)
 800150a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 300;
 800150c:	4b36      	ldr	r3, [pc, #216]	; (80015e8 <MX_TIM4_Init+0x10c>)
 800150e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001512:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001514:	4b34      	ldr	r3, [pc, #208]	; (80015e8 <MX_TIM4_Init+0x10c>)
 8001516:	2200      	movs	r2, #0
 8001518:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800151a:	4b33      	ldr	r3, [pc, #204]	; (80015e8 <MX_TIM4_Init+0x10c>)
 800151c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001520:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001522:	4b31      	ldr	r3, [pc, #196]	; (80015e8 <MX_TIM4_Init+0x10c>)
 8001524:	2200      	movs	r2, #0
 8001526:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001528:	4b2f      	ldr	r3, [pc, #188]	; (80015e8 <MX_TIM4_Init+0x10c>)
 800152a:	2200      	movs	r2, #0
 800152c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800152e:	482e      	ldr	r0, [pc, #184]	; (80015e8 <MX_TIM4_Init+0x10c>)
 8001530:	f002 f9e4 	bl	80038fc <HAL_TIM_Base_Init>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 800153a:	f000 f8b1 	bl	80016a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800153e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001542:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001544:	f107 0318 	add.w	r3, r7, #24
 8001548:	4619      	mov	r1, r3
 800154a:	4827      	ldr	r0, [pc, #156]	; (80015e8 <MX_TIM4_Init+0x10c>)
 800154c:	f002 ff2a 	bl	80043a4 <HAL_TIM_ConfigClockSource>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001556:	f000 f8a3 	bl	80016a0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 800155a:	4823      	ldr	r0, [pc, #140]	; (80015e8 <MX_TIM4_Init+0x10c>)
 800155c:	f002 fb6a 	bl	8003c34 <HAL_TIM_IC_Init>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8001566:	f000 f89b 	bl	80016a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800156a:	2300      	movs	r3, #0
 800156c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800156e:	2300      	movs	r3, #0
 8001570:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001572:	f107 0310 	add.w	r3, r7, #16
 8001576:	4619      	mov	r1, r3
 8001578:	481b      	ldr	r0, [pc, #108]	; (80015e8 <MX_TIM4_Init+0x10c>)
 800157a:	f003 fb97 	bl	8004cac <HAL_TIMEx_MasterConfigSynchronization>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 8001584:	f000 f88c 	bl	80016a0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001588:	2300      	movs	r3, #0
 800158a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800158c:	2301      	movs	r3, #1
 800158e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001590:	2300      	movs	r3, #0
 8001592:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 5;
 8001594:	2305      	movs	r3, #5
 8001596:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001598:	463b      	mov	r3, r7
 800159a:	2200      	movs	r2, #0
 800159c:	4619      	mov	r1, r3
 800159e:	4812      	ldr	r0, [pc, #72]	; (80015e8 <MX_TIM4_Init+0x10c>)
 80015a0:	f002 fdae 	bl	8004100 <HAL_TIM_IC_ConfigChannel>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 80015aa:	f000 f879 	bl	80016a0 <Error_Handler>
  }
  sConfigIC.ICFilter = 0;
 80015ae:	2300      	movs	r3, #0
 80015b0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80015b2:	463b      	mov	r3, r7
 80015b4:	2204      	movs	r2, #4
 80015b6:	4619      	mov	r1, r3
 80015b8:	480b      	ldr	r0, [pc, #44]	; (80015e8 <MX_TIM4_Init+0x10c>)
 80015ba:	f002 fda1 	bl	8004100 <HAL_TIM_IC_ConfigChannel>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 80015c4:	f000 f86c 	bl	80016a0 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80015c8:	463b      	mov	r3, r7
 80015ca:	2208      	movs	r2, #8
 80015cc:	4619      	mov	r1, r3
 80015ce:	4806      	ldr	r0, [pc, #24]	; (80015e8 <MX_TIM4_Init+0x10c>)
 80015d0:	f002 fd96 	bl	8004100 <HAL_TIM_IC_ConfigChannel>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 80015da:	f000 f861 	bl	80016a0 <Error_Handler>



  /* USER CODE END TIM4_Init 2 */

}
 80015de:	bf00      	nop
 80015e0:	3728      	adds	r7, #40	; 0x28
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	2000004c 	.word	0x2000004c
 80015ec:	40000800 	.word	0x40000800

080015f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b088      	sub	sp, #32
 80015f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f6:	f107 0310 	add.w	r3, r7, #16
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	605a      	str	r2, [r3, #4]
 8001600:	609a      	str	r2, [r3, #8]
 8001602:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001604:	4b24      	ldr	r3, [pc, #144]	; (8001698 <MX_GPIO_Init+0xa8>)
 8001606:	699b      	ldr	r3, [r3, #24]
 8001608:	4a23      	ldr	r2, [pc, #140]	; (8001698 <MX_GPIO_Init+0xa8>)
 800160a:	f043 0310 	orr.w	r3, r3, #16
 800160e:	6193      	str	r3, [r2, #24]
 8001610:	4b21      	ldr	r3, [pc, #132]	; (8001698 <MX_GPIO_Init+0xa8>)
 8001612:	699b      	ldr	r3, [r3, #24]
 8001614:	f003 0310 	and.w	r3, r3, #16
 8001618:	60fb      	str	r3, [r7, #12]
 800161a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800161c:	4b1e      	ldr	r3, [pc, #120]	; (8001698 <MX_GPIO_Init+0xa8>)
 800161e:	699b      	ldr	r3, [r3, #24]
 8001620:	4a1d      	ldr	r2, [pc, #116]	; (8001698 <MX_GPIO_Init+0xa8>)
 8001622:	f043 0320 	orr.w	r3, r3, #32
 8001626:	6193      	str	r3, [r2, #24]
 8001628:	4b1b      	ldr	r3, [pc, #108]	; (8001698 <MX_GPIO_Init+0xa8>)
 800162a:	699b      	ldr	r3, [r3, #24]
 800162c:	f003 0320 	and.w	r3, r3, #32
 8001630:	60bb      	str	r3, [r7, #8]
 8001632:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001634:	4b18      	ldr	r3, [pc, #96]	; (8001698 <MX_GPIO_Init+0xa8>)
 8001636:	699b      	ldr	r3, [r3, #24]
 8001638:	4a17      	ldr	r2, [pc, #92]	; (8001698 <MX_GPIO_Init+0xa8>)
 800163a:	f043 0304 	orr.w	r3, r3, #4
 800163e:	6193      	str	r3, [r2, #24]
 8001640:	4b15      	ldr	r3, [pc, #84]	; (8001698 <MX_GPIO_Init+0xa8>)
 8001642:	699b      	ldr	r3, [r3, #24]
 8001644:	f003 0304 	and.w	r3, r3, #4
 8001648:	607b      	str	r3, [r7, #4]
 800164a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800164c:	4b12      	ldr	r3, [pc, #72]	; (8001698 <MX_GPIO_Init+0xa8>)
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	4a11      	ldr	r2, [pc, #68]	; (8001698 <MX_GPIO_Init+0xa8>)
 8001652:	f043 0308 	orr.w	r3, r3, #8
 8001656:	6193      	str	r3, [r2, #24]
 8001658:	4b0f      	ldr	r3, [pc, #60]	; (8001698 <MX_GPIO_Init+0xa8>)
 800165a:	699b      	ldr	r3, [r3, #24]
 800165c:	f003 0308 	and.w	r3, r3, #8
 8001660:	603b      	str	r3, [r7, #0]
 8001662:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001664:	2200      	movs	r2, #0
 8001666:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800166a:	480c      	ldr	r0, [pc, #48]	; (800169c <MX_GPIO_Init+0xac>)
 800166c:	f001 fb38 	bl	8002ce0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001670:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001674:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001676:	2301      	movs	r3, #1
 8001678:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167a:	2300      	movs	r3, #0
 800167c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167e:	2302      	movs	r3, #2
 8001680:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001682:	f107 0310 	add.w	r3, r7, #16
 8001686:	4619      	mov	r1, r3
 8001688:	4804      	ldr	r0, [pc, #16]	; (800169c <MX_GPIO_Init+0xac>)
 800168a:	f001 f9cf 	bl	8002a2c <HAL_GPIO_Init>

}
 800168e:	bf00      	nop
 8001690:	3720      	adds	r7, #32
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	40021000 	.word	0x40021000
 800169c:	40011000 	.word	0x40011000

080016a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016a4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016a6:	e7fe      	b.n	80016a6 <Error_Handler+0x6>

080016a8 <PID_init>:

#include "pid.h"


void PID_init(PID *PID_Handler)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
	PID_Handler->integrator = 0;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f04f 0200 	mov.w	r2, #0
 80016b6:	625a      	str	r2, [r3, #36]	; 0x24
	PID_Handler->prevError = 0;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f04f 0200 	mov.w	r2, #0
 80016be:	62da      	str	r2, [r3, #44]	; 0x2c
	PID_Handler->differentiator = 0;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f04f 0200 	mov.w	r2, #0
 80016c6:	631a      	str	r2, [r3, #48]	; 0x30
	PID_Handler->prevMeasurment = 0;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f04f 0200 	mov.w	r2, #0
 80016ce:	635a      	str	r2, [r3, #52]	; 0x34
	PID_Handler->output = 0;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f04f 0200 	mov.w	r2, #0
 80016d6:	639a      	str	r2, [r3, #56]	; 0x38
	PID_Handler->limit_max_output = 65535;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	4a09      	ldr	r2, [pc, #36]	; (8001700 <PID_init+0x58>)
 80016dc:	615a      	str	r2, [r3, #20]
	PID_Handler->limit_min_output = 0;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	f04f 0200 	mov.w	r2, #0
 80016e4:	611a      	str	r2, [r3, #16]
	PID_Handler->proportional = 0;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	f04f 0200 	mov.w	r2, #0
 80016ec:	621a      	str	r2, [r3, #32]
	PID_Handler->prevIntegrator = 0;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	f04f 0200 	mov.w	r2, #0
 80016f4:	629a      	str	r2, [r3, #40]	; 0x28
	/*	Tau, KP,KI,KD needed	Tsample	*/
}
 80016f6:	bf00      	nop
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bc80      	pop	{r7}
 80016fe:	4770      	bx	lr
 8001700:	477fff00 	.word	0x477fff00

08001704 <PID_Update>:



float PID_Update(PID *PID_H, float setpoint, float measurment)
{
 8001704:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001708:	b086      	sub	sp, #24
 800170a:	af00      	add	r7, sp, #0
 800170c:	60f8      	str	r0, [r7, #12]
 800170e:	60b9      	str	r1, [r7, #8]
 8001710:	607a      	str	r2, [r7, #4]
	/*	Error calculate		*/

	float error = setpoint - measurment;
 8001712:	6879      	ldr	r1, [r7, #4]
 8001714:	68b8      	ldr	r0, [r7, #8]
 8001716:	f7ff f93b 	bl	8000990 <__aeabi_fsub>
 800171a:	4603      	mov	r3, r0
 800171c:	617b      	str	r3, [r7, #20]

	/*	P	*/

	PID_H->proportional = PID_H->Kp * error;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	6979      	ldr	r1, [r7, #20]
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff fa3d 	bl	8000ba4 <__aeabi_fmul>
 800172a:	4603      	mov	r3, r0
 800172c:	461a      	mov	r2, r3
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	621a      	str	r2, [r3, #32]

	/*	I	*/

	PID_H->integrator = PID_H->integrator + ((PID_H->Ki * PID_H->T * 0.5) * ( error -  PID_H->prevError));
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001736:	4618      	mov	r0, r3
 8001738:	f7fe fe6c 	bl	8000414 <__aeabi_f2d>
 800173c:	4680      	mov	r8, r0
 800173e:	4689      	mov	r9, r1
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	685a      	ldr	r2, [r3, #4]
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	699b      	ldr	r3, [r3, #24]
 8001748:	4619      	mov	r1, r3
 800174a:	4610      	mov	r0, r2
 800174c:	f7ff fa2a 	bl	8000ba4 <__aeabi_fmul>
 8001750:	4603      	mov	r3, r0
 8001752:	4618      	mov	r0, r3
 8001754:	f7fe fe5e 	bl	8000414 <__aeabi_f2d>
 8001758:	f04f 0200 	mov.w	r2, #0
 800175c:	4b7f      	ldr	r3, [pc, #508]	; (800195c <PID_Update+0x258>)
 800175e:	f7fe feb1 	bl	80004c4 <__aeabi_dmul>
 8001762:	4602      	mov	r2, r0
 8001764:	460b      	mov	r3, r1
 8001766:	4692      	mov	sl, r2
 8001768:	469b      	mov	fp, r3
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800176e:	4619      	mov	r1, r3
 8001770:	6978      	ldr	r0, [r7, #20]
 8001772:	f7ff f90d 	bl	8000990 <__aeabi_fsub>
 8001776:	4603      	mov	r3, r0
 8001778:	4618      	mov	r0, r3
 800177a:	f7fe fe4b 	bl	8000414 <__aeabi_f2d>
 800177e:	4602      	mov	r2, r0
 8001780:	460b      	mov	r3, r1
 8001782:	4650      	mov	r0, sl
 8001784:	4659      	mov	r1, fp
 8001786:	f7fe fe9d 	bl	80004c4 <__aeabi_dmul>
 800178a:	4602      	mov	r2, r0
 800178c:	460b      	mov	r3, r1
 800178e:	4640      	mov	r0, r8
 8001790:	4649      	mov	r1, r9
 8001792:	f7fe fce1 	bl	8000158 <__adddf3>
 8001796:	4602      	mov	r2, r0
 8001798:	460b      	mov	r3, r1
 800179a:	4610      	mov	r0, r2
 800179c:	4619      	mov	r1, r3
 800179e:	f7ff f8a3 	bl	80008e8 <__aeabi_d2f>
 80017a2:	4602      	mov	r2, r0
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	625a      	str	r2, [r3, #36]	; 0x24


    PID_H->differentiator = -(2.0 * PID_H->Kd * (measurment - PID_H->prevMeasurment)
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7fe fe31 	bl	8000414 <__aeabi_f2d>
 80017b2:	4602      	mov	r2, r0
 80017b4:	460b      	mov	r3, r1
 80017b6:	f7fe fccf 	bl	8000158 <__adddf3>
 80017ba:	4602      	mov	r2, r0
 80017bc:	460b      	mov	r3, r1
 80017be:	4690      	mov	r8, r2
 80017c0:	4699      	mov	r9, r3
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017c6:	4619      	mov	r1, r3
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f7ff f8e1 	bl	8000990 <__aeabi_fsub>
 80017ce:	4603      	mov	r3, r0
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7fe fe1f 	bl	8000414 <__aeabi_f2d>
 80017d6:	4602      	mov	r2, r0
 80017d8:	460b      	mov	r3, r1
 80017da:	4640      	mov	r0, r8
 80017dc:	4649      	mov	r1, r9
 80017de:	f7fe fe71 	bl	80004c4 <__aeabi_dmul>
 80017e2:	4602      	mov	r2, r0
 80017e4:	460b      	mov	r3, r1
 80017e6:	4690      	mov	r8, r2
 80017e8:	4699      	mov	r9, r3
                        + (2.0f * PID_H->tau - PID_H->T) * PID_H->differentiator)
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	68db      	ldr	r3, [r3, #12]
 80017ee:	4619      	mov	r1, r3
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff f8cf 	bl	8000994 <__addsf3>
 80017f6:	4603      	mov	r3, r0
 80017f8:	461a      	mov	r2, r3
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	699b      	ldr	r3, [r3, #24]
 80017fe:	4619      	mov	r1, r3
 8001800:	4610      	mov	r0, r2
 8001802:	f7ff f8c5 	bl	8000990 <__aeabi_fsub>
 8001806:	4603      	mov	r3, r0
 8001808:	461a      	mov	r2, r3
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	4619      	mov	r1, r3
 8001810:	4610      	mov	r0, r2
 8001812:	f7ff f9c7 	bl	8000ba4 <__aeabi_fmul>
 8001816:	4603      	mov	r3, r0
 8001818:	4618      	mov	r0, r3
 800181a:	f7fe fdfb 	bl	8000414 <__aeabi_f2d>
 800181e:	4602      	mov	r2, r0
 8001820:	460b      	mov	r3, r1
 8001822:	4640      	mov	r0, r8
 8001824:	4649      	mov	r1, r9
 8001826:	f7fe fc97 	bl	8000158 <__adddf3>
 800182a:	4602      	mov	r2, r0
 800182c:	460b      	mov	r3, r1
    PID_H->differentiator = -(2.0 * PID_H->Kd * (measurment - PID_H->prevMeasurment)
 800182e:	4614      	mov	r4, r2
 8001830:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
                        / (2.0f * PID_H->tau + PID_H->T);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	4619      	mov	r1, r3
 800183a:	4618      	mov	r0, r3
 800183c:	f7ff f8aa 	bl	8000994 <__addsf3>
 8001840:	4603      	mov	r3, r0
 8001842:	461a      	mov	r2, r3
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	699b      	ldr	r3, [r3, #24]
 8001848:	4619      	mov	r1, r3
 800184a:	4610      	mov	r0, r2
 800184c:	f7ff f8a2 	bl	8000994 <__addsf3>
 8001850:	4603      	mov	r3, r0
 8001852:	4618      	mov	r0, r3
 8001854:	f7fe fdde 	bl	8000414 <__aeabi_f2d>
 8001858:	4602      	mov	r2, r0
 800185a:	460b      	mov	r3, r1
 800185c:	4620      	mov	r0, r4
 800185e:	4629      	mov	r1, r5
 8001860:	f7fe ff5a 	bl	8000718 <__aeabi_ddiv>
 8001864:	4603      	mov	r3, r0
 8001866:	460c      	mov	r4, r1
 8001868:	4618      	mov	r0, r3
 800186a:	4621      	mov	r1, r4
 800186c:	f7ff f83c 	bl	80008e8 <__aeabi_d2f>
 8001870:	4602      	mov	r2, r0
    PID_H->differentiator = -(2.0 * PID_H->Kd * (measurment - PID_H->prevMeasurment)
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	631a      	str	r2, [r3, #48]	; 0x30



    PID_H->output = PID_H->proportional + PID_H->integrator + PID_H->differentiator;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	6a1a      	ldr	r2, [r3, #32]
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800187e:	4619      	mov	r1, r3
 8001880:	4610      	mov	r0, r2
 8001882:	f7ff f887 	bl	8000994 <__addsf3>
 8001886:	4603      	mov	r3, r0
 8001888:	461a      	mov	r2, r3
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	4619      	mov	r1, r3
 8001890:	4610      	mov	r0, r2
 8001892:	f7ff f87f 	bl	8000994 <__addsf3>
 8001896:	4603      	mov	r3, r0
 8001898:	461a      	mov	r2, r3
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	639a      	str	r2, [r3, #56]	; 0x38


	/*	Limit	*/


	PID_H->is_int_winded_up = 0;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	2200      	movs	r2, #0
 80018a2:	61da      	str	r2, [r3, #28]

	  if (PID_H->output > PID_H->limit_max_output)
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	695b      	ldr	r3, [r3, #20]
 80018ac:	4619      	mov	r1, r3
 80018ae:	4610      	mov	r0, r2
 80018b0:	f7ff fb34 	bl	8000f1c <__aeabi_fcmpgt>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d01d      	beq.n	80018f6 <PID_Update+0x1f2>
	  {
		  PID_H->output = PID_H->output > PID_H->limit_max_output;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	695b      	ldr	r3, [r3, #20]
 80018c2:	4619      	mov	r1, r3
 80018c4:	4610      	mov	r0, r2
 80018c6:	f7ff fb29 	bl	8000f1c <__aeabi_fcmpgt>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d002      	beq.n	80018d6 <PID_Update+0x1d2>
 80018d0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80018d4:	e001      	b.n	80018da <PID_Update+0x1d6>
 80018d6:	f04f 0200 	mov.w	r2, #0
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	639a      	str	r2, [r3, #56]	; 0x38

	    if (error > 0)
 80018de:	f04f 0100 	mov.w	r1, #0
 80018e2:	6978      	ldr	r0, [r7, #20]
 80018e4:	f7ff fb1a 	bl	8000f1c <__aeabi_fcmpgt>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d01d      	beq.n	800192a <PID_Update+0x226>
	    {
	    	PID_H->is_int_winded_up = 1;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	2201      	movs	r2, #1
 80018f2:	61da      	str	r2, [r3, #28]
 80018f4:	e019      	b.n	800192a <PID_Update+0x226>
	    }
	  }
	  else if (PID_H->output < PID_H->limit_min_output)
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	691b      	ldr	r3, [r3, #16]
 80018fe:	4619      	mov	r1, r3
 8001900:	4610      	mov	r0, r2
 8001902:	f7ff faed 	bl	8000ee0 <__aeabi_fcmplt>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d00e      	beq.n	800192a <PID_Update+0x226>
	  {
		  PID_H->output = PID_H->limit_min_output;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	691a      	ldr	r2, [r3, #16]
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	639a      	str	r2, [r3, #56]	; 0x38

	    if (error < 0)
 8001914:	f04f 0100 	mov.w	r1, #0
 8001918:	6978      	ldr	r0, [r7, #20]
 800191a:	f7ff fae1 	bl	8000ee0 <__aeabi_fcmplt>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d002      	beq.n	800192a <PID_Update+0x226>
	    {
	    	PID_H->is_int_winded_up = 1;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	2201      	movs	r2, #1
 8001928:	61da      	str	r2, [r3, #28]
	    }
	  }


	  if (PID_H->is_int_winded_up == 1) // Wind up == No I update
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	69db      	ldr	r3, [r3, #28]
 800192e:	2b01      	cmp	r3, #1
 8001930:	d103      	bne.n	800193a <PID_Update+0x236>
	  {
		  PID_H->integrator = PID_H->prevIntegrator;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	625a      	str	r2, [r3, #36]	; 0x24



/* Save memory blocks*/

	PID_H->prevIntegrator = PID_H->integrator;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	629a      	str	r2, [r3, #40]	; 0x28
	PID_H->prevMeasurment = measurment;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	635a      	str	r2, [r3, #52]	; 0x34
	PID_H -> prevError = error;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	697a      	ldr	r2, [r7, #20]
 800194c:	62da      	str	r2, [r3, #44]	; 0x2c

	return PID_H->output;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	6b9b      	ldr	r3, [r3, #56]	; 0x38

}
 8001952:	4618      	mov	r0, r3
 8001954:	3718      	adds	r7, #24
 8001956:	46bd      	mov	sp, r7
 8001958:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800195c:	3fe00000 	.word	0x3fe00000

08001960 <init_peripheral>:




void init_peripheral()
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
	/*    TESTING	START	 */

	set_pwm_duty_non_inverted(&state_machine_variable_bldc, 0);
 8001964:	2100      	movs	r1, #0
 8001966:	481d      	ldr	r0, [pc, #116]	; (80019dc <init_peripheral+0x7c>)
 8001968:	f7ff fbc6 	bl	80010f8 <set_pwm_duty_non_inverted>
	/*    TESTING	END	 */


	/*	PID init		*/

	PID_init(&PID_Handler);
 800196c:	481c      	ldr	r0, [pc, #112]	; (80019e0 <init_peripheral+0x80>)
 800196e:	f7ff fe9b 	bl	80016a8 <PID_init>

	/*  Hall sensor handler init */

	hall_sensor_transit_times_struct.htim = &htim4;
 8001972:	4b1c      	ldr	r3, [pc, #112]	; (80019e4 <init_peripheral+0x84>)
 8001974:	4a1c      	ldr	r2, [pc, #112]	; (80019e8 <init_peripheral+0x88>)
 8001976:	60da      	str	r2, [r3, #12]


	/* Adc read handler init */

	adc_last_read_values.hadc = &hadc1;
 8001978:	4b1c      	ldr	r3, [pc, #112]	; (80019ec <init_peripheral+0x8c>)
 800197a:	4a1d      	ldr	r2, [pc, #116]	; (80019f0 <init_peripheral+0x90>)
 800197c:	609a      	str	r2, [r3, #8]


	/*   Six step handler init  */

	state_machine_variable_bldc.actual_direction = 1;
 800197e:	4b17      	ldr	r3, [pc, #92]	; (80019dc <init_peripheral+0x7c>)
 8001980:	2201      	movs	r2, #1
 8001982:	609a      	str	r2, [r3, #8]
	state_machine_variable_bldc.hall_sensor_Actual_state = 0;
 8001984:	4b15      	ldr	r3, [pc, #84]	; (80019dc <init_peripheral+0x7c>)
 8001986:	2200      	movs	r2, #0
 8001988:	601a      	str	r2, [r3, #0]
	state_machine_variable_bldc.hall_sensor_Last_state = 0;
 800198a:	4b14      	ldr	r3, [pc, #80]	; (80019dc <init_peripheral+0x7c>)
 800198c:	2200      	movs	r2, #0
 800198e:	605a      	str	r2, [r3, #4]
	state_machine_variable_bldc.htim = &htim1;
 8001990:	4b12      	ldr	r3, [pc, #72]	; (80019dc <init_peripheral+0x7c>)
 8001992:	4a18      	ldr	r2, [pc, #96]	; (80019f4 <init_peripheral+0x94>)
 8001994:	60da      	str	r2, [r3, #12]
	state_machine_variable_bldc.pwn_period_time_ARR = PWM_Period_ARR;
 8001996:	4b18      	ldr	r3, [pc, #96]	; (80019f8 <init_peripheral+0x98>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	b29a      	uxth	r2, r3
 800199c:	4b0f      	ldr	r3, [pc, #60]	; (80019dc <init_peripheral+0x7c>)
 800199e:	82da      	strh	r2, [r3, #22]


	/*  TIM 1 PWM START    */

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80019a0:	2100      	movs	r1, #0
 80019a2:	4814      	ldr	r0, [pc, #80]	; (80019f4 <init_peripheral+0x94>)
 80019a4:	f002 f8a4 	bl	8003af0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80019a8:	2104      	movs	r1, #4
 80019aa:	4812      	ldr	r0, [pc, #72]	; (80019f4 <init_peripheral+0x94>)
 80019ac:	f002 f8a0 	bl	8003af0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80019b0:	2108      	movs	r1, #8
 80019b2:	4810      	ldr	r0, [pc, #64]	; (80019f4 <init_peripheral+0x94>)
 80019b4:	f002 f89c 	bl	8003af0 <HAL_TIM_PWM_Start>

	/* Init six step function */

	init_SixStep(state_machine_variable_bldc.htim);
 80019b8:	4b08      	ldr	r3, [pc, #32]	; (80019dc <init_peripheral+0x7c>)
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	4618      	mov	r0, r3
 80019be:	f7ff fab7 	bl	8000f30 <init_SixStep>

	/*	Start TIM1 for update IT		*/

	HAL_TIM_Base_Start_IT(&htim1);
 80019c2:	480c      	ldr	r0, [pc, #48]	; (80019f4 <init_peripheral+0x94>)
 80019c4:	f001 ffea 	bl	800399c <HAL_TIM_Base_Start_IT>

	/* 	Start ADC  */

	HAL_ADCEx_InjectedStart_IT(&hadc1);
 80019c8:	4809      	ldr	r0, [pc, #36]	; (80019f0 <init_peripheral+0x90>)
 80019ca:	f000 fcfd 	bl	80023c8 <HAL_ADCEx_InjectedStart_IT>

	/*  Start TIM input capture mode  */
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 80019ce:	2100      	movs	r1, #0
 80019d0:	4805      	ldr	r0, [pc, #20]	; (80019e8 <init_peripheral+0x88>)
 80019d2:	f002 f987 	bl	8003ce4 <HAL_TIM_IC_Start_IT>

}
 80019d6:	bf00      	nop
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	200001b8 	.word	0x200001b8
 80019e0:	2000017c 	.word	0x2000017c
 80019e4:	20000160 	.word	0x20000160
 80019e8:	2000004c 	.word	0x2000004c
 80019ec:	20000170 	.word	0x20000170
 80019f0:	200000e8 	.word	0x200000e8
 80019f4:	20000118 	.word	0x20000118
 80019f8:	20000020 	.word	0x20000020

080019fc <HAL_ADCEx_InjectedConvCpltCallback>:




void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
	Adc_read_values(&adc_last_read_values);
 8001a04:	4804      	ldr	r0, [pc, #16]	; (8001a18 <HAL_ADCEx_InjectedConvCpltCallback+0x1c>)
 8001a06:	f7ff fb15 	bl	8001034 <Adc_read_values>
	HAL_ADCEx_InjectedStart_IT(&hadc1);
 8001a0a:	4804      	ldr	r0, [pc, #16]	; (8001a1c <HAL_ADCEx_InjectedConvCpltCallback+0x20>)
 8001a0c:	f000 fcdc 	bl	80023c8 <HAL_ADCEx_InjectedStart_IT>

}
 8001a10:	bf00      	nop
 8001a12:	3708      	adds	r7, #8
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	20000170 	.word	0x20000170
 8001a1c:	200000e8 	.word	0x200000e8

08001a20 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a04      	ldr	r2, [pc, #16]	; (8001a40 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d101      	bne.n	8001a36 <HAL_TIM_PeriodElapsedCallback+0x16>
		main_Interrupt();
 8001a32:	f000 f827 	bl	8001a84 <main_Interrupt>
}
 8001a36:	bf00      	nop
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	40012c00 	.word	0x40012c00

08001a44 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM4)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a07      	ldr	r2, [pc, #28]	; (8001a70 <HAL_TIM_IC_CaptureCallback+0x2c>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d107      	bne.n	8001a66 <HAL_TIM_IC_CaptureCallback+0x22>
	{
		hall_sensor_transit_times_struct.hall_A_last_transit_time = TIM4->CNT;
 8001a56:	4b06      	ldr	r3, [pc, #24]	; (8001a70 <HAL_TIM_IC_CaptureCallback+0x2c>)
 8001a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a5a:	b29a      	uxth	r2, r3
 8001a5c:	4b05      	ldr	r3, [pc, #20]	; (8001a74 <HAL_TIM_IC_CaptureCallback+0x30>)
 8001a5e:	801a      	strh	r2, [r3, #0]
		TIM4->CNT = 0;
 8001a60:	4b03      	ldr	r3, [pc, #12]	; (8001a70 <HAL_TIM_IC_CaptureCallback+0x2c>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	625a      	str	r2, [r3, #36]	; 0x24
	}
}
 8001a66:	bf00      	nop
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bc80      	pop	{r7}
 8001a6e:	4770      	bx	lr
 8001a70:	40000800 	.word	0x40000800
 8001a74:	20000160 	.word	0x20000160

08001a78 <main_loop>:



void main_loop()
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0



}
 8001a7c:	bf00      	nop
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bc80      	pop	{r7}
 8001a82:	4770      	bx	lr

08001a84 <main_Interrupt>:




void main_Interrupt()
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
	get_mech_period(&hall_sensor_transit_times_struct);
 8001a88:	480b      	ldr	r0, [pc, #44]	; (8001ab8 <main_Interrupt+0x34>)
 8001a8a:	f7ff fb1d 	bl	80010c8 <get_mech_period>
	get_mech_freq(&hall_sensor_transit_times_struct);
 8001a8e:	480a      	ldr	r0, [pc, #40]	; (8001ab8 <main_Interrupt+0x34>)
 8001a90:	f7ff fb02 	bl	8001098 <get_mech_freq>
	state_machine_variable_bldc.hall_sensor_Actual_state = hall_read_actual_value();
 8001a94:	f7ff fabc 	bl	8001010 <hall_read_actual_value>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	4b08      	ldr	r3, [pc, #32]	; (8001abc <main_Interrupt+0x38>)
 8001a9c:	601a      	str	r2, [r3, #0]

	PID_Update(&PID_Handler,state_machine_variable_bldc.desired_mech_freq ,hall_sensor_transit_times_struct.last_mech_freq);
 8001a9e:	4b07      	ldr	r3, [pc, #28]	; (8001abc <main_Interrupt+0x38>)
 8001aa0:	6999      	ldr	r1, [r3, #24]
 8001aa2:	4b05      	ldr	r3, [pc, #20]	; (8001ab8 <main_Interrupt+0x34>)
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	4805      	ldr	r0, [pc, #20]	; (8001ac0 <main_Interrupt+0x3c>)
 8001aaa:	f7ff fe2b 	bl	8001704 <PID_Update>

	six_step_commutation(&state_machine_variable_bldc);
 8001aae:	4803      	ldr	r0, [pc, #12]	; (8001abc <main_Interrupt+0x38>)
 8001ab0:	f7ff fa6e 	bl	8000f90 <six_step_commutation>
}
 8001ab4:	bf00      	nop
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	20000160 	.word	0x20000160
 8001abc:	200001b8 	.word	0x200001b8
 8001ac0:	2000017c 	.word	0x2000017c

08001ac4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001aca:	4b15      	ldr	r3, [pc, #84]	; (8001b20 <HAL_MspInit+0x5c>)
 8001acc:	699b      	ldr	r3, [r3, #24]
 8001ace:	4a14      	ldr	r2, [pc, #80]	; (8001b20 <HAL_MspInit+0x5c>)
 8001ad0:	f043 0301 	orr.w	r3, r3, #1
 8001ad4:	6193      	str	r3, [r2, #24]
 8001ad6:	4b12      	ldr	r3, [pc, #72]	; (8001b20 <HAL_MspInit+0x5c>)
 8001ad8:	699b      	ldr	r3, [r3, #24]
 8001ada:	f003 0301 	and.w	r3, r3, #1
 8001ade:	60bb      	str	r3, [r7, #8]
 8001ae0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ae2:	4b0f      	ldr	r3, [pc, #60]	; (8001b20 <HAL_MspInit+0x5c>)
 8001ae4:	69db      	ldr	r3, [r3, #28]
 8001ae6:	4a0e      	ldr	r2, [pc, #56]	; (8001b20 <HAL_MspInit+0x5c>)
 8001ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aec:	61d3      	str	r3, [r2, #28]
 8001aee:	4b0c      	ldr	r3, [pc, #48]	; (8001b20 <HAL_MspInit+0x5c>)
 8001af0:	69db      	ldr	r3, [r3, #28]
 8001af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af6:	607b      	str	r3, [r7, #4]
 8001af8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001afa:	4b0a      	ldr	r3, [pc, #40]	; (8001b24 <HAL_MspInit+0x60>)
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	60fb      	str	r3, [r7, #12]
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001b06:	60fb      	str	r3, [r7, #12]
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	4a04      	ldr	r2, [pc, #16]	; (8001b24 <HAL_MspInit+0x60>)
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b16:	bf00      	nop
 8001b18:	3714      	adds	r7, #20
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bc80      	pop	{r7}
 8001b1e:	4770      	bx	lr
 8001b20:	40021000 	.word	0x40021000
 8001b24:	40010000 	.word	0x40010000

08001b28 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b088      	sub	sp, #32
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b30:	f107 0310 	add.w	r3, r7, #16
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	605a      	str	r2, [r3, #4]
 8001b3a:	609a      	str	r2, [r3, #8]
 8001b3c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a18      	ldr	r2, [pc, #96]	; (8001ba4 <HAL_ADC_MspInit+0x7c>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d129      	bne.n	8001b9c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b48:	4b17      	ldr	r3, [pc, #92]	; (8001ba8 <HAL_ADC_MspInit+0x80>)
 8001b4a:	699b      	ldr	r3, [r3, #24]
 8001b4c:	4a16      	ldr	r2, [pc, #88]	; (8001ba8 <HAL_ADC_MspInit+0x80>)
 8001b4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b52:	6193      	str	r3, [r2, #24]
 8001b54:	4b14      	ldr	r3, [pc, #80]	; (8001ba8 <HAL_ADC_MspInit+0x80>)
 8001b56:	699b      	ldr	r3, [r3, #24]
 8001b58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b5c:	60fb      	str	r3, [r7, #12]
 8001b5e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b60:	4b11      	ldr	r3, [pc, #68]	; (8001ba8 <HAL_ADC_MspInit+0x80>)
 8001b62:	699b      	ldr	r3, [r3, #24]
 8001b64:	4a10      	ldr	r2, [pc, #64]	; (8001ba8 <HAL_ADC_MspInit+0x80>)
 8001b66:	f043 0304 	orr.w	r3, r3, #4
 8001b6a:	6193      	str	r3, [r2, #24]
 8001b6c:	4b0e      	ldr	r3, [pc, #56]	; (8001ba8 <HAL_ADC_MspInit+0x80>)
 8001b6e:	699b      	ldr	r3, [r3, #24]
 8001b70:	f003 0304 	and.w	r3, r3, #4
 8001b74:	60bb      	str	r3, [r7, #8]
 8001b76:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001b78:	230f      	movs	r3, #15
 8001b7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b80:	f107 0310 	add.w	r3, r7, #16
 8001b84:	4619      	mov	r1, r3
 8001b86:	4809      	ldr	r0, [pc, #36]	; (8001bac <HAL_ADC_MspInit+0x84>)
 8001b88:	f000 ff50 	bl	8002a2c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	2102      	movs	r1, #2
 8001b90:	2012      	movs	r0, #18
 8001b92:	f000 ff14 	bl	80029be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001b96:	2012      	movs	r0, #18
 8001b98:	f000 ff2d 	bl	80029f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b9c:	bf00      	nop
 8001b9e:	3720      	adds	r7, #32
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	40012400 	.word	0x40012400
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	40010800 	.word	0x40010800

08001bb0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b088      	sub	sp, #32
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb8:	f107 0310 	add.w	r3, r7, #16
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	605a      	str	r2, [r3, #4]
 8001bc2:	609a      	str	r2, [r3, #8]
 8001bc4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a16      	ldr	r2, [pc, #88]	; (8001c24 <HAL_I2C_MspInit+0x74>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d124      	bne.n	8001c1a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bd0:	4b15      	ldr	r3, [pc, #84]	; (8001c28 <HAL_I2C_MspInit+0x78>)
 8001bd2:	699b      	ldr	r3, [r3, #24]
 8001bd4:	4a14      	ldr	r2, [pc, #80]	; (8001c28 <HAL_I2C_MspInit+0x78>)
 8001bd6:	f043 0308 	orr.w	r3, r3, #8
 8001bda:	6193      	str	r3, [r2, #24]
 8001bdc:	4b12      	ldr	r3, [pc, #72]	; (8001c28 <HAL_I2C_MspInit+0x78>)
 8001bde:	699b      	ldr	r3, [r3, #24]
 8001be0:	f003 0308 	and.w	r3, r3, #8
 8001be4:	60fb      	str	r3, [r7, #12]
 8001be6:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001be8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001bec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bee:	2312      	movs	r3, #18
 8001bf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bf6:	f107 0310 	add.w	r3, r7, #16
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	480b      	ldr	r0, [pc, #44]	; (8001c2c <HAL_I2C_MspInit+0x7c>)
 8001bfe:	f000 ff15 	bl	8002a2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001c02:	4b09      	ldr	r3, [pc, #36]	; (8001c28 <HAL_I2C_MspInit+0x78>)
 8001c04:	69db      	ldr	r3, [r3, #28]
 8001c06:	4a08      	ldr	r2, [pc, #32]	; (8001c28 <HAL_I2C_MspInit+0x78>)
 8001c08:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c0c:	61d3      	str	r3, [r2, #28]
 8001c0e:	4b06      	ldr	r3, [pc, #24]	; (8001c28 <HAL_I2C_MspInit+0x78>)
 8001c10:	69db      	ldr	r3, [r3, #28]
 8001c12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c16:	60bb      	str	r3, [r7, #8]
 8001c18:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001c1a:	bf00      	nop
 8001c1c:	3720      	adds	r7, #32
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	40005800 	.word	0x40005800
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	40010c00 	.word	0x40010c00

08001c30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b08a      	sub	sp, #40	; 0x28
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c38:	f107 0318 	add.w	r3, r7, #24
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]
 8001c40:	605a      	str	r2, [r3, #4]
 8001c42:	609a      	str	r2, [r3, #8]
 8001c44:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a23      	ldr	r2, [pc, #140]	; (8001cd8 <HAL_TIM_Base_MspInit+0xa8>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d114      	bne.n	8001c7a <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c50:	4b22      	ldr	r3, [pc, #136]	; (8001cdc <HAL_TIM_Base_MspInit+0xac>)
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	4a21      	ldr	r2, [pc, #132]	; (8001cdc <HAL_TIM_Base_MspInit+0xac>)
 8001c56:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c5a:	6193      	str	r3, [r2, #24]
 8001c5c:	4b1f      	ldr	r3, [pc, #124]	; (8001cdc <HAL_TIM_Base_MspInit+0xac>)
 8001c5e:	699b      	ldr	r3, [r3, #24]
 8001c60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c64:	617b      	str	r3, [r7, #20]
 8001c66:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001c68:	2200      	movs	r2, #0
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	2019      	movs	r0, #25
 8001c6e:	f000 fea6 	bl	80029be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001c72:	2019      	movs	r0, #25
 8001c74:	f000 febf 	bl	80029f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001c78:	e029      	b.n	8001cce <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM4)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a18      	ldr	r2, [pc, #96]	; (8001ce0 <HAL_TIM_Base_MspInit+0xb0>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d124      	bne.n	8001cce <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c84:	4b15      	ldr	r3, [pc, #84]	; (8001cdc <HAL_TIM_Base_MspInit+0xac>)
 8001c86:	69db      	ldr	r3, [r3, #28]
 8001c88:	4a14      	ldr	r2, [pc, #80]	; (8001cdc <HAL_TIM_Base_MspInit+0xac>)
 8001c8a:	f043 0304 	orr.w	r3, r3, #4
 8001c8e:	61d3      	str	r3, [r2, #28]
 8001c90:	4b12      	ldr	r3, [pc, #72]	; (8001cdc <HAL_TIM_Base_MspInit+0xac>)
 8001c92:	69db      	ldr	r3, [r3, #28]
 8001c94:	f003 0304 	and.w	r3, r3, #4
 8001c98:	613b      	str	r3, [r7, #16]
 8001c9a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c9c:	4b0f      	ldr	r3, [pc, #60]	; (8001cdc <HAL_TIM_Base_MspInit+0xac>)
 8001c9e:	699b      	ldr	r3, [r3, #24]
 8001ca0:	4a0e      	ldr	r2, [pc, #56]	; (8001cdc <HAL_TIM_Base_MspInit+0xac>)
 8001ca2:	f043 0308 	orr.w	r3, r3, #8
 8001ca6:	6193      	str	r3, [r2, #24]
 8001ca8:	4b0c      	ldr	r3, [pc, #48]	; (8001cdc <HAL_TIM_Base_MspInit+0xac>)
 8001caa:	699b      	ldr	r3, [r3, #24]
 8001cac:	f003 0308 	and.w	r3, r3, #8
 8001cb0:	60fb      	str	r3, [r7, #12]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8001cb4:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001cb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cc2:	f107 0318 	add.w	r3, r7, #24
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	4806      	ldr	r0, [pc, #24]	; (8001ce4 <HAL_TIM_Base_MspInit+0xb4>)
 8001cca:	f000 feaf 	bl	8002a2c <HAL_GPIO_Init>
}
 8001cce:	bf00      	nop
 8001cd0:	3728      	adds	r7, #40	; 0x28
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	40012c00 	.word	0x40012c00
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	40000800 	.word	0x40000800
 8001ce4:	40010c00 	.word	0x40010c00

08001ce8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b08a      	sub	sp, #40	; 0x28
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf0:	f107 0314 	add.w	r3, r7, #20
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	605a      	str	r2, [r3, #4]
 8001cfa:	609a      	str	r2, [r3, #8]
 8001cfc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a25      	ldr	r2, [pc, #148]	; (8001d98 <HAL_TIM_MspPostInit+0xb0>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d142      	bne.n	8001d8e <HAL_TIM_MspPostInit+0xa6>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d08:	4b24      	ldr	r3, [pc, #144]	; (8001d9c <HAL_TIM_MspPostInit+0xb4>)
 8001d0a:	699b      	ldr	r3, [r3, #24]
 8001d0c:	4a23      	ldr	r2, [pc, #140]	; (8001d9c <HAL_TIM_MspPostInit+0xb4>)
 8001d0e:	f043 0304 	orr.w	r3, r3, #4
 8001d12:	6193      	str	r3, [r2, #24]
 8001d14:	4b21      	ldr	r3, [pc, #132]	; (8001d9c <HAL_TIM_MspPostInit+0xb4>)
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	f003 0304 	and.w	r3, r3, #4
 8001d1c:	613b      	str	r3, [r7, #16]
 8001d1e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d20:	4b1e      	ldr	r3, [pc, #120]	; (8001d9c <HAL_TIM_MspPostInit+0xb4>)
 8001d22:	699b      	ldr	r3, [r3, #24]
 8001d24:	4a1d      	ldr	r2, [pc, #116]	; (8001d9c <HAL_TIM_MspPostInit+0xb4>)
 8001d26:	f043 0308 	orr.w	r3, r3, #8
 8001d2a:	6193      	str	r3, [r2, #24]
 8001d2c:	4b1b      	ldr	r3, [pc, #108]	; (8001d9c <HAL_TIM_MspPostInit+0xb4>)
 8001d2e:	699b      	ldr	r3, [r3, #24]
 8001d30:	f003 0308 	and.w	r3, r3, #8
 8001d34:	60fb      	str	r3, [r7, #12]
 8001d36:	68fb      	ldr	r3, [r7, #12]
    PB1     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001d38:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8001d3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d3e:	2302      	movs	r3, #2
 8001d40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d42:	2302      	movs	r3, #2
 8001d44:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d46:	f107 0314 	add.w	r3, r7, #20
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	4814      	ldr	r0, [pc, #80]	; (8001da0 <HAL_TIM_MspPostInit+0xb8>)
 8001d4e:	f000 fe6d 	bl	8002a2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d52:	2303      	movs	r3, #3
 8001d54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d56:	2302      	movs	r3, #2
 8001d58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d5e:	f107 0314 	add.w	r3, r7, #20
 8001d62:	4619      	mov	r1, r3
 8001d64:	480f      	ldr	r0, [pc, #60]	; (8001da4 <HAL_TIM_MspPostInit+0xbc>)
 8001d66:	f000 fe61 	bl	8002a2c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM1_PARTIAL();
 8001d6a:	4b0f      	ldr	r3, [pc, #60]	; (8001da8 <HAL_TIM_MspPostInit+0xc0>)
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d72:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001d76:	627b      	str	r3, [r7, #36]	; 0x24
 8001d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001d7e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d86:	627b      	str	r3, [r7, #36]	; 0x24
 8001d88:	4a07      	ldr	r2, [pc, #28]	; (8001da8 <HAL_TIM_MspPostInit+0xc0>)
 8001d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8c:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001d8e:	bf00      	nop
 8001d90:	3728      	adds	r7, #40	; 0x28
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	40012c00 	.word	0x40012c00
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	40010800 	.word	0x40010800
 8001da4:	40010c00 	.word	0x40010c00
 8001da8:	40010000 	.word	0x40010000

08001dac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001db0:	e7fe      	b.n	8001db0 <NMI_Handler+0x4>

08001db2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001db2:	b480      	push	{r7}
 8001db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001db6:	e7fe      	b.n	8001db6 <HardFault_Handler+0x4>

08001db8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dbc:	e7fe      	b.n	8001dbc <MemManage_Handler+0x4>

08001dbe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dc2:	e7fe      	b.n	8001dc2 <BusFault_Handler+0x4>

08001dc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dc8:	e7fe      	b.n	8001dc8 <UsageFault_Handler+0x4>

08001dca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dce:	bf00      	nop
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bc80      	pop	{r7}
 8001dd4:	4770      	bx	lr

08001dd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dda:	bf00      	nop
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bc80      	pop	{r7}
 8001de0:	4770      	bx	lr

08001de2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001de2:	b480      	push	{r7}
 8001de4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001de6:	bf00      	nop
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bc80      	pop	{r7}
 8001dec:	4770      	bx	lr

08001dee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dee:	b580      	push	{r7, lr}
 8001df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001df2:	f000 f893 	bl	8001f1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001df6:	bf00      	nop
 8001df8:	bd80      	pop	{r7, pc}
	...

08001dfc <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001e00:	4802      	ldr	r0, [pc, #8]	; (8001e0c <ADC1_2_IRQHandler+0x10>)
 8001e02:	f000 f97f 	bl	8002104 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001e06:	bf00      	nop
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	200000e8 	.word	0x200000e8

08001e10 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e14:	4802      	ldr	r0, [pc, #8]	; (8001e20 <TIM1_UP_IRQHandler+0x10>)
 8001e16:	f002 f86b 	bl	8003ef0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001e1a:	bf00      	nop
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	20000118 	.word	0x20000118

08001e24 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001e28:	4802      	ldr	r0, [pc, #8]	; (8001e34 <TIM4_IRQHandler+0x10>)
 8001e2a:	f002 f861 	bl	8003ef0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001e2e:	bf00      	nop
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	2000004c 	.word	0x2000004c

08001e38 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e3c:	bf00      	nop
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bc80      	pop	{r7}
 8001e42:	4770      	bx	lr

08001e44 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001e44:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001e46:	e003      	b.n	8001e50 <LoopCopyDataInit>

08001e48 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001e48:	4b0b      	ldr	r3, [pc, #44]	; (8001e78 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001e4a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001e4c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001e4e:	3104      	adds	r1, #4

08001e50 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001e50:	480a      	ldr	r0, [pc, #40]	; (8001e7c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001e52:	4b0b      	ldr	r3, [pc, #44]	; (8001e80 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001e54:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001e56:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001e58:	d3f6      	bcc.n	8001e48 <CopyDataInit>
  ldr r2, =_sbss
 8001e5a:	4a0a      	ldr	r2, [pc, #40]	; (8001e84 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001e5c:	e002      	b.n	8001e64 <LoopFillZerobss>

08001e5e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001e5e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001e60:	f842 3b04 	str.w	r3, [r2], #4

08001e64 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001e64:	4b08      	ldr	r3, [pc, #32]	; (8001e88 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001e66:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001e68:	d3f9      	bcc.n	8001e5e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001e6a:	f7ff ffe5 	bl	8001e38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e6e:	f002 ffdf 	bl	8004e30 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e72:	f7ff f954 	bl	800111e <main>
  bx lr
 8001e76:	4770      	bx	lr
  ldr r3, =_sidata
 8001e78:	08004ed4 	.word	0x08004ed4
  ldr r0, =_sdata
 8001e7c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001e80:	20000030 	.word	0x20000030
  ldr r2, =_sbss
 8001e84:	20000030 	.word	0x20000030
  ldr r3, = _ebss
 8001e88:	200001d8 	.word	0x200001d8

08001e8c <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e8c:	e7fe      	b.n	8001e8c <CAN1_RX1_IRQHandler>
	...

08001e90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e94:	4b08      	ldr	r3, [pc, #32]	; (8001eb8 <HAL_Init+0x28>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a07      	ldr	r2, [pc, #28]	; (8001eb8 <HAL_Init+0x28>)
 8001e9a:	f043 0310 	orr.w	r3, r3, #16
 8001e9e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ea0:	2003      	movs	r0, #3
 8001ea2:	f000 fd81 	bl	80029a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ea6:	2000      	movs	r0, #0
 8001ea8:	f000 f808 	bl	8001ebc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001eac:	f7ff fe0a 	bl	8001ac4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	40022000 	.word	0x40022000

08001ebc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ec4:	4b12      	ldr	r3, [pc, #72]	; (8001f10 <HAL_InitTick+0x54>)
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	4b12      	ldr	r3, [pc, #72]	; (8001f14 <HAL_InitTick+0x58>)
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	4619      	mov	r1, r3
 8001ece:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ed2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eda:	4618      	mov	r0, r3
 8001edc:	f000 fd99 	bl	8002a12 <HAL_SYSTICK_Config>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e00e      	b.n	8001f08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2b0f      	cmp	r3, #15
 8001eee:	d80a      	bhi.n	8001f06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	6879      	ldr	r1, [r7, #4]
 8001ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ef8:	f000 fd61 	bl	80029be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001efc:	4a06      	ldr	r2, [pc, #24]	; (8001f18 <HAL_InitTick+0x5c>)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f02:	2300      	movs	r3, #0
 8001f04:	e000      	b.n	8001f08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3708      	adds	r7, #8
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	20000024 	.word	0x20000024
 8001f14:	2000002c 	.word	0x2000002c
 8001f18:	20000028 	.word	0x20000028

08001f1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f20:	4b05      	ldr	r3, [pc, #20]	; (8001f38 <HAL_IncTick+0x1c>)
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	461a      	mov	r2, r3
 8001f26:	4b05      	ldr	r3, [pc, #20]	; (8001f3c <HAL_IncTick+0x20>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4413      	add	r3, r2
 8001f2c:	4a03      	ldr	r2, [pc, #12]	; (8001f3c <HAL_IncTick+0x20>)
 8001f2e:	6013      	str	r3, [r2, #0]
}
 8001f30:	bf00      	nop
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bc80      	pop	{r7}
 8001f36:	4770      	bx	lr
 8001f38:	2000002c 	.word	0x2000002c
 8001f3c:	200001d4 	.word	0x200001d4

08001f40 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  return uwTick;
 8001f44:	4b02      	ldr	r3, [pc, #8]	; (8001f50 <HAL_GetTick+0x10>)
 8001f46:	681b      	ldr	r3, [r3, #0]
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bc80      	pop	{r7}
 8001f4e:	4770      	bx	lr
 8001f50:	200001d4 	.word	0x200001d4

08001f54 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b086      	sub	sp, #24
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001f60:	2300      	movs	r3, #0
 8001f62:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001f64:	2300      	movs	r3, #0
 8001f66:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d101      	bne.n	8001f76 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e0be      	b.n	80020f4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d109      	bne.n	8001f98 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f7ff fdc8 	bl	8001b28 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f000 f9db 	bl	8002354 <ADC_ConversionStop_Disable>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa6:	f003 0310 	and.w	r3, r3, #16
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	f040 8099 	bne.w	80020e2 <HAL_ADC_Init+0x18e>
 8001fb0:	7dfb      	ldrb	r3, [r7, #23]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	f040 8095 	bne.w	80020e2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fbc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001fc0:	f023 0302 	bic.w	r3, r3, #2
 8001fc4:	f043 0202 	orr.w	r2, r3, #2
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001fd4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	7b1b      	ldrb	r3, [r3, #12]
 8001fda:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001fdc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001fde:	68ba      	ldr	r2, [r7, #8]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fec:	d003      	beq.n	8001ff6 <HAL_ADC_Init+0xa2>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d102      	bne.n	8001ffc <HAL_ADC_Init+0xa8>
 8001ff6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ffa:	e000      	b.n	8001ffe <HAL_ADC_Init+0xaa>
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	693a      	ldr	r2, [r7, #16]
 8002000:	4313      	orrs	r3, r2
 8002002:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	7d1b      	ldrb	r3, [r3, #20]
 8002008:	2b01      	cmp	r3, #1
 800200a:	d119      	bne.n	8002040 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	7b1b      	ldrb	r3, [r3, #12]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d109      	bne.n	8002028 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	699b      	ldr	r3, [r3, #24]
 8002018:	3b01      	subs	r3, #1
 800201a:	035a      	lsls	r2, r3, #13
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	4313      	orrs	r3, r2
 8002020:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002024:	613b      	str	r3, [r7, #16]
 8002026:	e00b      	b.n	8002040 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800202c:	f043 0220 	orr.w	r2, r3, #32
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002038:	f043 0201 	orr.w	r2, r3, #1
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	430a      	orrs	r2, r1
 8002052:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	689a      	ldr	r2, [r3, #8]
 800205a:	4b28      	ldr	r3, [pc, #160]	; (80020fc <HAL_ADC_Init+0x1a8>)
 800205c:	4013      	ands	r3, r2
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	6812      	ldr	r2, [r2, #0]
 8002062:	68b9      	ldr	r1, [r7, #8]
 8002064:	430b      	orrs	r3, r1
 8002066:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002070:	d003      	beq.n	800207a <HAL_ADC_Init+0x126>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	2b01      	cmp	r3, #1
 8002078:	d104      	bne.n	8002084 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	691b      	ldr	r3, [r3, #16]
 800207e:	3b01      	subs	r3, #1
 8002080:	051b      	lsls	r3, r3, #20
 8002082:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800208a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	68fa      	ldr	r2, [r7, #12]
 8002094:	430a      	orrs	r2, r1
 8002096:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	689a      	ldr	r2, [r3, #8]
 800209e:	4b18      	ldr	r3, [pc, #96]	; (8002100 <HAL_ADC_Init+0x1ac>)
 80020a0:	4013      	ands	r3, r2
 80020a2:	68ba      	ldr	r2, [r7, #8]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d10b      	bne.n	80020c0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2200      	movs	r2, #0
 80020ac:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b2:	f023 0303 	bic.w	r3, r3, #3
 80020b6:	f043 0201 	orr.w	r2, r3, #1
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80020be:	e018      	b.n	80020f2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c4:	f023 0312 	bic.w	r3, r3, #18
 80020c8:	f043 0210 	orr.w	r2, r3, #16
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d4:	f043 0201 	orr.w	r2, r3, #1
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80020e0:	e007      	b.n	80020f2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e6:	f043 0210 	orr.w	r2, r3, #16
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80020f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3718      	adds	r7, #24
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	ffe1f7fd 	.word	0xffe1f7fd
 8002100:	ff1f0efe 	.word	0xff1f0efe

08002104 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f003 0320 	and.w	r3, r3, #32
 8002116:	2b20      	cmp	r3, #32
 8002118:	d140      	bne.n	800219c <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0302 	and.w	r3, r3, #2
 8002124:	2b02      	cmp	r3, #2
 8002126:	d139      	bne.n	800219c <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800212c:	f003 0310 	and.w	r3, r3, #16
 8002130:	2b00      	cmp	r3, #0
 8002132:	d105      	bne.n	8002140 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002138:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800214a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800214e:	d11d      	bne.n	800218c <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002154:	2b00      	cmp	r3, #0
 8002156:	d119      	bne.n	800218c <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	685a      	ldr	r2, [r3, #4]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f022 0220 	bic.w	r2, r2, #32
 8002166:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800216c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002178:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d105      	bne.n	800218c <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002184:	f043 0201 	orr.w	r2, r3, #1
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f000 f87c 	bl	800228a <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f06f 0212 	mvn.w	r2, #18
 800219a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021a6:	2b80      	cmp	r3, #128	; 0x80
 80021a8:	d14f      	bne.n	800224a <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0304 	and.w	r3, r3, #4
 80021b4:	2b04      	cmp	r3, #4
 80021b6:	d148      	bne.n	800224a <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021bc:	f003 0310 	and.w	r3, r3, #16
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d105      	bne.n	80021d0 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80021da:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80021de:	d012      	beq.n	8002206 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d125      	bne.n	800223a <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80021f8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80021fc:	d11d      	bne.n	800223a <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002202:	2b00      	cmp	r3, #0
 8002204:	d119      	bne.n	800223a <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	685a      	ldr	r2, [r3, #4]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002214:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800221a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800222a:	2b00      	cmp	r3, #0
 800222c:	d105      	bne.n	800223a <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002232:	f043 0201 	orr.w	r2, r3, #1
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f7ff fbde 	bl	80019fc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f06f 020c 	mvn.w	r2, #12
 8002248:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002254:	2b40      	cmp	r3, #64	; 0x40
 8002256:	d114      	bne.n	8002282 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	2b01      	cmp	r3, #1
 8002264:	d10d      	bne.n	8002282 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800226a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f000 f812 	bl	800229c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f06f 0201 	mvn.w	r2, #1
 8002280:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8002282:	bf00      	nop
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800228a:	b480      	push	{r7}
 800228c:	b083      	sub	sp, #12
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002292:	bf00      	nop
 8002294:	370c      	adds	r7, #12
 8002296:	46bd      	mov	sp, r7
 8002298:	bc80      	pop	{r7}
 800229a:	4770      	bx	lr

0800229c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80022a4:	bf00      	nop
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bc80      	pop	{r7}
 80022ac:	4770      	bx	lr
	...

080022b0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022b8:	2300      	movs	r3, #0
 80022ba:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80022bc:	2300      	movs	r3, #0
 80022be:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d039      	beq.n	8002342 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	689a      	ldr	r2, [r3, #8]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f042 0201 	orr.w	r2, r2, #1
 80022dc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80022de:	4b1b      	ldr	r3, [pc, #108]	; (800234c <ADC_Enable+0x9c>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a1b      	ldr	r2, [pc, #108]	; (8002350 <ADC_Enable+0xa0>)
 80022e4:	fba2 2303 	umull	r2, r3, r2, r3
 80022e8:	0c9b      	lsrs	r3, r3, #18
 80022ea:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80022ec:	e002      	b.n	80022f4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	3b01      	subs	r3, #1
 80022f2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d1f9      	bne.n	80022ee <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80022fa:	f7ff fe21 	bl	8001f40 <HAL_GetTick>
 80022fe:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002300:	e018      	b.n	8002334 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002302:	f7ff fe1d 	bl	8001f40 <HAL_GetTick>
 8002306:	4602      	mov	r2, r0
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	2b02      	cmp	r3, #2
 800230e:	d911      	bls.n	8002334 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002314:	f043 0210 	orr.w	r2, r3, #16
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002320:	f043 0201 	orr.w	r2, r3, #1
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2200      	movs	r2, #0
 800232c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e007      	b.n	8002344 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	f003 0301 	and.w	r3, r3, #1
 800233e:	2b01      	cmp	r3, #1
 8002340:	d1df      	bne.n	8002302 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002342:	2300      	movs	r3, #0
}
 8002344:	4618      	mov	r0, r3
 8002346:	3710      	adds	r7, #16
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	20000024 	.word	0x20000024
 8002350:	431bde83 	.word	0x431bde83

08002354 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800235c:	2300      	movs	r3, #0
 800235e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	f003 0301 	and.w	r3, r3, #1
 800236a:	2b01      	cmp	r3, #1
 800236c:	d127      	bne.n	80023be <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	689a      	ldr	r2, [r3, #8]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f022 0201 	bic.w	r2, r2, #1
 800237c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800237e:	f7ff fddf 	bl	8001f40 <HAL_GetTick>
 8002382:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002384:	e014      	b.n	80023b0 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002386:	f7ff fddb 	bl	8001f40 <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	2b02      	cmp	r3, #2
 8002392:	d90d      	bls.n	80023b0 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002398:	f043 0210 	orr.w	r2, r3, #16
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a4:	f043 0201 	orr.w	r2, r3, #1
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e007      	b.n	80023c0 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	f003 0301 	and.w	r3, r3, #1
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d0e3      	beq.n	8002386 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80023be:	2300      	movs	r3, #0
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3710      	adds	r7, #16
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <HAL_ADCEx_InjectedStart_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef* hadc)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023d0:	2300      	movs	r3, #0
 80023d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d101      	bne.n	80023e2 <HAL_ADCEx_InjectedStart_IT+0x1a>
 80023de:	2302      	movs	r3, #2
 80023e0:	e078      	b.n	80024d4 <HAL_ADCEx_InjectedStart_IT+0x10c>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2201      	movs	r2, #1
 80023e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f7ff ff60 	bl	80022b0 <ADC_Enable>
 80023f0:	4603      	mov	r3, r0
 80023f2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80023f4:	7bfb      	ldrb	r3, [r7, #15]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d167      	bne.n	80024ca <HAL_ADCEx_InjectedStart_IT+0x102>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023fe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002402:	f023 0301 	bic.w	r3, r3, #1
 8002406:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_INJ_EOC,
                      HAL_ADC_STATE_INJ_BUSY);
    
    /* Case of independent mode or multimode (for devices with several ADCs): */
    /* Set multimode state.                                                   */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a32      	ldr	r2, [pc, #200]	; (80024dc <HAL_ADCEx_InjectedStart_IT+0x114>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d105      	bne.n	8002424 <HAL_ADCEx_InjectedStart_IT+0x5c>
 8002418:	4b31      	ldr	r3, [pc, #196]	; (80024e0 <HAL_ADCEx_InjectedStart_IT+0x118>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d106      	bne.n	8002432 <HAL_ADCEx_InjectedStart_IT+0x6a>
    {
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002428:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	629a      	str	r2, [r3, #40]	; 0x28
 8002430:	e005      	b.n	800243e <HAL_ADCEx_InjectedStart_IT+0x76>
    }
    else
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002436:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002446:	2b00      	cmp	r3, #0
 8002448:	d102      	bne.n	8002450 <HAL_ADCEx_InjectedStart_IT+0x88>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f06f 0204 	mvn.w	r2, #4
 8002460:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for injected channels */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	685a      	ldr	r2, [r3, #4]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002470:	605a      	str	r2, [r3, #4]
    /* and if automatic injected conversion is disabled.                      */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* If automatic injected conversion is enabled, conversion will start     */
    /* after next regular group conversion.                                   */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO))
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800247c:	2b00      	cmp	r3, #0
 800247e:	d128      	bne.n	80024d2 <HAL_ADCEx_InjectedStart_IT+0x10a>
    {
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800248a:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 800248e:	d113      	bne.n	80024b8 <HAL_ADCEx_InjectedStart_IT+0xf0>
          ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 8002494:	4a11      	ldr	r2, [pc, #68]	; (80024dc <HAL_ADCEx_InjectedStart_IT+0x114>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d105      	bne.n	80024a6 <HAL_ADCEx_InjectedStart_IT+0xde>
          ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800249a:	4b11      	ldr	r3, [pc, #68]	; (80024e0 <HAL_ADCEx_InjectedStart_IT+0x118>)
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d108      	bne.n	80024b8 <HAL_ADCEx_InjectedStart_IT+0xf0>
      {
        /* Start ADC conversion on injected group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_JSWSTART | ADC_CR2_JEXTTRIG));
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	689a      	ldr	r2, [r3, #8]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f442 1202 	orr.w	r2, r2, #2129920	; 0x208000
 80024b4:	609a      	str	r2, [r3, #8]
 80024b6:	e00c      	b.n	80024d2 <HAL_ADCEx_InjectedStart_IT+0x10a>
      }
      else
      {
        /* Start ADC conversion on injected group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_JEXTTRIG);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	689a      	ldr	r2, [r3, #8]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024c6:	609a      	str	r2, [r3, #8]
 80024c8:	e003      	b.n	80024d2 <HAL_ADCEx_InjectedStart_IT+0x10a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 80024d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3710      	adds	r7, #16
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	40012800 	.word	0x40012800
 80024e0:	40012400 	.word	0x40012400

080024e4 <HAL_ADCEx_InjectedConfigChannel>:
  * @param  sConfigInjected: Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 80024e4:	b490      	push	{r4, r7}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024ee:	2300      	movs	r3, #0
 80024f0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80024f2:	2300      	movs	r3, #0
 80024f4:	60bb      	str	r3, [r7, #8]
    assert_param(IS_ADC_INJECTED_NB_CONV(sConfigInjected->InjectedNbrOfConversion));
    assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->InjectedDiscontinuousConvMode));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d101      	bne.n	8002504 <HAL_ADCEx_InjectedConfigChannel+0x20>
 8002500:	2302      	movs	r3, #2
 8002502:	e17a      	b.n	80027fa <HAL_ADCEx_InjectedConfigChannel+0x316>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2201      	movs	r2, #1
 8002508:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /*   Note: Scan mode is present by hardware on this device and, if          */
  /*   disabled, discards automatically nb of conversions. Anyway, nb of      */
  /*   conversions is forced to 0x00 for alignment over all STM32 devices.    */
  /* - if scan mode is enabled, injected channels sequence length is set to   */
  /*   parameter "InjectedNbrOfConversion".                                   */
  if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d119      	bne.n	8002548 <HAL_ADCEx_InjectedConfigChannel+0x64>
  {
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	2b01      	cmp	r3, #1
 800251a:	d10c      	bne.n	8002536 <HAL_ADCEx_InjectedConfigChannel+0x52>
    {
      /* Clear the old SQx bits for all injected ranks */
      MODIFY_REG(hadc->Instance->JSQR                             ,
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002522:	0d9b      	lsrs	r3, r3, #22
 8002524:	059b      	lsls	r3, r3, #22
 8002526:	683a      	ldr	r2, [r7, #0]
 8002528:	6812      	ldr	r2, [r2, #0]
 800252a:	03d1      	lsls	r1, r2, #15
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	6812      	ldr	r2, [r2, #0]
 8002530:	430b      	orrs	r3, r1
 8002532:	6393      	str	r3, [r2, #56]	; 0x38
 8002534:	e04f      	b.n	80025d6 <HAL_ADCEx_InjectedConfigChannel+0xf2>
    /* If another injected rank than rank1 was intended to be set, and could  */
    /* not due to ScanConvMode disabled, error is reported.                   */
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800253a:	f043 0220 	orr.w	r2, r3, #32
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	73fb      	strb	r3, [r7, #15]
 8002546:	e046      	b.n	80025d6 <HAL_ADCEx_InjectedConfigChannel+0xf2>
  else
  {
    /* Since injected channels rank conv. order depends on total number of   */
    /* injected conversions, selected rank must be below or equal to total   */
    /* number of injected conversions to be updated.                         */
    if (sConfigInjected->InjectedRank <= sConfigInjected->InjectedNbrOfConversion)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685a      	ldr	r2, [r3, #4]
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	691b      	ldr	r3, [r3, #16]
 8002550:	429a      	cmp	r2, r3
 8002552:	d82a      	bhi.n	80025aa <HAL_ADCEx_InjectedConfigChannel+0xc6>
    {
      /* Clear the old SQx bits for the selected rank */
      /* Set the SQx bits for the selected rank */
      MODIFY_REG(hadc->Instance->JSQR                                         ,
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	685a      	ldr	r2, [r3, #4]
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	1ad2      	subs	r2, r2, r3
 8002564:	4613      	mov	r3, r2
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	4413      	add	r3, r2
 800256a:	330f      	adds	r3, #15
 800256c:	221f      	movs	r2, #31
 800256e:	fa02 f303 	lsl.w	r3, r2, r3
 8002572:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8002576:	43db      	mvns	r3, r3
 8002578:	4019      	ands	r1, r3
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	3b01      	subs	r3, #1
 8002580:	0518      	lsls	r0, r3, #20
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	681c      	ldr	r4, [r3, #0]
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	685a      	ldr	r2, [r3, #4]
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	1ad2      	subs	r2, r2, r3
 8002590:	4613      	mov	r3, r2
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	4413      	add	r3, r2
 8002596:	330f      	adds	r3, #15
 8002598:	fa04 f303 	lsl.w	r3, r4, r3
 800259c:	ea40 0203 	orr.w	r2, r0, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	430a      	orrs	r2, r1
 80025a6:	639a      	str	r2, [r3, #56]	; 0x38
 80025a8:	e015      	b.n	80025d6 <HAL_ADCEx_InjectedConfigChannel+0xf2>
                                  sConfigInjected->InjectedNbrOfConversion)    );
    }
    else
    {
      /* Clear the old SQx bits for the selected rank */
      MODIFY_REG(hadc->Instance->JSQR                                       ,
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685a      	ldr	r2, [r3, #4]
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	691b      	ldr	r3, [r3, #16]
 80025b8:	1ad2      	subs	r2, r2, r3
 80025ba:	4613      	mov	r3, r2
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	4413      	add	r3, r2
 80025c0:	330f      	adds	r3, #15
 80025c2:	221f      	movs	r2, #31
 80025c4:	fa02 f303 	lsl.w	r3, r2, r3
 80025c8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80025cc:	43da      	mvns	r2, r3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	400a      	ands	r2, r1
 80025d4:	639a      	str	r2, [r3, #56]	; 0x38
  /* Parameters update not conditioned to ADC state:                          */
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  /* Note: In case of ADC already enabled, caution to not launch an unwanted  */
  /*       conversion while modifying register CR2 by writing 1 to bit ADON.  */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	f003 0301 	and.w	r3, r3, #1
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d00c      	beq.n	80025fe <HAL_ADCEx_InjectedConfigChannel+0x11a>
  {    
    MODIFY_REG(hadc->Instance->CR2                                           ,
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025ee:	f023 0301 	bic.w	r3, r3, #1
 80025f2:	683a      	ldr	r2, [r7, #0]
 80025f4:	6991      	ldr	r1, [r2, #24]
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	6812      	ldr	r2, [r2, #0]
 80025fa:	430b      	orrs	r3, r1
 80025fc:	6093      	str	r3, [r2, #8]
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  
    /* Automatic injected conversion can be enabled if injected group         */
    /* external triggers are disabled.                                        */
    if (sConfigInjected->AutoInjectedConv == ENABLE)
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	7d5b      	ldrb	r3, [r3, #21]
 8002602:	2b01      	cmp	r3, #1
 8002604:	d115      	bne.n	8002632 <HAL_ADCEx_InjectedConfigChannel+0x14e>
    {
      if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	699b      	ldr	r3, [r3, #24]
 800260a:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 800260e:	d108      	bne.n	8002622 <HAL_ADCEx_InjectedConfigChannel+0x13e>
      {
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	685a      	ldr	r2, [r3, #4]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800261e:	605a      	str	r2, [r3, #4]
 8002620:	e007      	b.n	8002632 <HAL_ADCEx_InjectedConfigChannel+0x14e>
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002626:	f043 0220 	orr.w	r2, r3, #32
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	629a      	str	r2, [r3, #40]	; 0x28
        
        tmp_hal_status = HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	73fb      	strb	r3, [r7, #15]
      }
    }
    
    /* Injected discontinuous can be enabled only if auto-injected mode is    */
    /* disabled.                                                              */  
    if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	7d1b      	ldrb	r3, [r3, #20]
 8002636:	2b01      	cmp	r3, #1
 8002638:	d114      	bne.n	8002664 <HAL_ADCEx_InjectedConfigChannel+0x180>
    {
      if (sConfigInjected->AutoInjectedConv == DISABLE)
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	7d5b      	ldrb	r3, [r3, #21]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d108      	bne.n	8002654 <HAL_ADCEx_InjectedConfigChannel+0x170>
      {
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JDISCEN);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	685a      	ldr	r2, [r3, #4]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002650:	605a      	str	r2, [r3, #4]
 8002652:	e007      	b.n	8002664 <HAL_ADCEx_InjectedConfigChannel+0x180>
      } 
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002658:	f043 0220 	orr.w	r2, r3, #32
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	629a      	str	r2, [r3, #40]	; 0x28
        
        tmp_hal_status = HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	73fb      	strb	r3, [r7, #15]
    }


  /* InjectedChannel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2b09      	cmp	r3, #9
 800266a:	d91c      	bls.n	80026a6 <HAL_ADCEx_InjectedConfigChannel+0x1c2>
  {
    MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	68d9      	ldr	r1, [r3, #12]
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	4613      	mov	r3, r2
 8002678:	005b      	lsls	r3, r3, #1
 800267a:	4413      	add	r3, r2
 800267c:	3b1e      	subs	r3, #30
 800267e:	2207      	movs	r2, #7
 8002680:	fa02 f303 	lsl.w	r3, r2, r3
 8002684:	43db      	mvns	r3, r3
 8002686:	4019      	ands	r1, r3
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	6898      	ldr	r0, [r3, #8]
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	4613      	mov	r3, r2
 8002692:	005b      	lsls	r3, r3, #1
 8002694:	4413      	add	r3, r2
 8002696:	3b1e      	subs	r3, #30
 8002698:	fa00 f203 	lsl.w	r2, r0, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	430a      	orrs	r2, r1
 80026a2:	60da      	str	r2, [r3, #12]
 80026a4:	e019      	b.n	80026da <HAL_ADCEx_InjectedConfigChannel+0x1f6>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel)                      ,
               ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	6919      	ldr	r1, [r3, #16]
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	4613      	mov	r3, r2
 80026b2:	005b      	lsls	r3, r3, #1
 80026b4:	4413      	add	r3, r2
 80026b6:	2207      	movs	r2, #7
 80026b8:	fa02 f303 	lsl.w	r3, r2, r3
 80026bc:	43db      	mvns	r3, r3
 80026be:	4019      	ands	r1, r3
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	6898      	ldr	r0, [r3, #8]
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	4613      	mov	r3, r2
 80026ca:	005b      	lsls	r3, r3, #1
 80026cc:	4413      	add	r3, r2
 80026ce:	fa00 f203 	lsl.w	r2, r0, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	430a      	orrs	r2, r1
 80026d8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
  }
  
  /* If ADC1 InjectedChannel_16 or InjectedChannel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2b10      	cmp	r3, #16
 80026e0:	d003      	beq.n	80026ea <HAL_ADCEx_InjectedConfigChannel+0x206>
      (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 80026e6:	2b11      	cmp	r3, #17
 80026e8:	d107      	bne.n	80026fa <HAL_ADCEx_InjectedConfigChannel+0x216>
  {
    SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	689a      	ldr	r2, [r3, #8]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80026f8:	609a      	str	r2, [r3, #8]
  }
  
  
  /* Configure the offset: offset enable/disable, InjectedChannel, offset value */
  switch(sConfigInjected->InjectedRank)
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d011      	beq.n	8002726 <HAL_ADCEx_InjectedConfigChannel+0x242>
 8002702:	2b03      	cmp	r3, #3
 8002704:	d01d      	beq.n	8002742 <HAL_ADCEx_InjectedConfigChannel+0x25e>
 8002706:	2b01      	cmp	r3, #1
 8002708:	d129      	bne.n	800275e <HAL_ADCEx_InjectedConfigChannel+0x27a>
  {
    case 1:
      /* Set injected channel 1 offset */
      MODIFY_REG(hadc->Instance->JOFR1,
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	695b      	ldr	r3, [r3, #20]
 8002710:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002714:	f023 030f 	bic.w	r3, r3, #15
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	68d1      	ldr	r1, [r2, #12]
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	6812      	ldr	r2, [r2, #0]
 8002720:	430b      	orrs	r3, r1
 8002722:	6153      	str	r3, [r2, #20]
                 ADC_JOFR1_JOFFSET1,
                 sConfigInjected->InjectedOffset);
      break;
 8002724:	e029      	b.n	800277a <HAL_ADCEx_InjectedConfigChannel+0x296>
    case 2:
      /* Set injected channel 2 offset */
      MODIFY_REG(hadc->Instance->JOFR2,
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	699b      	ldr	r3, [r3, #24]
 800272c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002730:	f023 030f 	bic.w	r3, r3, #15
 8002734:	683a      	ldr	r2, [r7, #0]
 8002736:	68d1      	ldr	r1, [r2, #12]
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	6812      	ldr	r2, [r2, #0]
 800273c:	430b      	orrs	r3, r1
 800273e:	6193      	str	r3, [r2, #24]
                 ADC_JOFR2_JOFFSET2,
                 sConfigInjected->InjectedOffset);
      break;
 8002740:	e01b      	b.n	800277a <HAL_ADCEx_InjectedConfigChannel+0x296>
    case 3:
      /* Set injected channel 3 offset */
      MODIFY_REG(hadc->Instance->JOFR3,
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	69db      	ldr	r3, [r3, #28]
 8002748:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800274c:	f023 030f 	bic.w	r3, r3, #15
 8002750:	683a      	ldr	r2, [r7, #0]
 8002752:	68d1      	ldr	r1, [r2, #12]
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	6812      	ldr	r2, [r2, #0]
 8002758:	430b      	orrs	r3, r1
 800275a:	61d3      	str	r3, [r2, #28]
                 ADC_JOFR3_JOFFSET3,
                 sConfigInjected->InjectedOffset);
      break;
 800275c:	e00d      	b.n	800277a <HAL_ADCEx_InjectedConfigChannel+0x296>
    case 4:
    default:
      MODIFY_REG(hadc->Instance->JOFR4,
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	6a1b      	ldr	r3, [r3, #32]
 8002764:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002768:	f023 030f 	bic.w	r3, r3, #15
 800276c:	683a      	ldr	r2, [r7, #0]
 800276e:	68d1      	ldr	r1, [r2, #12]
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	6812      	ldr	r2, [r2, #0]
 8002774:	430b      	orrs	r3, r1
 8002776:	6213      	str	r3, [r2, #32]
                 ADC_JOFR4_JOFFSET4,
                 sConfigInjected->InjectedOffset);
      break;
 8002778:	bf00      	nop
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2b10      	cmp	r3, #16
 8002780:	d003      	beq.n	800278a <HAL_ADCEx_InjectedConfigChannel+0x2a6>
      (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8002786:	2b11      	cmp	r3, #17
 8002788:	d132      	bne.n	80027f0 <HAL_ADCEx_InjectedConfigChannel+0x30c>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a1d      	ldr	r2, [pc, #116]	; (8002804 <HAL_ADCEx_InjectedConfigChannel+0x320>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d125      	bne.n	80027e0 <HAL_ADCEx_InjectedConfigChannel+0x2fc>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d126      	bne.n	80027f0 <HAL_ADCEx_InjectedConfigChannel+0x30c>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	689a      	ldr	r2, [r3, #8]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80027b0:	609a      	str	r2, [r3, #8]
        
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR))
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2b10      	cmp	r3, #16
 80027b8:	d11a      	bne.n	80027f0 <HAL_ADCEx_InjectedConfigChannel+0x30c>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80027ba:	4b13      	ldr	r3, [pc, #76]	; (8002808 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a13      	ldr	r2, [pc, #76]	; (800280c <HAL_ADCEx_InjectedConfigChannel+0x328>)
 80027c0:	fba2 2303 	umull	r2, r3, r2, r3
 80027c4:	0c9a      	lsrs	r2, r3, #18
 80027c6:	4613      	mov	r3, r2
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	4413      	add	r3, r2
 80027cc:	005b      	lsls	r3, r3, #1
 80027ce:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80027d0:	e002      	b.n	80027d8 <HAL_ADCEx_InjectedConfigChannel+0x2f4>
          {
            wait_loop_index--;
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	3b01      	subs	r3, #1
 80027d6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d1f9      	bne.n	80027d2 <HAL_ADCEx_InjectedConfigChannel+0x2ee>
 80027de:	e007      	b.n	80027f0 <HAL_ADCEx_InjectedConfigChannel+0x30c>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e4:	f043 0220 	orr.w	r2, r3, #32
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80027f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3710      	adds	r7, #16
 80027fe:	46bd      	mov	sp, r7
 8002800:	bc90      	pop	{r4, r7}
 8002802:	4770      	bx	lr
 8002804:	40012400 	.word	0x40012400
 8002808:	20000024 	.word	0x20000024
 800280c:	431bde83 	.word	0x431bde83

08002810 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002810:	b480      	push	{r7}
 8002812:	b085      	sub	sp, #20
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f003 0307 	and.w	r3, r3, #7
 800281e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002820:	4b0c      	ldr	r3, [pc, #48]	; (8002854 <__NVIC_SetPriorityGrouping+0x44>)
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002826:	68ba      	ldr	r2, [r7, #8]
 8002828:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800282c:	4013      	ands	r3, r2
 800282e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002838:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800283c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002840:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002842:	4a04      	ldr	r2, [pc, #16]	; (8002854 <__NVIC_SetPriorityGrouping+0x44>)
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	60d3      	str	r3, [r2, #12]
}
 8002848:	bf00      	nop
 800284a:	3714      	adds	r7, #20
 800284c:	46bd      	mov	sp, r7
 800284e:	bc80      	pop	{r7}
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	e000ed00 	.word	0xe000ed00

08002858 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800285c:	4b04      	ldr	r3, [pc, #16]	; (8002870 <__NVIC_GetPriorityGrouping+0x18>)
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	0a1b      	lsrs	r3, r3, #8
 8002862:	f003 0307 	and.w	r3, r3, #7
}
 8002866:	4618      	mov	r0, r3
 8002868:	46bd      	mov	sp, r7
 800286a:	bc80      	pop	{r7}
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	e000ed00 	.word	0xe000ed00

08002874 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	4603      	mov	r3, r0
 800287c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800287e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002882:	2b00      	cmp	r3, #0
 8002884:	db0b      	blt.n	800289e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002886:	79fb      	ldrb	r3, [r7, #7]
 8002888:	f003 021f 	and.w	r2, r3, #31
 800288c:	4906      	ldr	r1, [pc, #24]	; (80028a8 <__NVIC_EnableIRQ+0x34>)
 800288e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002892:	095b      	lsrs	r3, r3, #5
 8002894:	2001      	movs	r0, #1
 8002896:	fa00 f202 	lsl.w	r2, r0, r2
 800289a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800289e:	bf00      	nop
 80028a0:	370c      	adds	r7, #12
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bc80      	pop	{r7}
 80028a6:	4770      	bx	lr
 80028a8:	e000e100 	.word	0xe000e100

080028ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	4603      	mov	r3, r0
 80028b4:	6039      	str	r1, [r7, #0]
 80028b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	db0a      	blt.n	80028d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	b2da      	uxtb	r2, r3
 80028c4:	490c      	ldr	r1, [pc, #48]	; (80028f8 <__NVIC_SetPriority+0x4c>)
 80028c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ca:	0112      	lsls	r2, r2, #4
 80028cc:	b2d2      	uxtb	r2, r2
 80028ce:	440b      	add	r3, r1
 80028d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028d4:	e00a      	b.n	80028ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	b2da      	uxtb	r2, r3
 80028da:	4908      	ldr	r1, [pc, #32]	; (80028fc <__NVIC_SetPriority+0x50>)
 80028dc:	79fb      	ldrb	r3, [r7, #7]
 80028de:	f003 030f 	and.w	r3, r3, #15
 80028e2:	3b04      	subs	r3, #4
 80028e4:	0112      	lsls	r2, r2, #4
 80028e6:	b2d2      	uxtb	r2, r2
 80028e8:	440b      	add	r3, r1
 80028ea:	761a      	strb	r2, [r3, #24]
}
 80028ec:	bf00      	nop
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bc80      	pop	{r7}
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	e000e100 	.word	0xe000e100
 80028fc:	e000ed00 	.word	0xe000ed00

08002900 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002900:	b480      	push	{r7}
 8002902:	b089      	sub	sp, #36	; 0x24
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f003 0307 	and.w	r3, r3, #7
 8002912:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	f1c3 0307 	rsb	r3, r3, #7
 800291a:	2b04      	cmp	r3, #4
 800291c:	bf28      	it	cs
 800291e:	2304      	movcs	r3, #4
 8002920:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	3304      	adds	r3, #4
 8002926:	2b06      	cmp	r3, #6
 8002928:	d902      	bls.n	8002930 <NVIC_EncodePriority+0x30>
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	3b03      	subs	r3, #3
 800292e:	e000      	b.n	8002932 <NVIC_EncodePriority+0x32>
 8002930:	2300      	movs	r3, #0
 8002932:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002934:	f04f 32ff 	mov.w	r2, #4294967295
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	fa02 f303 	lsl.w	r3, r2, r3
 800293e:	43da      	mvns	r2, r3
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	401a      	ands	r2, r3
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002948:	f04f 31ff 	mov.w	r1, #4294967295
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	fa01 f303 	lsl.w	r3, r1, r3
 8002952:	43d9      	mvns	r1, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002958:	4313      	orrs	r3, r2
         );
}
 800295a:	4618      	mov	r0, r3
 800295c:	3724      	adds	r7, #36	; 0x24
 800295e:	46bd      	mov	sp, r7
 8002960:	bc80      	pop	{r7}
 8002962:	4770      	bx	lr

08002964 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	3b01      	subs	r3, #1
 8002970:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002974:	d301      	bcc.n	800297a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002976:	2301      	movs	r3, #1
 8002978:	e00f      	b.n	800299a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800297a:	4a0a      	ldr	r2, [pc, #40]	; (80029a4 <SysTick_Config+0x40>)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	3b01      	subs	r3, #1
 8002980:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002982:	210f      	movs	r1, #15
 8002984:	f04f 30ff 	mov.w	r0, #4294967295
 8002988:	f7ff ff90 	bl	80028ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800298c:	4b05      	ldr	r3, [pc, #20]	; (80029a4 <SysTick_Config+0x40>)
 800298e:	2200      	movs	r2, #0
 8002990:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002992:	4b04      	ldr	r3, [pc, #16]	; (80029a4 <SysTick_Config+0x40>)
 8002994:	2207      	movs	r2, #7
 8002996:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	3708      	adds	r7, #8
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	e000e010 	.word	0xe000e010

080029a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f7ff ff2d 	bl	8002810 <__NVIC_SetPriorityGrouping>
}
 80029b6:	bf00      	nop
 80029b8:	3708      	adds	r7, #8
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}

080029be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029be:	b580      	push	{r7, lr}
 80029c0:	b086      	sub	sp, #24
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	4603      	mov	r3, r0
 80029c6:	60b9      	str	r1, [r7, #8]
 80029c8:	607a      	str	r2, [r7, #4]
 80029ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029cc:	2300      	movs	r3, #0
 80029ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029d0:	f7ff ff42 	bl	8002858 <__NVIC_GetPriorityGrouping>
 80029d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	68b9      	ldr	r1, [r7, #8]
 80029da:	6978      	ldr	r0, [r7, #20]
 80029dc:	f7ff ff90 	bl	8002900 <NVIC_EncodePriority>
 80029e0:	4602      	mov	r2, r0
 80029e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029e6:	4611      	mov	r1, r2
 80029e8:	4618      	mov	r0, r3
 80029ea:	f7ff ff5f 	bl	80028ac <__NVIC_SetPriority>
}
 80029ee:	bf00      	nop
 80029f0:	3718      	adds	r7, #24
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}

080029f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029f6:	b580      	push	{r7, lr}
 80029f8:	b082      	sub	sp, #8
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	4603      	mov	r3, r0
 80029fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7ff ff35 	bl	8002874 <__NVIC_EnableIRQ>
}
 8002a0a:	bf00      	nop
 8002a0c:	3708      	adds	r7, #8
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}

08002a12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a12:	b580      	push	{r7, lr}
 8002a14:	b082      	sub	sp, #8
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f7ff ffa2 	bl	8002964 <SysTick_Config>
 8002a20:	4603      	mov	r3, r0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3708      	adds	r7, #8
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
	...

08002a2c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b08b      	sub	sp, #44	; 0x2c
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a36:	2300      	movs	r3, #0
 8002a38:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a3e:	e127      	b.n	8002c90 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002a40:	2201      	movs	r2, #1
 8002a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a44:	fa02 f303 	lsl.w	r3, r2, r3
 8002a48:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	69fa      	ldr	r2, [r7, #28]
 8002a50:	4013      	ands	r3, r2
 8002a52:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	f040 8116 	bne.w	8002c8a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	2b12      	cmp	r3, #18
 8002a64:	d034      	beq.n	8002ad0 <HAL_GPIO_Init+0xa4>
 8002a66:	2b12      	cmp	r3, #18
 8002a68:	d80d      	bhi.n	8002a86 <HAL_GPIO_Init+0x5a>
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d02b      	beq.n	8002ac6 <HAL_GPIO_Init+0x9a>
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d804      	bhi.n	8002a7c <HAL_GPIO_Init+0x50>
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d031      	beq.n	8002ada <HAL_GPIO_Init+0xae>
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d01c      	beq.n	8002ab4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002a7a:	e048      	b.n	8002b0e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002a7c:	2b03      	cmp	r3, #3
 8002a7e:	d043      	beq.n	8002b08 <HAL_GPIO_Init+0xdc>
 8002a80:	2b11      	cmp	r3, #17
 8002a82:	d01b      	beq.n	8002abc <HAL_GPIO_Init+0x90>
          break;
 8002a84:	e043      	b.n	8002b0e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002a86:	4a89      	ldr	r2, [pc, #548]	; (8002cac <HAL_GPIO_Init+0x280>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d026      	beq.n	8002ada <HAL_GPIO_Init+0xae>
 8002a8c:	4a87      	ldr	r2, [pc, #540]	; (8002cac <HAL_GPIO_Init+0x280>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d806      	bhi.n	8002aa0 <HAL_GPIO_Init+0x74>
 8002a92:	4a87      	ldr	r2, [pc, #540]	; (8002cb0 <HAL_GPIO_Init+0x284>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d020      	beq.n	8002ada <HAL_GPIO_Init+0xae>
 8002a98:	4a86      	ldr	r2, [pc, #536]	; (8002cb4 <HAL_GPIO_Init+0x288>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d01d      	beq.n	8002ada <HAL_GPIO_Init+0xae>
          break;
 8002a9e:	e036      	b.n	8002b0e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002aa0:	4a85      	ldr	r2, [pc, #532]	; (8002cb8 <HAL_GPIO_Init+0x28c>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d019      	beq.n	8002ada <HAL_GPIO_Init+0xae>
 8002aa6:	4a85      	ldr	r2, [pc, #532]	; (8002cbc <HAL_GPIO_Init+0x290>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d016      	beq.n	8002ada <HAL_GPIO_Init+0xae>
 8002aac:	4a84      	ldr	r2, [pc, #528]	; (8002cc0 <HAL_GPIO_Init+0x294>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d013      	beq.n	8002ada <HAL_GPIO_Init+0xae>
          break;
 8002ab2:	e02c      	b.n	8002b0e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	623b      	str	r3, [r7, #32]
          break;
 8002aba:	e028      	b.n	8002b0e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	3304      	adds	r3, #4
 8002ac2:	623b      	str	r3, [r7, #32]
          break;
 8002ac4:	e023      	b.n	8002b0e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	3308      	adds	r3, #8
 8002acc:	623b      	str	r3, [r7, #32]
          break;
 8002ace:	e01e      	b.n	8002b0e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	330c      	adds	r3, #12
 8002ad6:	623b      	str	r3, [r7, #32]
          break;
 8002ad8:	e019      	b.n	8002b0e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d102      	bne.n	8002ae8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002ae2:	2304      	movs	r3, #4
 8002ae4:	623b      	str	r3, [r7, #32]
          break;
 8002ae6:	e012      	b.n	8002b0e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d105      	bne.n	8002afc <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002af0:	2308      	movs	r3, #8
 8002af2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	69fa      	ldr	r2, [r7, #28]
 8002af8:	611a      	str	r2, [r3, #16]
          break;
 8002afa:	e008      	b.n	8002b0e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002afc:	2308      	movs	r3, #8
 8002afe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	69fa      	ldr	r2, [r7, #28]
 8002b04:	615a      	str	r2, [r3, #20]
          break;
 8002b06:	e002      	b.n	8002b0e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	623b      	str	r3, [r7, #32]
          break;
 8002b0c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	2bff      	cmp	r3, #255	; 0xff
 8002b12:	d801      	bhi.n	8002b18 <HAL_GPIO_Init+0xec>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	e001      	b.n	8002b1c <HAL_GPIO_Init+0xf0>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	3304      	adds	r3, #4
 8002b1c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	2bff      	cmp	r3, #255	; 0xff
 8002b22:	d802      	bhi.n	8002b2a <HAL_GPIO_Init+0xfe>
 8002b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	e002      	b.n	8002b30 <HAL_GPIO_Init+0x104>
 8002b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2c:	3b08      	subs	r3, #8
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	210f      	movs	r1, #15
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b3e:	43db      	mvns	r3, r3
 8002b40:	401a      	ands	r2, r3
 8002b42:	6a39      	ldr	r1, [r7, #32]
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	fa01 f303 	lsl.w	r3, r1, r3
 8002b4a:	431a      	orrs	r2, r3
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	f000 8096 	beq.w	8002c8a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002b5e:	4b59      	ldr	r3, [pc, #356]	; (8002cc4 <HAL_GPIO_Init+0x298>)
 8002b60:	699b      	ldr	r3, [r3, #24]
 8002b62:	4a58      	ldr	r2, [pc, #352]	; (8002cc4 <HAL_GPIO_Init+0x298>)
 8002b64:	f043 0301 	orr.w	r3, r3, #1
 8002b68:	6193      	str	r3, [r2, #24]
 8002b6a:	4b56      	ldr	r3, [pc, #344]	; (8002cc4 <HAL_GPIO_Init+0x298>)
 8002b6c:	699b      	ldr	r3, [r3, #24]
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	60bb      	str	r3, [r7, #8]
 8002b74:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002b76:	4a54      	ldr	r2, [pc, #336]	; (8002cc8 <HAL_GPIO_Init+0x29c>)
 8002b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7a:	089b      	lsrs	r3, r3, #2
 8002b7c:	3302      	adds	r3, #2
 8002b7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b82:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b86:	f003 0303 	and.w	r3, r3, #3
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	220f      	movs	r2, #15
 8002b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b92:	43db      	mvns	r3, r3
 8002b94:	68fa      	ldr	r2, [r7, #12]
 8002b96:	4013      	ands	r3, r2
 8002b98:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a4b      	ldr	r2, [pc, #300]	; (8002ccc <HAL_GPIO_Init+0x2a0>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d013      	beq.n	8002bca <HAL_GPIO_Init+0x19e>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4a4a      	ldr	r2, [pc, #296]	; (8002cd0 <HAL_GPIO_Init+0x2a4>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d00d      	beq.n	8002bc6 <HAL_GPIO_Init+0x19a>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a49      	ldr	r2, [pc, #292]	; (8002cd4 <HAL_GPIO_Init+0x2a8>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d007      	beq.n	8002bc2 <HAL_GPIO_Init+0x196>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a48      	ldr	r2, [pc, #288]	; (8002cd8 <HAL_GPIO_Init+0x2ac>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d101      	bne.n	8002bbe <HAL_GPIO_Init+0x192>
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e006      	b.n	8002bcc <HAL_GPIO_Init+0x1a0>
 8002bbe:	2304      	movs	r3, #4
 8002bc0:	e004      	b.n	8002bcc <HAL_GPIO_Init+0x1a0>
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	e002      	b.n	8002bcc <HAL_GPIO_Init+0x1a0>
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e000      	b.n	8002bcc <HAL_GPIO_Init+0x1a0>
 8002bca:	2300      	movs	r3, #0
 8002bcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bce:	f002 0203 	and.w	r2, r2, #3
 8002bd2:	0092      	lsls	r2, r2, #2
 8002bd4:	4093      	lsls	r3, r2
 8002bd6:	68fa      	ldr	r2, [r7, #12]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002bdc:	493a      	ldr	r1, [pc, #232]	; (8002cc8 <HAL_GPIO_Init+0x29c>)
 8002bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be0:	089b      	lsrs	r3, r3, #2
 8002be2:	3302      	adds	r3, #2
 8002be4:	68fa      	ldr	r2, [r7, #12]
 8002be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d006      	beq.n	8002c04 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002bf6:	4b39      	ldr	r3, [pc, #228]	; (8002cdc <HAL_GPIO_Init+0x2b0>)
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	4938      	ldr	r1, [pc, #224]	; (8002cdc <HAL_GPIO_Init+0x2b0>)
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	600b      	str	r3, [r1, #0]
 8002c02:	e006      	b.n	8002c12 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002c04:	4b35      	ldr	r3, [pc, #212]	; (8002cdc <HAL_GPIO_Init+0x2b0>)
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	43db      	mvns	r3, r3
 8002c0c:	4933      	ldr	r1, [pc, #204]	; (8002cdc <HAL_GPIO_Init+0x2b0>)
 8002c0e:	4013      	ands	r3, r2
 8002c10:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d006      	beq.n	8002c2c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002c1e:	4b2f      	ldr	r3, [pc, #188]	; (8002cdc <HAL_GPIO_Init+0x2b0>)
 8002c20:	685a      	ldr	r2, [r3, #4]
 8002c22:	492e      	ldr	r1, [pc, #184]	; (8002cdc <HAL_GPIO_Init+0x2b0>)
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	604b      	str	r3, [r1, #4]
 8002c2a:	e006      	b.n	8002c3a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002c2c:	4b2b      	ldr	r3, [pc, #172]	; (8002cdc <HAL_GPIO_Init+0x2b0>)
 8002c2e:	685a      	ldr	r2, [r3, #4]
 8002c30:	69bb      	ldr	r3, [r7, #24]
 8002c32:	43db      	mvns	r3, r3
 8002c34:	4929      	ldr	r1, [pc, #164]	; (8002cdc <HAL_GPIO_Init+0x2b0>)
 8002c36:	4013      	ands	r3, r2
 8002c38:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d006      	beq.n	8002c54 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002c46:	4b25      	ldr	r3, [pc, #148]	; (8002cdc <HAL_GPIO_Init+0x2b0>)
 8002c48:	689a      	ldr	r2, [r3, #8]
 8002c4a:	4924      	ldr	r1, [pc, #144]	; (8002cdc <HAL_GPIO_Init+0x2b0>)
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	608b      	str	r3, [r1, #8]
 8002c52:	e006      	b.n	8002c62 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002c54:	4b21      	ldr	r3, [pc, #132]	; (8002cdc <HAL_GPIO_Init+0x2b0>)
 8002c56:	689a      	ldr	r2, [r3, #8]
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	43db      	mvns	r3, r3
 8002c5c:	491f      	ldr	r1, [pc, #124]	; (8002cdc <HAL_GPIO_Init+0x2b0>)
 8002c5e:	4013      	ands	r3, r2
 8002c60:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d006      	beq.n	8002c7c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002c6e:	4b1b      	ldr	r3, [pc, #108]	; (8002cdc <HAL_GPIO_Init+0x2b0>)
 8002c70:	68da      	ldr	r2, [r3, #12]
 8002c72:	491a      	ldr	r1, [pc, #104]	; (8002cdc <HAL_GPIO_Init+0x2b0>)
 8002c74:	69bb      	ldr	r3, [r7, #24]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	60cb      	str	r3, [r1, #12]
 8002c7a:	e006      	b.n	8002c8a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002c7c:	4b17      	ldr	r3, [pc, #92]	; (8002cdc <HAL_GPIO_Init+0x2b0>)
 8002c7e:	68da      	ldr	r2, [r3, #12]
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	43db      	mvns	r3, r3
 8002c84:	4915      	ldr	r1, [pc, #84]	; (8002cdc <HAL_GPIO_Init+0x2b0>)
 8002c86:	4013      	ands	r3, r2
 8002c88:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c96:	fa22 f303 	lsr.w	r3, r2, r3
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	f47f aed0 	bne.w	8002a40 <HAL_GPIO_Init+0x14>
  }
}
 8002ca0:	bf00      	nop
 8002ca2:	372c      	adds	r7, #44	; 0x2c
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bc80      	pop	{r7}
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	10210000 	.word	0x10210000
 8002cb0:	10110000 	.word	0x10110000
 8002cb4:	10120000 	.word	0x10120000
 8002cb8:	10310000 	.word	0x10310000
 8002cbc:	10320000 	.word	0x10320000
 8002cc0:	10220000 	.word	0x10220000
 8002cc4:	40021000 	.word	0x40021000
 8002cc8:	40010000 	.word	0x40010000
 8002ccc:	40010800 	.word	0x40010800
 8002cd0:	40010c00 	.word	0x40010c00
 8002cd4:	40011000 	.word	0x40011000
 8002cd8:	40011400 	.word	0x40011400
 8002cdc:	40010400 	.word	0x40010400

08002ce0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	460b      	mov	r3, r1
 8002cea:	807b      	strh	r3, [r7, #2]
 8002cec:	4613      	mov	r3, r2
 8002cee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002cf0:	787b      	ldrb	r3, [r7, #1]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d003      	beq.n	8002cfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cf6:	887a      	ldrh	r2, [r7, #2]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002cfc:	e003      	b.n	8002d06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002cfe:	887b      	ldrh	r3, [r7, #2]
 8002d00:	041a      	lsls	r2, r3, #16
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	611a      	str	r2, [r3, #16]
}
 8002d06:	bf00      	nop
 8002d08:	370c      	adds	r7, #12
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bc80      	pop	{r7}
 8002d0e:	4770      	bx	lr

08002d10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d101      	bne.n	8002d22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e11f      	b.n	8002f62 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d106      	bne.n	8002d3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f7fe ff3a 	bl	8001bb0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2224      	movs	r2, #36	; 0x24
 8002d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f022 0201 	bic.w	r2, r2, #1
 8002d52:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d62:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d72:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d74:	f000 fcda 	bl	800372c <HAL_RCC_GetPCLK1Freq>
 8002d78:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	4a7b      	ldr	r2, [pc, #492]	; (8002f6c <HAL_I2C_Init+0x25c>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d807      	bhi.n	8002d94 <HAL_I2C_Init+0x84>
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	4a7a      	ldr	r2, [pc, #488]	; (8002f70 <HAL_I2C_Init+0x260>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	bf94      	ite	ls
 8002d8c:	2301      	movls	r3, #1
 8002d8e:	2300      	movhi	r3, #0
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	e006      	b.n	8002da2 <HAL_I2C_Init+0x92>
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	4a77      	ldr	r2, [pc, #476]	; (8002f74 <HAL_I2C_Init+0x264>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	bf94      	ite	ls
 8002d9c:	2301      	movls	r3, #1
 8002d9e:	2300      	movhi	r3, #0
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d001      	beq.n	8002daa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e0db      	b.n	8002f62 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	4a72      	ldr	r2, [pc, #456]	; (8002f78 <HAL_I2C_Init+0x268>)
 8002dae:	fba2 2303 	umull	r2, r3, r2, r3
 8002db2:	0c9b      	lsrs	r3, r3, #18
 8002db4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	68ba      	ldr	r2, [r7, #8]
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	6a1b      	ldr	r3, [r3, #32]
 8002dd0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	4a64      	ldr	r2, [pc, #400]	; (8002f6c <HAL_I2C_Init+0x25c>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d802      	bhi.n	8002de4 <HAL_I2C_Init+0xd4>
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	3301      	adds	r3, #1
 8002de2:	e009      	b.n	8002df8 <HAL_I2C_Init+0xe8>
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002dea:	fb02 f303 	mul.w	r3, r2, r3
 8002dee:	4a63      	ldr	r2, [pc, #396]	; (8002f7c <HAL_I2C_Init+0x26c>)
 8002df0:	fba2 2303 	umull	r2, r3, r2, r3
 8002df4:	099b      	lsrs	r3, r3, #6
 8002df6:	3301      	adds	r3, #1
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	6812      	ldr	r2, [r2, #0]
 8002dfc:	430b      	orrs	r3, r1
 8002dfe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	69db      	ldr	r3, [r3, #28]
 8002e06:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e0a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	4956      	ldr	r1, [pc, #344]	; (8002f6c <HAL_I2C_Init+0x25c>)
 8002e14:	428b      	cmp	r3, r1
 8002e16:	d80d      	bhi.n	8002e34 <HAL_I2C_Init+0x124>
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	1e59      	subs	r1, r3, #1
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	005b      	lsls	r3, r3, #1
 8002e22:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e26:	3301      	adds	r3, #1
 8002e28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e2c:	2b04      	cmp	r3, #4
 8002e2e:	bf38      	it	cc
 8002e30:	2304      	movcc	r3, #4
 8002e32:	e04f      	b.n	8002ed4 <HAL_I2C_Init+0x1c4>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d111      	bne.n	8002e60 <HAL_I2C_Init+0x150>
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	1e58      	subs	r0, r3, #1
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6859      	ldr	r1, [r3, #4]
 8002e44:	460b      	mov	r3, r1
 8002e46:	005b      	lsls	r3, r3, #1
 8002e48:	440b      	add	r3, r1
 8002e4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e4e:	3301      	adds	r3, #1
 8002e50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	bf0c      	ite	eq
 8002e58:	2301      	moveq	r3, #1
 8002e5a:	2300      	movne	r3, #0
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	e012      	b.n	8002e86 <HAL_I2C_Init+0x176>
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	1e58      	subs	r0, r3, #1
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6859      	ldr	r1, [r3, #4]
 8002e68:	460b      	mov	r3, r1
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	440b      	add	r3, r1
 8002e6e:	0099      	lsls	r1, r3, #2
 8002e70:	440b      	add	r3, r1
 8002e72:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e76:	3301      	adds	r3, #1
 8002e78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	bf0c      	ite	eq
 8002e80:	2301      	moveq	r3, #1
 8002e82:	2300      	movne	r3, #0
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d001      	beq.n	8002e8e <HAL_I2C_Init+0x17e>
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e022      	b.n	8002ed4 <HAL_I2C_Init+0x1c4>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d10e      	bne.n	8002eb4 <HAL_I2C_Init+0x1a4>
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	1e58      	subs	r0, r3, #1
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6859      	ldr	r1, [r3, #4]
 8002e9e:	460b      	mov	r3, r1
 8002ea0:	005b      	lsls	r3, r3, #1
 8002ea2:	440b      	add	r3, r1
 8002ea4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ea8:	3301      	adds	r3, #1
 8002eaa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002eb2:	e00f      	b.n	8002ed4 <HAL_I2C_Init+0x1c4>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	1e58      	subs	r0, r3, #1
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6859      	ldr	r1, [r3, #4]
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	440b      	add	r3, r1
 8002ec2:	0099      	lsls	r1, r3, #2
 8002ec4:	440b      	add	r3, r1
 8002ec6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eca:	3301      	adds	r3, #1
 8002ecc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ed0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ed4:	6879      	ldr	r1, [r7, #4]
 8002ed6:	6809      	ldr	r1, [r1, #0]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	69da      	ldr	r2, [r3, #28]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a1b      	ldr	r3, [r3, #32]
 8002eee:	431a      	orrs	r2, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	430a      	orrs	r2, r1
 8002ef6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f02:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	6911      	ldr	r1, [r2, #16]
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	68d2      	ldr	r2, [r2, #12]
 8002f0e:	4311      	orrs	r1, r2
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	6812      	ldr	r2, [r2, #0]
 8002f14:	430b      	orrs	r3, r1
 8002f16:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	695a      	ldr	r2, [r3, #20]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	699b      	ldr	r3, [r3, #24]
 8002f2a:	431a      	orrs	r2, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	430a      	orrs	r2, r1
 8002f32:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f042 0201 	orr.w	r2, r2, #1
 8002f42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2220      	movs	r2, #32
 8002f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3710      	adds	r7, #16
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	000186a0 	.word	0x000186a0
 8002f70:	001e847f 	.word	0x001e847f
 8002f74:	003d08ff 	.word	0x003d08ff
 8002f78:	431bde83 	.word	0x431bde83
 8002f7c:	10624dd3 	.word	0x10624dd3

08002f80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b086      	sub	sp, #24
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d101      	bne.n	8002f92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e26c      	b.n	800346c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0301 	and.w	r3, r3, #1
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	f000 8087 	beq.w	80030ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002fa0:	4b92      	ldr	r3, [pc, #584]	; (80031ec <HAL_RCC_OscConfig+0x26c>)
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f003 030c 	and.w	r3, r3, #12
 8002fa8:	2b04      	cmp	r3, #4
 8002faa:	d00c      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002fac:	4b8f      	ldr	r3, [pc, #572]	; (80031ec <HAL_RCC_OscConfig+0x26c>)
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f003 030c 	and.w	r3, r3, #12
 8002fb4:	2b08      	cmp	r3, #8
 8002fb6:	d112      	bne.n	8002fde <HAL_RCC_OscConfig+0x5e>
 8002fb8:	4b8c      	ldr	r3, [pc, #560]	; (80031ec <HAL_RCC_OscConfig+0x26c>)
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fc4:	d10b      	bne.n	8002fde <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fc6:	4b89      	ldr	r3, [pc, #548]	; (80031ec <HAL_RCC_OscConfig+0x26c>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d06c      	beq.n	80030ac <HAL_RCC_OscConfig+0x12c>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d168      	bne.n	80030ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e246      	b.n	800346c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fe6:	d106      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x76>
 8002fe8:	4b80      	ldr	r3, [pc, #512]	; (80031ec <HAL_RCC_OscConfig+0x26c>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a7f      	ldr	r2, [pc, #508]	; (80031ec <HAL_RCC_OscConfig+0x26c>)
 8002fee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ff2:	6013      	str	r3, [r2, #0]
 8002ff4:	e02e      	b.n	8003054 <HAL_RCC_OscConfig+0xd4>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d10c      	bne.n	8003018 <HAL_RCC_OscConfig+0x98>
 8002ffe:	4b7b      	ldr	r3, [pc, #492]	; (80031ec <HAL_RCC_OscConfig+0x26c>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a7a      	ldr	r2, [pc, #488]	; (80031ec <HAL_RCC_OscConfig+0x26c>)
 8003004:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003008:	6013      	str	r3, [r2, #0]
 800300a:	4b78      	ldr	r3, [pc, #480]	; (80031ec <HAL_RCC_OscConfig+0x26c>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a77      	ldr	r2, [pc, #476]	; (80031ec <HAL_RCC_OscConfig+0x26c>)
 8003010:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003014:	6013      	str	r3, [r2, #0]
 8003016:	e01d      	b.n	8003054 <HAL_RCC_OscConfig+0xd4>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003020:	d10c      	bne.n	800303c <HAL_RCC_OscConfig+0xbc>
 8003022:	4b72      	ldr	r3, [pc, #456]	; (80031ec <HAL_RCC_OscConfig+0x26c>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a71      	ldr	r2, [pc, #452]	; (80031ec <HAL_RCC_OscConfig+0x26c>)
 8003028:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800302c:	6013      	str	r3, [r2, #0]
 800302e:	4b6f      	ldr	r3, [pc, #444]	; (80031ec <HAL_RCC_OscConfig+0x26c>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a6e      	ldr	r2, [pc, #440]	; (80031ec <HAL_RCC_OscConfig+0x26c>)
 8003034:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003038:	6013      	str	r3, [r2, #0]
 800303a:	e00b      	b.n	8003054 <HAL_RCC_OscConfig+0xd4>
 800303c:	4b6b      	ldr	r3, [pc, #428]	; (80031ec <HAL_RCC_OscConfig+0x26c>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a6a      	ldr	r2, [pc, #424]	; (80031ec <HAL_RCC_OscConfig+0x26c>)
 8003042:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003046:	6013      	str	r3, [r2, #0]
 8003048:	4b68      	ldr	r3, [pc, #416]	; (80031ec <HAL_RCC_OscConfig+0x26c>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a67      	ldr	r2, [pc, #412]	; (80031ec <HAL_RCC_OscConfig+0x26c>)
 800304e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003052:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d013      	beq.n	8003084 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800305c:	f7fe ff70 	bl	8001f40 <HAL_GetTick>
 8003060:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003062:	e008      	b.n	8003076 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003064:	f7fe ff6c 	bl	8001f40 <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	2b64      	cmp	r3, #100	; 0x64
 8003070:	d901      	bls.n	8003076 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e1fa      	b.n	800346c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003076:	4b5d      	ldr	r3, [pc, #372]	; (80031ec <HAL_RCC_OscConfig+0x26c>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d0f0      	beq.n	8003064 <HAL_RCC_OscConfig+0xe4>
 8003082:	e014      	b.n	80030ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003084:	f7fe ff5c 	bl	8001f40 <HAL_GetTick>
 8003088:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800308a:	e008      	b.n	800309e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800308c:	f7fe ff58 	bl	8001f40 <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	2b64      	cmp	r3, #100	; 0x64
 8003098:	d901      	bls.n	800309e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e1e6      	b.n	800346c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800309e:	4b53      	ldr	r3, [pc, #332]	; (80031ec <HAL_RCC_OscConfig+0x26c>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1f0      	bne.n	800308c <HAL_RCC_OscConfig+0x10c>
 80030aa:	e000      	b.n	80030ae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0302 	and.w	r3, r3, #2
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d063      	beq.n	8003182 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80030ba:	4b4c      	ldr	r3, [pc, #304]	; (80031ec <HAL_RCC_OscConfig+0x26c>)
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f003 030c 	and.w	r3, r3, #12
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d00b      	beq.n	80030de <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80030c6:	4b49      	ldr	r3, [pc, #292]	; (80031ec <HAL_RCC_OscConfig+0x26c>)
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	f003 030c 	and.w	r3, r3, #12
 80030ce:	2b08      	cmp	r3, #8
 80030d0:	d11c      	bne.n	800310c <HAL_RCC_OscConfig+0x18c>
 80030d2:	4b46      	ldr	r3, [pc, #280]	; (80031ec <HAL_RCC_OscConfig+0x26c>)
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d116      	bne.n	800310c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030de:	4b43      	ldr	r3, [pc, #268]	; (80031ec <HAL_RCC_OscConfig+0x26c>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0302 	and.w	r3, r3, #2
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d005      	beq.n	80030f6 <HAL_RCC_OscConfig+0x176>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	691b      	ldr	r3, [r3, #16]
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d001      	beq.n	80030f6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e1ba      	b.n	800346c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030f6:	4b3d      	ldr	r3, [pc, #244]	; (80031ec <HAL_RCC_OscConfig+0x26c>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	695b      	ldr	r3, [r3, #20]
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	4939      	ldr	r1, [pc, #228]	; (80031ec <HAL_RCC_OscConfig+0x26c>)
 8003106:	4313      	orrs	r3, r2
 8003108:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800310a:	e03a      	b.n	8003182 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	691b      	ldr	r3, [r3, #16]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d020      	beq.n	8003156 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003114:	4b36      	ldr	r3, [pc, #216]	; (80031f0 <HAL_RCC_OscConfig+0x270>)
 8003116:	2201      	movs	r2, #1
 8003118:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800311a:	f7fe ff11 	bl	8001f40 <HAL_GetTick>
 800311e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003120:	e008      	b.n	8003134 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003122:	f7fe ff0d 	bl	8001f40 <HAL_GetTick>
 8003126:	4602      	mov	r2, r0
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	2b02      	cmp	r3, #2
 800312e:	d901      	bls.n	8003134 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003130:	2303      	movs	r3, #3
 8003132:	e19b      	b.n	800346c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003134:	4b2d      	ldr	r3, [pc, #180]	; (80031ec <HAL_RCC_OscConfig+0x26c>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0302 	and.w	r3, r3, #2
 800313c:	2b00      	cmp	r3, #0
 800313e:	d0f0      	beq.n	8003122 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003140:	4b2a      	ldr	r3, [pc, #168]	; (80031ec <HAL_RCC_OscConfig+0x26c>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	695b      	ldr	r3, [r3, #20]
 800314c:	00db      	lsls	r3, r3, #3
 800314e:	4927      	ldr	r1, [pc, #156]	; (80031ec <HAL_RCC_OscConfig+0x26c>)
 8003150:	4313      	orrs	r3, r2
 8003152:	600b      	str	r3, [r1, #0]
 8003154:	e015      	b.n	8003182 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003156:	4b26      	ldr	r3, [pc, #152]	; (80031f0 <HAL_RCC_OscConfig+0x270>)
 8003158:	2200      	movs	r2, #0
 800315a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800315c:	f7fe fef0 	bl	8001f40 <HAL_GetTick>
 8003160:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003162:	e008      	b.n	8003176 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003164:	f7fe feec 	bl	8001f40 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b02      	cmp	r3, #2
 8003170:	d901      	bls.n	8003176 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e17a      	b.n	800346c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003176:	4b1d      	ldr	r3, [pc, #116]	; (80031ec <HAL_RCC_OscConfig+0x26c>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0302 	and.w	r3, r3, #2
 800317e:	2b00      	cmp	r3, #0
 8003180:	d1f0      	bne.n	8003164 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0308 	and.w	r3, r3, #8
 800318a:	2b00      	cmp	r3, #0
 800318c:	d03a      	beq.n	8003204 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d019      	beq.n	80031ca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003196:	4b17      	ldr	r3, [pc, #92]	; (80031f4 <HAL_RCC_OscConfig+0x274>)
 8003198:	2201      	movs	r2, #1
 800319a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800319c:	f7fe fed0 	bl	8001f40 <HAL_GetTick>
 80031a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031a2:	e008      	b.n	80031b6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031a4:	f7fe fecc 	bl	8001f40 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d901      	bls.n	80031b6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e15a      	b.n	800346c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031b6:	4b0d      	ldr	r3, [pc, #52]	; (80031ec <HAL_RCC_OscConfig+0x26c>)
 80031b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ba:	f003 0302 	and.w	r3, r3, #2
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d0f0      	beq.n	80031a4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80031c2:	2001      	movs	r0, #1
 80031c4:	f000 fac6 	bl	8003754 <RCC_Delay>
 80031c8:	e01c      	b.n	8003204 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031ca:	4b0a      	ldr	r3, [pc, #40]	; (80031f4 <HAL_RCC_OscConfig+0x274>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031d0:	f7fe feb6 	bl	8001f40 <HAL_GetTick>
 80031d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031d6:	e00f      	b.n	80031f8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031d8:	f7fe feb2 	bl	8001f40 <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d908      	bls.n	80031f8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e140      	b.n	800346c <HAL_RCC_OscConfig+0x4ec>
 80031ea:	bf00      	nop
 80031ec:	40021000 	.word	0x40021000
 80031f0:	42420000 	.word	0x42420000
 80031f4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031f8:	4b9e      	ldr	r3, [pc, #632]	; (8003474 <HAL_RCC_OscConfig+0x4f4>)
 80031fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fc:	f003 0302 	and.w	r3, r3, #2
 8003200:	2b00      	cmp	r3, #0
 8003202:	d1e9      	bne.n	80031d8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0304 	and.w	r3, r3, #4
 800320c:	2b00      	cmp	r3, #0
 800320e:	f000 80a6 	beq.w	800335e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003212:	2300      	movs	r3, #0
 8003214:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003216:	4b97      	ldr	r3, [pc, #604]	; (8003474 <HAL_RCC_OscConfig+0x4f4>)
 8003218:	69db      	ldr	r3, [r3, #28]
 800321a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d10d      	bne.n	800323e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003222:	4b94      	ldr	r3, [pc, #592]	; (8003474 <HAL_RCC_OscConfig+0x4f4>)
 8003224:	69db      	ldr	r3, [r3, #28]
 8003226:	4a93      	ldr	r2, [pc, #588]	; (8003474 <HAL_RCC_OscConfig+0x4f4>)
 8003228:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800322c:	61d3      	str	r3, [r2, #28]
 800322e:	4b91      	ldr	r3, [pc, #580]	; (8003474 <HAL_RCC_OscConfig+0x4f4>)
 8003230:	69db      	ldr	r3, [r3, #28]
 8003232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003236:	60bb      	str	r3, [r7, #8]
 8003238:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800323a:	2301      	movs	r3, #1
 800323c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800323e:	4b8e      	ldr	r3, [pc, #568]	; (8003478 <HAL_RCC_OscConfig+0x4f8>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003246:	2b00      	cmp	r3, #0
 8003248:	d118      	bne.n	800327c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800324a:	4b8b      	ldr	r3, [pc, #556]	; (8003478 <HAL_RCC_OscConfig+0x4f8>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a8a      	ldr	r2, [pc, #552]	; (8003478 <HAL_RCC_OscConfig+0x4f8>)
 8003250:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003254:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003256:	f7fe fe73 	bl	8001f40 <HAL_GetTick>
 800325a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800325c:	e008      	b.n	8003270 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800325e:	f7fe fe6f 	bl	8001f40 <HAL_GetTick>
 8003262:	4602      	mov	r2, r0
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	2b64      	cmp	r3, #100	; 0x64
 800326a:	d901      	bls.n	8003270 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800326c:	2303      	movs	r3, #3
 800326e:	e0fd      	b.n	800346c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003270:	4b81      	ldr	r3, [pc, #516]	; (8003478 <HAL_RCC_OscConfig+0x4f8>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003278:	2b00      	cmp	r3, #0
 800327a:	d0f0      	beq.n	800325e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	2b01      	cmp	r3, #1
 8003282:	d106      	bne.n	8003292 <HAL_RCC_OscConfig+0x312>
 8003284:	4b7b      	ldr	r3, [pc, #492]	; (8003474 <HAL_RCC_OscConfig+0x4f4>)
 8003286:	6a1b      	ldr	r3, [r3, #32]
 8003288:	4a7a      	ldr	r2, [pc, #488]	; (8003474 <HAL_RCC_OscConfig+0x4f4>)
 800328a:	f043 0301 	orr.w	r3, r3, #1
 800328e:	6213      	str	r3, [r2, #32]
 8003290:	e02d      	b.n	80032ee <HAL_RCC_OscConfig+0x36e>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d10c      	bne.n	80032b4 <HAL_RCC_OscConfig+0x334>
 800329a:	4b76      	ldr	r3, [pc, #472]	; (8003474 <HAL_RCC_OscConfig+0x4f4>)
 800329c:	6a1b      	ldr	r3, [r3, #32]
 800329e:	4a75      	ldr	r2, [pc, #468]	; (8003474 <HAL_RCC_OscConfig+0x4f4>)
 80032a0:	f023 0301 	bic.w	r3, r3, #1
 80032a4:	6213      	str	r3, [r2, #32]
 80032a6:	4b73      	ldr	r3, [pc, #460]	; (8003474 <HAL_RCC_OscConfig+0x4f4>)
 80032a8:	6a1b      	ldr	r3, [r3, #32]
 80032aa:	4a72      	ldr	r2, [pc, #456]	; (8003474 <HAL_RCC_OscConfig+0x4f4>)
 80032ac:	f023 0304 	bic.w	r3, r3, #4
 80032b0:	6213      	str	r3, [r2, #32]
 80032b2:	e01c      	b.n	80032ee <HAL_RCC_OscConfig+0x36e>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	2b05      	cmp	r3, #5
 80032ba:	d10c      	bne.n	80032d6 <HAL_RCC_OscConfig+0x356>
 80032bc:	4b6d      	ldr	r3, [pc, #436]	; (8003474 <HAL_RCC_OscConfig+0x4f4>)
 80032be:	6a1b      	ldr	r3, [r3, #32]
 80032c0:	4a6c      	ldr	r2, [pc, #432]	; (8003474 <HAL_RCC_OscConfig+0x4f4>)
 80032c2:	f043 0304 	orr.w	r3, r3, #4
 80032c6:	6213      	str	r3, [r2, #32]
 80032c8:	4b6a      	ldr	r3, [pc, #424]	; (8003474 <HAL_RCC_OscConfig+0x4f4>)
 80032ca:	6a1b      	ldr	r3, [r3, #32]
 80032cc:	4a69      	ldr	r2, [pc, #420]	; (8003474 <HAL_RCC_OscConfig+0x4f4>)
 80032ce:	f043 0301 	orr.w	r3, r3, #1
 80032d2:	6213      	str	r3, [r2, #32]
 80032d4:	e00b      	b.n	80032ee <HAL_RCC_OscConfig+0x36e>
 80032d6:	4b67      	ldr	r3, [pc, #412]	; (8003474 <HAL_RCC_OscConfig+0x4f4>)
 80032d8:	6a1b      	ldr	r3, [r3, #32]
 80032da:	4a66      	ldr	r2, [pc, #408]	; (8003474 <HAL_RCC_OscConfig+0x4f4>)
 80032dc:	f023 0301 	bic.w	r3, r3, #1
 80032e0:	6213      	str	r3, [r2, #32]
 80032e2:	4b64      	ldr	r3, [pc, #400]	; (8003474 <HAL_RCC_OscConfig+0x4f4>)
 80032e4:	6a1b      	ldr	r3, [r3, #32]
 80032e6:	4a63      	ldr	r2, [pc, #396]	; (8003474 <HAL_RCC_OscConfig+0x4f4>)
 80032e8:	f023 0304 	bic.w	r3, r3, #4
 80032ec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d015      	beq.n	8003322 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032f6:	f7fe fe23 	bl	8001f40 <HAL_GetTick>
 80032fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032fc:	e00a      	b.n	8003314 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032fe:	f7fe fe1f 	bl	8001f40 <HAL_GetTick>
 8003302:	4602      	mov	r2, r0
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	f241 3288 	movw	r2, #5000	; 0x1388
 800330c:	4293      	cmp	r3, r2
 800330e:	d901      	bls.n	8003314 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003310:	2303      	movs	r3, #3
 8003312:	e0ab      	b.n	800346c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003314:	4b57      	ldr	r3, [pc, #348]	; (8003474 <HAL_RCC_OscConfig+0x4f4>)
 8003316:	6a1b      	ldr	r3, [r3, #32]
 8003318:	f003 0302 	and.w	r3, r3, #2
 800331c:	2b00      	cmp	r3, #0
 800331e:	d0ee      	beq.n	80032fe <HAL_RCC_OscConfig+0x37e>
 8003320:	e014      	b.n	800334c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003322:	f7fe fe0d 	bl	8001f40 <HAL_GetTick>
 8003326:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003328:	e00a      	b.n	8003340 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800332a:	f7fe fe09 	bl	8001f40 <HAL_GetTick>
 800332e:	4602      	mov	r2, r0
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	f241 3288 	movw	r2, #5000	; 0x1388
 8003338:	4293      	cmp	r3, r2
 800333a:	d901      	bls.n	8003340 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800333c:	2303      	movs	r3, #3
 800333e:	e095      	b.n	800346c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003340:	4b4c      	ldr	r3, [pc, #304]	; (8003474 <HAL_RCC_OscConfig+0x4f4>)
 8003342:	6a1b      	ldr	r3, [r3, #32]
 8003344:	f003 0302 	and.w	r3, r3, #2
 8003348:	2b00      	cmp	r3, #0
 800334a:	d1ee      	bne.n	800332a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800334c:	7dfb      	ldrb	r3, [r7, #23]
 800334e:	2b01      	cmp	r3, #1
 8003350:	d105      	bne.n	800335e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003352:	4b48      	ldr	r3, [pc, #288]	; (8003474 <HAL_RCC_OscConfig+0x4f4>)
 8003354:	69db      	ldr	r3, [r3, #28]
 8003356:	4a47      	ldr	r2, [pc, #284]	; (8003474 <HAL_RCC_OscConfig+0x4f4>)
 8003358:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800335c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	69db      	ldr	r3, [r3, #28]
 8003362:	2b00      	cmp	r3, #0
 8003364:	f000 8081 	beq.w	800346a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003368:	4b42      	ldr	r3, [pc, #264]	; (8003474 <HAL_RCC_OscConfig+0x4f4>)
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f003 030c 	and.w	r3, r3, #12
 8003370:	2b08      	cmp	r3, #8
 8003372:	d061      	beq.n	8003438 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	69db      	ldr	r3, [r3, #28]
 8003378:	2b02      	cmp	r3, #2
 800337a:	d146      	bne.n	800340a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800337c:	4b3f      	ldr	r3, [pc, #252]	; (800347c <HAL_RCC_OscConfig+0x4fc>)
 800337e:	2200      	movs	r2, #0
 8003380:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003382:	f7fe fddd 	bl	8001f40 <HAL_GetTick>
 8003386:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003388:	e008      	b.n	800339c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800338a:	f7fe fdd9 	bl	8001f40 <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	2b02      	cmp	r3, #2
 8003396:	d901      	bls.n	800339c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	e067      	b.n	800346c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800339c:	4b35      	ldr	r3, [pc, #212]	; (8003474 <HAL_RCC_OscConfig+0x4f4>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d1f0      	bne.n	800338a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a1b      	ldr	r3, [r3, #32]
 80033ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033b0:	d108      	bne.n	80033c4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80033b2:	4b30      	ldr	r3, [pc, #192]	; (8003474 <HAL_RCC_OscConfig+0x4f4>)
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	492d      	ldr	r1, [pc, #180]	; (8003474 <HAL_RCC_OscConfig+0x4f4>)
 80033c0:	4313      	orrs	r3, r2
 80033c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033c4:	4b2b      	ldr	r3, [pc, #172]	; (8003474 <HAL_RCC_OscConfig+0x4f4>)
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6a19      	ldr	r1, [r3, #32]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d4:	430b      	orrs	r3, r1
 80033d6:	4927      	ldr	r1, [pc, #156]	; (8003474 <HAL_RCC_OscConfig+0x4f4>)
 80033d8:	4313      	orrs	r3, r2
 80033da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033dc:	4b27      	ldr	r3, [pc, #156]	; (800347c <HAL_RCC_OscConfig+0x4fc>)
 80033de:	2201      	movs	r2, #1
 80033e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e2:	f7fe fdad 	bl	8001f40 <HAL_GetTick>
 80033e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033e8:	e008      	b.n	80033fc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033ea:	f7fe fda9 	bl	8001f40 <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d901      	bls.n	80033fc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e037      	b.n	800346c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033fc:	4b1d      	ldr	r3, [pc, #116]	; (8003474 <HAL_RCC_OscConfig+0x4f4>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d0f0      	beq.n	80033ea <HAL_RCC_OscConfig+0x46a>
 8003408:	e02f      	b.n	800346a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800340a:	4b1c      	ldr	r3, [pc, #112]	; (800347c <HAL_RCC_OscConfig+0x4fc>)
 800340c:	2200      	movs	r2, #0
 800340e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003410:	f7fe fd96 	bl	8001f40 <HAL_GetTick>
 8003414:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003416:	e008      	b.n	800342a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003418:	f7fe fd92 	bl	8001f40 <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	2b02      	cmp	r3, #2
 8003424:	d901      	bls.n	800342a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e020      	b.n	800346c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800342a:	4b12      	ldr	r3, [pc, #72]	; (8003474 <HAL_RCC_OscConfig+0x4f4>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d1f0      	bne.n	8003418 <HAL_RCC_OscConfig+0x498>
 8003436:	e018      	b.n	800346a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	69db      	ldr	r3, [r3, #28]
 800343c:	2b01      	cmp	r3, #1
 800343e:	d101      	bne.n	8003444 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e013      	b.n	800346c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003444:	4b0b      	ldr	r3, [pc, #44]	; (8003474 <HAL_RCC_OscConfig+0x4f4>)
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6a1b      	ldr	r3, [r3, #32]
 8003454:	429a      	cmp	r2, r3
 8003456:	d106      	bne.n	8003466 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003462:	429a      	cmp	r2, r3
 8003464:	d001      	beq.n	800346a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e000      	b.n	800346c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800346a:	2300      	movs	r3, #0
}
 800346c:	4618      	mov	r0, r3
 800346e:	3718      	adds	r7, #24
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}
 8003474:	40021000 	.word	0x40021000
 8003478:	40007000 	.word	0x40007000
 800347c:	42420060 	.word	0x42420060

08003480 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b084      	sub	sp, #16
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d101      	bne.n	8003494 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e0d0      	b.n	8003636 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003494:	4b6a      	ldr	r3, [pc, #424]	; (8003640 <HAL_RCC_ClockConfig+0x1c0>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0307 	and.w	r3, r3, #7
 800349c:	683a      	ldr	r2, [r7, #0]
 800349e:	429a      	cmp	r2, r3
 80034a0:	d910      	bls.n	80034c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034a2:	4b67      	ldr	r3, [pc, #412]	; (8003640 <HAL_RCC_ClockConfig+0x1c0>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f023 0207 	bic.w	r2, r3, #7
 80034aa:	4965      	ldr	r1, [pc, #404]	; (8003640 <HAL_RCC_ClockConfig+0x1c0>)
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034b2:	4b63      	ldr	r3, [pc, #396]	; (8003640 <HAL_RCC_ClockConfig+0x1c0>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0307 	and.w	r3, r3, #7
 80034ba:	683a      	ldr	r2, [r7, #0]
 80034bc:	429a      	cmp	r2, r3
 80034be:	d001      	beq.n	80034c4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e0b8      	b.n	8003636 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0302 	and.w	r3, r3, #2
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d020      	beq.n	8003512 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0304 	and.w	r3, r3, #4
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d005      	beq.n	80034e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034dc:	4b59      	ldr	r3, [pc, #356]	; (8003644 <HAL_RCC_ClockConfig+0x1c4>)
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	4a58      	ldr	r2, [pc, #352]	; (8003644 <HAL_RCC_ClockConfig+0x1c4>)
 80034e2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80034e6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0308 	and.w	r3, r3, #8
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d005      	beq.n	8003500 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034f4:	4b53      	ldr	r3, [pc, #332]	; (8003644 <HAL_RCC_ClockConfig+0x1c4>)
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	4a52      	ldr	r2, [pc, #328]	; (8003644 <HAL_RCC_ClockConfig+0x1c4>)
 80034fa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80034fe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003500:	4b50      	ldr	r3, [pc, #320]	; (8003644 <HAL_RCC_ClockConfig+0x1c4>)
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	494d      	ldr	r1, [pc, #308]	; (8003644 <HAL_RCC_ClockConfig+0x1c4>)
 800350e:	4313      	orrs	r3, r2
 8003510:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0301 	and.w	r3, r3, #1
 800351a:	2b00      	cmp	r3, #0
 800351c:	d040      	beq.n	80035a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	2b01      	cmp	r3, #1
 8003524:	d107      	bne.n	8003536 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003526:	4b47      	ldr	r3, [pc, #284]	; (8003644 <HAL_RCC_ClockConfig+0x1c4>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d115      	bne.n	800355e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e07f      	b.n	8003636 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	2b02      	cmp	r3, #2
 800353c:	d107      	bne.n	800354e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800353e:	4b41      	ldr	r3, [pc, #260]	; (8003644 <HAL_RCC_ClockConfig+0x1c4>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d109      	bne.n	800355e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e073      	b.n	8003636 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800354e:	4b3d      	ldr	r3, [pc, #244]	; (8003644 <HAL_RCC_ClockConfig+0x1c4>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0302 	and.w	r3, r3, #2
 8003556:	2b00      	cmp	r3, #0
 8003558:	d101      	bne.n	800355e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e06b      	b.n	8003636 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800355e:	4b39      	ldr	r3, [pc, #228]	; (8003644 <HAL_RCC_ClockConfig+0x1c4>)
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f023 0203 	bic.w	r2, r3, #3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	4936      	ldr	r1, [pc, #216]	; (8003644 <HAL_RCC_ClockConfig+0x1c4>)
 800356c:	4313      	orrs	r3, r2
 800356e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003570:	f7fe fce6 	bl	8001f40 <HAL_GetTick>
 8003574:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003576:	e00a      	b.n	800358e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003578:	f7fe fce2 	bl	8001f40 <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	f241 3288 	movw	r2, #5000	; 0x1388
 8003586:	4293      	cmp	r3, r2
 8003588:	d901      	bls.n	800358e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e053      	b.n	8003636 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800358e:	4b2d      	ldr	r3, [pc, #180]	; (8003644 <HAL_RCC_ClockConfig+0x1c4>)
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f003 020c 	and.w	r2, r3, #12
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	429a      	cmp	r2, r3
 800359e:	d1eb      	bne.n	8003578 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035a0:	4b27      	ldr	r3, [pc, #156]	; (8003640 <HAL_RCC_ClockConfig+0x1c0>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0307 	and.w	r3, r3, #7
 80035a8:	683a      	ldr	r2, [r7, #0]
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d210      	bcs.n	80035d0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ae:	4b24      	ldr	r3, [pc, #144]	; (8003640 <HAL_RCC_ClockConfig+0x1c0>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f023 0207 	bic.w	r2, r3, #7
 80035b6:	4922      	ldr	r1, [pc, #136]	; (8003640 <HAL_RCC_ClockConfig+0x1c0>)
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035be:	4b20      	ldr	r3, [pc, #128]	; (8003640 <HAL_RCC_ClockConfig+0x1c0>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0307 	and.w	r3, r3, #7
 80035c6:	683a      	ldr	r2, [r7, #0]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d001      	beq.n	80035d0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e032      	b.n	8003636 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0304 	and.w	r3, r3, #4
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d008      	beq.n	80035ee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035dc:	4b19      	ldr	r3, [pc, #100]	; (8003644 <HAL_RCC_ClockConfig+0x1c4>)
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	4916      	ldr	r1, [pc, #88]	; (8003644 <HAL_RCC_ClockConfig+0x1c4>)
 80035ea:	4313      	orrs	r3, r2
 80035ec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0308 	and.w	r3, r3, #8
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d009      	beq.n	800360e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80035fa:	4b12      	ldr	r3, [pc, #72]	; (8003644 <HAL_RCC_ClockConfig+0x1c4>)
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	00db      	lsls	r3, r3, #3
 8003608:	490e      	ldr	r1, [pc, #56]	; (8003644 <HAL_RCC_ClockConfig+0x1c4>)
 800360a:	4313      	orrs	r3, r2
 800360c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800360e:	f000 f821 	bl	8003654 <HAL_RCC_GetSysClockFreq>
 8003612:	4601      	mov	r1, r0
 8003614:	4b0b      	ldr	r3, [pc, #44]	; (8003644 <HAL_RCC_ClockConfig+0x1c4>)
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	091b      	lsrs	r3, r3, #4
 800361a:	f003 030f 	and.w	r3, r3, #15
 800361e:	4a0a      	ldr	r2, [pc, #40]	; (8003648 <HAL_RCC_ClockConfig+0x1c8>)
 8003620:	5cd3      	ldrb	r3, [r2, r3]
 8003622:	fa21 f303 	lsr.w	r3, r1, r3
 8003626:	4a09      	ldr	r2, [pc, #36]	; (800364c <HAL_RCC_ClockConfig+0x1cc>)
 8003628:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800362a:	4b09      	ldr	r3, [pc, #36]	; (8003650 <HAL_RCC_ClockConfig+0x1d0>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4618      	mov	r0, r3
 8003630:	f7fe fc44 	bl	8001ebc <HAL_InitTick>

  return HAL_OK;
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3710      	adds	r7, #16
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	40022000 	.word	0x40022000
 8003644:	40021000 	.word	0x40021000
 8003648:	08004eb4 	.word	0x08004eb4
 800364c:	20000024 	.word	0x20000024
 8003650:	20000028 	.word	0x20000028

08003654 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003654:	b490      	push	{r4, r7}
 8003656:	b08a      	sub	sp, #40	; 0x28
 8003658:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800365a:	4b2a      	ldr	r3, [pc, #168]	; (8003704 <HAL_RCC_GetSysClockFreq+0xb0>)
 800365c:	1d3c      	adds	r4, r7, #4
 800365e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003660:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003664:	4b28      	ldr	r3, [pc, #160]	; (8003708 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003666:	881b      	ldrh	r3, [r3, #0]
 8003668:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800366a:	2300      	movs	r3, #0
 800366c:	61fb      	str	r3, [r7, #28]
 800366e:	2300      	movs	r3, #0
 8003670:	61bb      	str	r3, [r7, #24]
 8003672:	2300      	movs	r3, #0
 8003674:	627b      	str	r3, [r7, #36]	; 0x24
 8003676:	2300      	movs	r3, #0
 8003678:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800367a:	2300      	movs	r3, #0
 800367c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800367e:	4b23      	ldr	r3, [pc, #140]	; (800370c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	f003 030c 	and.w	r3, r3, #12
 800368a:	2b04      	cmp	r3, #4
 800368c:	d002      	beq.n	8003694 <HAL_RCC_GetSysClockFreq+0x40>
 800368e:	2b08      	cmp	r3, #8
 8003690:	d003      	beq.n	800369a <HAL_RCC_GetSysClockFreq+0x46>
 8003692:	e02d      	b.n	80036f0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003694:	4b1e      	ldr	r3, [pc, #120]	; (8003710 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003696:	623b      	str	r3, [r7, #32]
      break;
 8003698:	e02d      	b.n	80036f6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	0c9b      	lsrs	r3, r3, #18
 800369e:	f003 030f 	and.w	r3, r3, #15
 80036a2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80036a6:	4413      	add	r3, r2
 80036a8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80036ac:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d013      	beq.n	80036e0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80036b8:	4b14      	ldr	r3, [pc, #80]	; (800370c <HAL_RCC_GetSysClockFreq+0xb8>)
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	0c5b      	lsrs	r3, r3, #17
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80036c6:	4413      	add	r3, r2
 80036c8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80036cc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	4a0f      	ldr	r2, [pc, #60]	; (8003710 <HAL_RCC_GetSysClockFreq+0xbc>)
 80036d2:	fb02 f203 	mul.w	r2, r2, r3
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80036dc:	627b      	str	r3, [r7, #36]	; 0x24
 80036de:	e004      	b.n	80036ea <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	4a0c      	ldr	r2, [pc, #48]	; (8003714 <HAL_RCC_GetSysClockFreq+0xc0>)
 80036e4:	fb02 f303 	mul.w	r3, r2, r3
 80036e8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80036ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ec:	623b      	str	r3, [r7, #32]
      break;
 80036ee:	e002      	b.n	80036f6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80036f0:	4b07      	ldr	r3, [pc, #28]	; (8003710 <HAL_RCC_GetSysClockFreq+0xbc>)
 80036f2:	623b      	str	r3, [r7, #32]
      break;
 80036f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036f6:	6a3b      	ldr	r3, [r7, #32]
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3728      	adds	r7, #40	; 0x28
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bc90      	pop	{r4, r7}
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop
 8003704:	08004ea0 	.word	0x08004ea0
 8003708:	08004eb0 	.word	0x08004eb0
 800370c:	40021000 	.word	0x40021000
 8003710:	007a1200 	.word	0x007a1200
 8003714:	003d0900 	.word	0x003d0900

08003718 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003718:	b480      	push	{r7}
 800371a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800371c:	4b02      	ldr	r3, [pc, #8]	; (8003728 <HAL_RCC_GetHCLKFreq+0x10>)
 800371e:	681b      	ldr	r3, [r3, #0]
}
 8003720:	4618      	mov	r0, r3
 8003722:	46bd      	mov	sp, r7
 8003724:	bc80      	pop	{r7}
 8003726:	4770      	bx	lr
 8003728:	20000024 	.word	0x20000024

0800372c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003730:	f7ff fff2 	bl	8003718 <HAL_RCC_GetHCLKFreq>
 8003734:	4601      	mov	r1, r0
 8003736:	4b05      	ldr	r3, [pc, #20]	; (800374c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	0a1b      	lsrs	r3, r3, #8
 800373c:	f003 0307 	and.w	r3, r3, #7
 8003740:	4a03      	ldr	r2, [pc, #12]	; (8003750 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003742:	5cd3      	ldrb	r3, [r2, r3]
 8003744:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003748:	4618      	mov	r0, r3
 800374a:	bd80      	pop	{r7, pc}
 800374c:	40021000 	.word	0x40021000
 8003750:	08004ec4 	.word	0x08004ec4

08003754 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003754:	b480      	push	{r7}
 8003756:	b085      	sub	sp, #20
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800375c:	4b0a      	ldr	r3, [pc, #40]	; (8003788 <RCC_Delay+0x34>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a0a      	ldr	r2, [pc, #40]	; (800378c <RCC_Delay+0x38>)
 8003762:	fba2 2303 	umull	r2, r3, r2, r3
 8003766:	0a5b      	lsrs	r3, r3, #9
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	fb02 f303 	mul.w	r3, r2, r3
 800376e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003770:	bf00      	nop
  }
  while (Delay --);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	1e5a      	subs	r2, r3, #1
 8003776:	60fa      	str	r2, [r7, #12]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d1f9      	bne.n	8003770 <RCC_Delay+0x1c>
}
 800377c:	bf00      	nop
 800377e:	3714      	adds	r7, #20
 8003780:	46bd      	mov	sp, r7
 8003782:	bc80      	pop	{r7}
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop
 8003788:	20000024 	.word	0x20000024
 800378c:	10624dd3 	.word	0x10624dd3

08003790 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b086      	sub	sp, #24
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003798:	2300      	movs	r3, #0
 800379a:	613b      	str	r3, [r7, #16]
 800379c:	2300      	movs	r3, #0
 800379e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0301 	and.w	r3, r3, #1
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d07d      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80037ac:	2300      	movs	r3, #0
 80037ae:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037b0:	4b4f      	ldr	r3, [pc, #316]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037b2:	69db      	ldr	r3, [r3, #28]
 80037b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d10d      	bne.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037bc:	4b4c      	ldr	r3, [pc, #304]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037be:	69db      	ldr	r3, [r3, #28]
 80037c0:	4a4b      	ldr	r2, [pc, #300]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037c6:	61d3      	str	r3, [r2, #28]
 80037c8:	4b49      	ldr	r3, [pc, #292]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ca:	69db      	ldr	r3, [r3, #28]
 80037cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037d0:	60bb      	str	r3, [r7, #8]
 80037d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037d4:	2301      	movs	r3, #1
 80037d6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037d8:	4b46      	ldr	r3, [pc, #280]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d118      	bne.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037e4:	4b43      	ldr	r3, [pc, #268]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a42      	ldr	r2, [pc, #264]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037f0:	f7fe fba6 	bl	8001f40 <HAL_GetTick>
 80037f4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037f6:	e008      	b.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037f8:	f7fe fba2 	bl	8001f40 <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	2b64      	cmp	r3, #100	; 0x64
 8003804:	d901      	bls.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e06d      	b.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800380a:	4b3a      	ldr	r3, [pc, #232]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003812:	2b00      	cmp	r3, #0
 8003814:	d0f0      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003816:	4b36      	ldr	r3, [pc, #216]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003818:	6a1b      	ldr	r3, [r3, #32]
 800381a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800381e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d02e      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800382e:	68fa      	ldr	r2, [r7, #12]
 8003830:	429a      	cmp	r2, r3
 8003832:	d027      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003834:	4b2e      	ldr	r3, [pc, #184]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003836:	6a1b      	ldr	r3, [r3, #32]
 8003838:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800383c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800383e:	4b2e      	ldr	r3, [pc, #184]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003840:	2201      	movs	r2, #1
 8003842:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003844:	4b2c      	ldr	r3, [pc, #176]	; (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003846:	2200      	movs	r2, #0
 8003848:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800384a:	4a29      	ldr	r2, [pc, #164]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f003 0301 	and.w	r3, r3, #1
 8003856:	2b00      	cmp	r3, #0
 8003858:	d014      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800385a:	f7fe fb71 	bl	8001f40 <HAL_GetTick>
 800385e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003860:	e00a      	b.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003862:	f7fe fb6d 	bl	8001f40 <HAL_GetTick>
 8003866:	4602      	mov	r2, r0
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003870:	4293      	cmp	r3, r2
 8003872:	d901      	bls.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	e036      	b.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003878:	4b1d      	ldr	r3, [pc, #116]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800387a:	6a1b      	ldr	r3, [r3, #32]
 800387c:	f003 0302 	and.w	r3, r3, #2
 8003880:	2b00      	cmp	r3, #0
 8003882:	d0ee      	beq.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003884:	4b1a      	ldr	r3, [pc, #104]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003886:	6a1b      	ldr	r3, [r3, #32]
 8003888:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	4917      	ldr	r1, [pc, #92]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003892:	4313      	orrs	r3, r2
 8003894:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003896:	7dfb      	ldrb	r3, [r7, #23]
 8003898:	2b01      	cmp	r3, #1
 800389a:	d105      	bne.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800389c:	4b14      	ldr	r3, [pc, #80]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800389e:	69db      	ldr	r3, [r3, #28]
 80038a0:	4a13      	ldr	r2, [pc, #76]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038a6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0302 	and.w	r3, r3, #2
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d008      	beq.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80038b4:	4b0e      	ldr	r3, [pc, #56]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	490b      	ldr	r1, [pc, #44]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0310 	and.w	r3, r3, #16
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d008      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80038d2:	4b07      	ldr	r3, [pc, #28]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	4904      	ldr	r1, [pc, #16]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3718      	adds	r7, #24
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	40021000 	.word	0x40021000
 80038f4:	40007000 	.word	0x40007000
 80038f8:	42420440 	.word	0x42420440

080038fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d101      	bne.n	800390e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e041      	b.n	8003992 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003914:	b2db      	uxtb	r3, r3
 8003916:	2b00      	cmp	r3, #0
 8003918:	d106      	bne.n	8003928 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f7fe f984 	bl	8001c30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2202      	movs	r2, #2
 800392c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	3304      	adds	r3, #4
 8003938:	4619      	mov	r1, r3
 800393a:	4610      	mov	r0, r2
 800393c:	f000 fe04 	bl	8004548 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	3708      	adds	r7, #8
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
	...

0800399c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800399c:	b480      	push	{r7}
 800399e:	b085      	sub	sp, #20
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d001      	beq.n	80039b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e03a      	b.n	8003a2a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2202      	movs	r2, #2
 80039b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	68da      	ldr	r2, [r3, #12]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f042 0201 	orr.w	r2, r2, #1
 80039ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a18      	ldr	r2, [pc, #96]	; (8003a34 <HAL_TIM_Base_Start_IT+0x98>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d00e      	beq.n	80039f4 <HAL_TIM_Base_Start_IT+0x58>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039de:	d009      	beq.n	80039f4 <HAL_TIM_Base_Start_IT+0x58>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a14      	ldr	r2, [pc, #80]	; (8003a38 <HAL_TIM_Base_Start_IT+0x9c>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d004      	beq.n	80039f4 <HAL_TIM_Base_Start_IT+0x58>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a13      	ldr	r2, [pc, #76]	; (8003a3c <HAL_TIM_Base_Start_IT+0xa0>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d111      	bne.n	8003a18 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f003 0307 	and.w	r3, r3, #7
 80039fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2b06      	cmp	r3, #6
 8003a04:	d010      	beq.n	8003a28 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f042 0201 	orr.w	r2, r2, #1
 8003a14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a16:	e007      	b.n	8003a28 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f042 0201 	orr.w	r2, r2, #1
 8003a26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3714      	adds	r7, #20
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bc80      	pop	{r7}
 8003a32:	4770      	bx	lr
 8003a34:	40012c00 	.word	0x40012c00
 8003a38:	40000400 	.word	0x40000400
 8003a3c:	40000800 	.word	0x40000800

08003a40 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d101      	bne.n	8003a52 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e041      	b.n	8003ad6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d106      	bne.n	8003a6c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f000 f839 	bl	8003ade <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2202      	movs	r2, #2
 8003a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	3304      	adds	r3, #4
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	4610      	mov	r0, r2
 8003a80:	f000 fd62 	bl	8004548 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ad4:	2300      	movs	r3, #0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3708      	adds	r7, #8
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}

08003ade <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003ade:	b480      	push	{r7}
 8003ae0:	b083      	sub	sp, #12
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003ae6:	bf00      	nop
 8003ae8:	370c      	adds	r7, #12
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bc80      	pop	{r7}
 8003aee:	4770      	bx	lr

08003af0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b084      	sub	sp, #16
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d109      	bne.n	8003b14 <HAL_TIM_PWM_Start+0x24>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	bf14      	ite	ne
 8003b0c:	2301      	movne	r3, #1
 8003b0e:	2300      	moveq	r3, #0
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	e022      	b.n	8003b5a <HAL_TIM_PWM_Start+0x6a>
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	2b04      	cmp	r3, #4
 8003b18:	d109      	bne.n	8003b2e <HAL_TIM_PWM_Start+0x3e>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	bf14      	ite	ne
 8003b26:	2301      	movne	r3, #1
 8003b28:	2300      	moveq	r3, #0
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	e015      	b.n	8003b5a <HAL_TIM_PWM_Start+0x6a>
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	2b08      	cmp	r3, #8
 8003b32:	d109      	bne.n	8003b48 <HAL_TIM_PWM_Start+0x58>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	bf14      	ite	ne
 8003b40:	2301      	movne	r3, #1
 8003b42:	2300      	moveq	r3, #0
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	e008      	b.n	8003b5a <HAL_TIM_PWM_Start+0x6a>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	bf14      	ite	ne
 8003b54:	2301      	movne	r3, #1
 8003b56:	2300      	moveq	r3, #0
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d001      	beq.n	8003b62 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e05e      	b.n	8003c20 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d104      	bne.n	8003b72 <HAL_TIM_PWM_Start+0x82>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2202      	movs	r2, #2
 8003b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b70:	e013      	b.n	8003b9a <HAL_TIM_PWM_Start+0xaa>
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	2b04      	cmp	r3, #4
 8003b76:	d104      	bne.n	8003b82 <HAL_TIM_PWM_Start+0x92>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2202      	movs	r2, #2
 8003b7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b80:	e00b      	b.n	8003b9a <HAL_TIM_PWM_Start+0xaa>
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	2b08      	cmp	r3, #8
 8003b86:	d104      	bne.n	8003b92 <HAL_TIM_PWM_Start+0xa2>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2202      	movs	r2, #2
 8003b8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b90:	e003      	b.n	8003b9a <HAL_TIM_PWM_Start+0xaa>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2202      	movs	r2, #2
 8003b96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	6839      	ldr	r1, [r7, #0]
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f001 f85d 	bl	8004c62 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a1e      	ldr	r2, [pc, #120]	; (8003c28 <HAL_TIM_PWM_Start+0x138>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d107      	bne.n	8003bc2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003bc0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a18      	ldr	r2, [pc, #96]	; (8003c28 <HAL_TIM_PWM_Start+0x138>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d00e      	beq.n	8003bea <HAL_TIM_PWM_Start+0xfa>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bd4:	d009      	beq.n	8003bea <HAL_TIM_PWM_Start+0xfa>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a14      	ldr	r2, [pc, #80]	; (8003c2c <HAL_TIM_PWM_Start+0x13c>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d004      	beq.n	8003bea <HAL_TIM_PWM_Start+0xfa>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a12      	ldr	r2, [pc, #72]	; (8003c30 <HAL_TIM_PWM_Start+0x140>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d111      	bne.n	8003c0e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	f003 0307 	and.w	r3, r3, #7
 8003bf4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2b06      	cmp	r3, #6
 8003bfa:	d010      	beq.n	8003c1e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f042 0201 	orr.w	r2, r2, #1
 8003c0a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c0c:	e007      	b.n	8003c1e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f042 0201 	orr.w	r2, r2, #1
 8003c1c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c1e:	2300      	movs	r3, #0
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3710      	adds	r7, #16
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	40012c00 	.word	0x40012c00
 8003c2c:	40000400 	.word	0x40000400
 8003c30:	40000800 	.word	0x40000800

08003c34 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b082      	sub	sp, #8
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d101      	bne.n	8003c46 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e041      	b.n	8003cca <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d106      	bne.n	8003c60 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 f839 	bl	8003cd2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2202      	movs	r2, #2
 8003c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	3304      	adds	r3, #4
 8003c70:	4619      	mov	r1, r3
 8003c72:	4610      	mov	r0, r2
 8003c74:	f000 fc68 	bl	8004548 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3708      	adds	r7, #8
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}

08003cd2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003cd2:	b480      	push	{r7}
 8003cd4:	b083      	sub	sp, #12
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003cda:	bf00      	nop
 8003cdc:	370c      	adds	r7, #12
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bc80      	pop	{r7}
 8003ce2:	4770      	bx	lr

08003ce4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d104      	bne.n	8003cfe <HAL_TIM_IC_Start_IT+0x1a>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	e013      	b.n	8003d26 <HAL_TIM_IC_Start_IT+0x42>
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	2b04      	cmp	r3, #4
 8003d02:	d104      	bne.n	8003d0e <HAL_TIM_IC_Start_IT+0x2a>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	e00b      	b.n	8003d26 <HAL_TIM_IC_Start_IT+0x42>
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	2b08      	cmp	r3, #8
 8003d12:	d104      	bne.n	8003d1e <HAL_TIM_IC_Start_IT+0x3a>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	e003      	b.n	8003d26 <HAL_TIM_IC_Start_IT+0x42>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d104      	bne.n	8003d38 <HAL_TIM_IC_Start_IT+0x54>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	e013      	b.n	8003d60 <HAL_TIM_IC_Start_IT+0x7c>
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	2b04      	cmp	r3, #4
 8003d3c:	d104      	bne.n	8003d48 <HAL_TIM_IC_Start_IT+0x64>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	e00b      	b.n	8003d60 <HAL_TIM_IC_Start_IT+0x7c>
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	2b08      	cmp	r3, #8
 8003d4c:	d104      	bne.n	8003d58 <HAL_TIM_IC_Start_IT+0x74>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	e003      	b.n	8003d60 <HAL_TIM_IC_Start_IT+0x7c>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003d62:	7bfb      	ldrb	r3, [r7, #15]
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d102      	bne.n	8003d6e <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003d68:	7bbb      	ldrb	r3, [r7, #14]
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d001      	beq.n	8003d72 <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e0b3      	b.n	8003eda <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d104      	bne.n	8003d82 <HAL_TIM_IC_Start_IT+0x9e>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2202      	movs	r2, #2
 8003d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d80:	e013      	b.n	8003daa <HAL_TIM_IC_Start_IT+0xc6>
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	2b04      	cmp	r3, #4
 8003d86:	d104      	bne.n	8003d92 <HAL_TIM_IC_Start_IT+0xae>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2202      	movs	r2, #2
 8003d8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d90:	e00b      	b.n	8003daa <HAL_TIM_IC_Start_IT+0xc6>
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	2b08      	cmp	r3, #8
 8003d96:	d104      	bne.n	8003da2 <HAL_TIM_IC_Start_IT+0xbe>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2202      	movs	r2, #2
 8003d9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003da0:	e003      	b.n	8003daa <HAL_TIM_IC_Start_IT+0xc6>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2202      	movs	r2, #2
 8003da6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d104      	bne.n	8003dba <HAL_TIM_IC_Start_IT+0xd6>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2202      	movs	r2, #2
 8003db4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003db8:	e013      	b.n	8003de2 <HAL_TIM_IC_Start_IT+0xfe>
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	2b04      	cmp	r3, #4
 8003dbe:	d104      	bne.n	8003dca <HAL_TIM_IC_Start_IT+0xe6>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2202      	movs	r2, #2
 8003dc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003dc8:	e00b      	b.n	8003de2 <HAL_TIM_IC_Start_IT+0xfe>
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	2b08      	cmp	r3, #8
 8003dce:	d104      	bne.n	8003dda <HAL_TIM_IC_Start_IT+0xf6>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2202      	movs	r2, #2
 8003dd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003dd8:	e003      	b.n	8003de2 <HAL_TIM_IC_Start_IT+0xfe>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2202      	movs	r2, #2
 8003dde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	2b0c      	cmp	r3, #12
 8003de6:	d841      	bhi.n	8003e6c <HAL_TIM_IC_Start_IT+0x188>
 8003de8:	a201      	add	r2, pc, #4	; (adr r2, 8003df0 <HAL_TIM_IC_Start_IT+0x10c>)
 8003dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dee:	bf00      	nop
 8003df0:	08003e25 	.word	0x08003e25
 8003df4:	08003e6d 	.word	0x08003e6d
 8003df8:	08003e6d 	.word	0x08003e6d
 8003dfc:	08003e6d 	.word	0x08003e6d
 8003e00:	08003e37 	.word	0x08003e37
 8003e04:	08003e6d 	.word	0x08003e6d
 8003e08:	08003e6d 	.word	0x08003e6d
 8003e0c:	08003e6d 	.word	0x08003e6d
 8003e10:	08003e49 	.word	0x08003e49
 8003e14:	08003e6d 	.word	0x08003e6d
 8003e18:	08003e6d 	.word	0x08003e6d
 8003e1c:	08003e6d 	.word	0x08003e6d
 8003e20:	08003e5b 	.word	0x08003e5b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	68da      	ldr	r2, [r3, #12]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f042 0202 	orr.w	r2, r2, #2
 8003e32:	60da      	str	r2, [r3, #12]
      break;
 8003e34:	e01b      	b.n	8003e6e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	68da      	ldr	r2, [r3, #12]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f042 0204 	orr.w	r2, r2, #4
 8003e44:	60da      	str	r2, [r3, #12]
      break;
 8003e46:	e012      	b.n	8003e6e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	68da      	ldr	r2, [r3, #12]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f042 0208 	orr.w	r2, r2, #8
 8003e56:	60da      	str	r2, [r3, #12]
      break;
 8003e58:	e009      	b.n	8003e6e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	68da      	ldr	r2, [r3, #12]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f042 0210 	orr.w	r2, r2, #16
 8003e68:	60da      	str	r2, [r3, #12]
      break;
 8003e6a:	e000      	b.n	8003e6e <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8003e6c:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	2201      	movs	r2, #1
 8003e74:	6839      	ldr	r1, [r7, #0]
 8003e76:	4618      	mov	r0, r3
 8003e78:	f000 fef3 	bl	8004c62 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a18      	ldr	r2, [pc, #96]	; (8003ee4 <HAL_TIM_IC_Start_IT+0x200>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d00e      	beq.n	8003ea4 <HAL_TIM_IC_Start_IT+0x1c0>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e8e:	d009      	beq.n	8003ea4 <HAL_TIM_IC_Start_IT+0x1c0>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a14      	ldr	r2, [pc, #80]	; (8003ee8 <HAL_TIM_IC_Start_IT+0x204>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d004      	beq.n	8003ea4 <HAL_TIM_IC_Start_IT+0x1c0>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a13      	ldr	r2, [pc, #76]	; (8003eec <HAL_TIM_IC_Start_IT+0x208>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d111      	bne.n	8003ec8 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	f003 0307 	and.w	r3, r3, #7
 8003eae:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	2b06      	cmp	r3, #6
 8003eb4:	d010      	beq.n	8003ed8 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f042 0201 	orr.w	r2, r2, #1
 8003ec4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ec6:	e007      	b.n	8003ed8 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f042 0201 	orr.w	r2, r2, #1
 8003ed6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ed8:	2300      	movs	r3, #0
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3710      	adds	r7, #16
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	40012c00 	.word	0x40012c00
 8003ee8:	40000400 	.word	0x40000400
 8003eec:	40000800 	.word	0x40000800

08003ef0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b082      	sub	sp, #8
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	f003 0302 	and.w	r3, r3, #2
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d122      	bne.n	8003f4c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	f003 0302 	and.w	r3, r3, #2
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d11b      	bne.n	8003f4c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f06f 0202 	mvn.w	r2, #2
 8003f1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2201      	movs	r2, #1
 8003f22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	699b      	ldr	r3, [r3, #24]
 8003f2a:	f003 0303 	and.w	r3, r3, #3
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d003      	beq.n	8003f3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f7fd fd86 	bl	8001a44 <HAL_TIM_IC_CaptureCallback>
 8003f38:	e005      	b.n	8003f46 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 fae9 	bl	8004512 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f000 faef 	bl	8004524 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	f003 0304 	and.w	r3, r3, #4
 8003f56:	2b04      	cmp	r3, #4
 8003f58:	d122      	bne.n	8003fa0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	f003 0304 	and.w	r3, r3, #4
 8003f64:	2b04      	cmp	r3, #4
 8003f66:	d11b      	bne.n	8003fa0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f06f 0204 	mvn.w	r2, #4
 8003f70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2202      	movs	r2, #2
 8003f76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d003      	beq.n	8003f8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f7fd fd5c 	bl	8001a44 <HAL_TIM_IC_CaptureCallback>
 8003f8c:	e005      	b.n	8003f9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 fabf 	bl	8004512 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f000 fac5 	bl	8004524 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	691b      	ldr	r3, [r3, #16]
 8003fa6:	f003 0308 	and.w	r3, r3, #8
 8003faa:	2b08      	cmp	r3, #8
 8003fac:	d122      	bne.n	8003ff4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	f003 0308 	and.w	r3, r3, #8
 8003fb8:	2b08      	cmp	r3, #8
 8003fba:	d11b      	bne.n	8003ff4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f06f 0208 	mvn.w	r2, #8
 8003fc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2204      	movs	r2, #4
 8003fca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	69db      	ldr	r3, [r3, #28]
 8003fd2:	f003 0303 	and.w	r3, r3, #3
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d003      	beq.n	8003fe2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f7fd fd32 	bl	8001a44 <HAL_TIM_IC_CaptureCallback>
 8003fe0:	e005      	b.n	8003fee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 fa95 	bl	8004512 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f000 fa9b 	bl	8004524 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	f003 0310 	and.w	r3, r3, #16
 8003ffe:	2b10      	cmp	r3, #16
 8004000:	d122      	bne.n	8004048 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	f003 0310 	and.w	r3, r3, #16
 800400c:	2b10      	cmp	r3, #16
 800400e:	d11b      	bne.n	8004048 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f06f 0210 	mvn.w	r2, #16
 8004018:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2208      	movs	r2, #8
 800401e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	69db      	ldr	r3, [r3, #28]
 8004026:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800402a:	2b00      	cmp	r3, #0
 800402c:	d003      	beq.n	8004036 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f7fd fd08 	bl	8001a44 <HAL_TIM_IC_CaptureCallback>
 8004034:	e005      	b.n	8004042 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f000 fa6b 	bl	8004512 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f000 fa71 	bl	8004524 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	f003 0301 	and.w	r3, r3, #1
 8004052:	2b01      	cmp	r3, #1
 8004054:	d10e      	bne.n	8004074 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	f003 0301 	and.w	r3, r3, #1
 8004060:	2b01      	cmp	r3, #1
 8004062:	d107      	bne.n	8004074 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f06f 0201 	mvn.w	r2, #1
 800406c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f7fd fcd6 	bl	8001a20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800407e:	2b80      	cmp	r3, #128	; 0x80
 8004080:	d10e      	bne.n	80040a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800408c:	2b80      	cmp	r3, #128	; 0x80
 800408e:	d107      	bne.n	80040a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004098:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f000 febe 	bl	8004e1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	691b      	ldr	r3, [r3, #16]
 80040a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040aa:	2b40      	cmp	r3, #64	; 0x40
 80040ac:	d10e      	bne.n	80040cc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040b8:	2b40      	cmp	r3, #64	; 0x40
 80040ba:	d107      	bne.n	80040cc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80040c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f000 fa35 	bl	8004536 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	f003 0320 	and.w	r3, r3, #32
 80040d6:	2b20      	cmp	r3, #32
 80040d8:	d10e      	bne.n	80040f8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	f003 0320 	and.w	r3, r3, #32
 80040e4:	2b20      	cmp	r3, #32
 80040e6:	d107      	bne.n	80040f8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f06f 0220 	mvn.w	r2, #32
 80040f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 fe89 	bl	8004e0a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80040f8:	bf00      	nop
 80040fa:	3708      	adds	r7, #8
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}

08004100 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004112:	2b01      	cmp	r3, #1
 8004114:	d101      	bne.n	800411a <HAL_TIM_IC_ConfigChannel+0x1a>
 8004116:	2302      	movs	r3, #2
 8004118:	e082      	b.n	8004220 <HAL_TIM_IC_ConfigChannel+0x120>
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2201      	movs	r2, #1
 800411e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d11b      	bne.n	8004160 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6818      	ldr	r0, [r3, #0]
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	6819      	ldr	r1, [r3, #0]
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	685a      	ldr	r2, [r3, #4]
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	f000 fbf0 	bl	800491c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	699a      	ldr	r2, [r3, #24]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f022 020c 	bic.w	r2, r2, #12
 800414a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	6999      	ldr	r1, [r3, #24]
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	689a      	ldr	r2, [r3, #8]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	430a      	orrs	r2, r1
 800415c:	619a      	str	r2, [r3, #24]
 800415e:	e05a      	b.n	8004216 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2b04      	cmp	r3, #4
 8004164:	d11c      	bne.n	80041a0 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	6818      	ldr	r0, [r3, #0]
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	6819      	ldr	r1, [r3, #0]
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	685a      	ldr	r2, [r3, #4]
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	f000 fc59 	bl	8004a2c <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	699a      	ldr	r2, [r3, #24]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004188:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	6999      	ldr	r1, [r3, #24]
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	021a      	lsls	r2, r3, #8
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	430a      	orrs	r2, r1
 800419c:	619a      	str	r2, [r3, #24]
 800419e:	e03a      	b.n	8004216 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2b08      	cmp	r3, #8
 80041a4:	d11b      	bne.n	80041de <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6818      	ldr	r0, [r3, #0]
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	6819      	ldr	r1, [r3, #0]
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	685a      	ldr	r2, [r3, #4]
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	f000 fca4 	bl	8004b02 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	69da      	ldr	r2, [r3, #28]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f022 020c 	bic.w	r2, r2, #12
 80041c8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	69d9      	ldr	r1, [r3, #28]
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	689a      	ldr	r2, [r3, #8]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	430a      	orrs	r2, r1
 80041da:	61da      	str	r2, [r3, #28]
 80041dc:	e01b      	b.n	8004216 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6818      	ldr	r0, [r3, #0]
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	6819      	ldr	r1, [r3, #0]
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	685a      	ldr	r2, [r3, #4]
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	f000 fcc3 	bl	8004b78 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	69da      	ldr	r2, [r3, #28]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004200:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	69d9      	ldr	r1, [r3, #28]
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	021a      	lsls	r2, r3, #8
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	430a      	orrs	r2, r1
 8004214:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800421e:	2300      	movs	r3, #0
}
 8004220:	4618      	mov	r0, r3
 8004222:	3710      	adds	r7, #16
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b084      	sub	sp, #16
 800422c:	af00      	add	r7, sp, #0
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	60b9      	str	r1, [r7, #8]
 8004232:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800423a:	2b01      	cmp	r3, #1
 800423c:	d101      	bne.n	8004242 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800423e:	2302      	movs	r3, #2
 8004240:	e0ac      	b.n	800439c <HAL_TIM_PWM_ConfigChannel+0x174>
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2201      	movs	r2, #1
 8004246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2b0c      	cmp	r3, #12
 800424e:	f200 809f 	bhi.w	8004390 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004252:	a201      	add	r2, pc, #4	; (adr r2, 8004258 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004258:	0800428d 	.word	0x0800428d
 800425c:	08004391 	.word	0x08004391
 8004260:	08004391 	.word	0x08004391
 8004264:	08004391 	.word	0x08004391
 8004268:	080042cd 	.word	0x080042cd
 800426c:	08004391 	.word	0x08004391
 8004270:	08004391 	.word	0x08004391
 8004274:	08004391 	.word	0x08004391
 8004278:	0800430f 	.word	0x0800430f
 800427c:	08004391 	.word	0x08004391
 8004280:	08004391 	.word	0x08004391
 8004284:	08004391 	.word	0x08004391
 8004288:	0800434f 	.word	0x0800434f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	68b9      	ldr	r1, [r7, #8]
 8004292:	4618      	mov	r0, r3
 8004294:	f000 f9ba 	bl	800460c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	699a      	ldr	r2, [r3, #24]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f042 0208 	orr.w	r2, r2, #8
 80042a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	699a      	ldr	r2, [r3, #24]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f022 0204 	bic.w	r2, r2, #4
 80042b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	6999      	ldr	r1, [r3, #24]
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	691a      	ldr	r2, [r3, #16]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	430a      	orrs	r2, r1
 80042c8:	619a      	str	r2, [r3, #24]
      break;
 80042ca:	e062      	b.n	8004392 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	68b9      	ldr	r1, [r7, #8]
 80042d2:	4618      	mov	r0, r3
 80042d4:	f000 fa00 	bl	80046d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	699a      	ldr	r2, [r3, #24]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	699a      	ldr	r2, [r3, #24]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	6999      	ldr	r1, [r3, #24]
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	691b      	ldr	r3, [r3, #16]
 8004302:	021a      	lsls	r2, r3, #8
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	430a      	orrs	r2, r1
 800430a:	619a      	str	r2, [r3, #24]
      break;
 800430c:	e041      	b.n	8004392 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	68b9      	ldr	r1, [r7, #8]
 8004314:	4618      	mov	r0, r3
 8004316:	f000 fa49 	bl	80047ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	69da      	ldr	r2, [r3, #28]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f042 0208 	orr.w	r2, r2, #8
 8004328:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	69da      	ldr	r2, [r3, #28]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f022 0204 	bic.w	r2, r2, #4
 8004338:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	69d9      	ldr	r1, [r3, #28]
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	691a      	ldr	r2, [r3, #16]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	430a      	orrs	r2, r1
 800434a:	61da      	str	r2, [r3, #28]
      break;
 800434c:	e021      	b.n	8004392 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	68b9      	ldr	r1, [r7, #8]
 8004354:	4618      	mov	r0, r3
 8004356:	f000 fa93 	bl	8004880 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	69da      	ldr	r2, [r3, #28]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004368:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	69da      	ldr	r2, [r3, #28]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004378:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	69d9      	ldr	r1, [r3, #28]
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	691b      	ldr	r3, [r3, #16]
 8004384:	021a      	lsls	r2, r3, #8
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	430a      	orrs	r2, r1
 800438c:	61da      	str	r2, [r3, #28]
      break;
 800438e:	e000      	b.n	8004392 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004390:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2200      	movs	r2, #0
 8004396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800439a:	2300      	movs	r3, #0
}
 800439c:	4618      	mov	r0, r3
 800439e:	3710      	adds	r7, #16
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d101      	bne.n	80043bc <HAL_TIM_ConfigClockSource+0x18>
 80043b8:	2302      	movs	r3, #2
 80043ba:	e0a6      	b.n	800450a <HAL_TIM_ConfigClockSource+0x166>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2202      	movs	r2, #2
 80043c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80043da:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043e2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	68fa      	ldr	r2, [r7, #12]
 80043ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2b40      	cmp	r3, #64	; 0x40
 80043f2:	d067      	beq.n	80044c4 <HAL_TIM_ConfigClockSource+0x120>
 80043f4:	2b40      	cmp	r3, #64	; 0x40
 80043f6:	d80b      	bhi.n	8004410 <HAL_TIM_ConfigClockSource+0x6c>
 80043f8:	2b10      	cmp	r3, #16
 80043fa:	d073      	beq.n	80044e4 <HAL_TIM_ConfigClockSource+0x140>
 80043fc:	2b10      	cmp	r3, #16
 80043fe:	d802      	bhi.n	8004406 <HAL_TIM_ConfigClockSource+0x62>
 8004400:	2b00      	cmp	r3, #0
 8004402:	d06f      	beq.n	80044e4 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004404:	e078      	b.n	80044f8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004406:	2b20      	cmp	r3, #32
 8004408:	d06c      	beq.n	80044e4 <HAL_TIM_ConfigClockSource+0x140>
 800440a:	2b30      	cmp	r3, #48	; 0x30
 800440c:	d06a      	beq.n	80044e4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800440e:	e073      	b.n	80044f8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004410:	2b70      	cmp	r3, #112	; 0x70
 8004412:	d00d      	beq.n	8004430 <HAL_TIM_ConfigClockSource+0x8c>
 8004414:	2b70      	cmp	r3, #112	; 0x70
 8004416:	d804      	bhi.n	8004422 <HAL_TIM_ConfigClockSource+0x7e>
 8004418:	2b50      	cmp	r3, #80	; 0x50
 800441a:	d033      	beq.n	8004484 <HAL_TIM_ConfigClockSource+0xe0>
 800441c:	2b60      	cmp	r3, #96	; 0x60
 800441e:	d041      	beq.n	80044a4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004420:	e06a      	b.n	80044f8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004422:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004426:	d066      	beq.n	80044f6 <HAL_TIM_ConfigClockSource+0x152>
 8004428:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800442c:	d017      	beq.n	800445e <HAL_TIM_ConfigClockSource+0xba>
      break;
 800442e:	e063      	b.n	80044f8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6818      	ldr	r0, [r3, #0]
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	6899      	ldr	r1, [r3, #8]
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	685a      	ldr	r2, [r3, #4]
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	f000 fbf0 	bl	8004c24 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004452:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	68fa      	ldr	r2, [r7, #12]
 800445a:	609a      	str	r2, [r3, #8]
      break;
 800445c:	e04c      	b.n	80044f8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6818      	ldr	r0, [r3, #0]
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	6899      	ldr	r1, [r3, #8]
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	685a      	ldr	r2, [r3, #4]
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	f000 fbd9 	bl	8004c24 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	689a      	ldr	r2, [r3, #8]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004480:	609a      	str	r2, [r3, #8]
      break;
 8004482:	e039      	b.n	80044f8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6818      	ldr	r0, [r3, #0]
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	6859      	ldr	r1, [r3, #4]
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	461a      	mov	r2, r3
 8004492:	f000 fa9d 	bl	80049d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2150      	movs	r1, #80	; 0x50
 800449c:	4618      	mov	r0, r3
 800449e:	f000 fba7 	bl	8004bf0 <TIM_ITRx_SetConfig>
      break;
 80044a2:	e029      	b.n	80044f8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6818      	ldr	r0, [r3, #0]
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	6859      	ldr	r1, [r3, #4]
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	461a      	mov	r2, r3
 80044b2:	f000 faf7 	bl	8004aa4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2160      	movs	r1, #96	; 0x60
 80044bc:	4618      	mov	r0, r3
 80044be:	f000 fb97 	bl	8004bf0 <TIM_ITRx_SetConfig>
      break;
 80044c2:	e019      	b.n	80044f8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6818      	ldr	r0, [r3, #0]
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	6859      	ldr	r1, [r3, #4]
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	461a      	mov	r2, r3
 80044d2:	f000 fa7d 	bl	80049d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	2140      	movs	r1, #64	; 0x40
 80044dc:	4618      	mov	r0, r3
 80044de:	f000 fb87 	bl	8004bf0 <TIM_ITRx_SetConfig>
      break;
 80044e2:	e009      	b.n	80044f8 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4619      	mov	r1, r3
 80044ee:	4610      	mov	r0, r2
 80044f0:	f000 fb7e 	bl	8004bf0 <TIM_ITRx_SetConfig>
        break;
 80044f4:	e000      	b.n	80044f8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80044f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004508:	2300      	movs	r3, #0
}
 800450a:	4618      	mov	r0, r3
 800450c:	3710      	adds	r7, #16
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}

08004512 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004512:	b480      	push	{r7}
 8004514:	b083      	sub	sp, #12
 8004516:	af00      	add	r7, sp, #0
 8004518:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800451a:	bf00      	nop
 800451c:	370c      	adds	r7, #12
 800451e:	46bd      	mov	sp, r7
 8004520:	bc80      	pop	{r7}
 8004522:	4770      	bx	lr

08004524 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004524:	b480      	push	{r7}
 8004526:	b083      	sub	sp, #12
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800452c:	bf00      	nop
 800452e:	370c      	adds	r7, #12
 8004530:	46bd      	mov	sp, r7
 8004532:	bc80      	pop	{r7}
 8004534:	4770      	bx	lr

08004536 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004536:	b480      	push	{r7}
 8004538:	b083      	sub	sp, #12
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800453e:	bf00      	nop
 8004540:	370c      	adds	r7, #12
 8004542:	46bd      	mov	sp, r7
 8004544:	bc80      	pop	{r7}
 8004546:	4770      	bx	lr

08004548 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004548:	b480      	push	{r7}
 800454a:	b085      	sub	sp, #20
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	4a29      	ldr	r2, [pc, #164]	; (8004600 <TIM_Base_SetConfig+0xb8>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d00b      	beq.n	8004578 <TIM_Base_SetConfig+0x30>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004566:	d007      	beq.n	8004578 <TIM_Base_SetConfig+0x30>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	4a26      	ldr	r2, [pc, #152]	; (8004604 <TIM_Base_SetConfig+0xbc>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d003      	beq.n	8004578 <TIM_Base_SetConfig+0x30>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	4a25      	ldr	r2, [pc, #148]	; (8004608 <TIM_Base_SetConfig+0xc0>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d108      	bne.n	800458a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800457e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	68fa      	ldr	r2, [r7, #12]
 8004586:	4313      	orrs	r3, r2
 8004588:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4a1c      	ldr	r2, [pc, #112]	; (8004600 <TIM_Base_SetConfig+0xb8>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d00b      	beq.n	80045aa <TIM_Base_SetConfig+0x62>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004598:	d007      	beq.n	80045aa <TIM_Base_SetConfig+0x62>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a19      	ldr	r2, [pc, #100]	; (8004604 <TIM_Base_SetConfig+0xbc>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d003      	beq.n	80045aa <TIM_Base_SetConfig+0x62>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4a18      	ldr	r2, [pc, #96]	; (8004608 <TIM_Base_SetConfig+0xc0>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d108      	bne.n	80045bc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	68fa      	ldr	r2, [r7, #12]
 80045b8:	4313      	orrs	r3, r2
 80045ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	695b      	ldr	r3, [r3, #20]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	68fa      	ldr	r2, [r7, #12]
 80045ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	689a      	ldr	r2, [r3, #8]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	4a07      	ldr	r2, [pc, #28]	; (8004600 <TIM_Base_SetConfig+0xb8>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d103      	bne.n	80045f0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	691a      	ldr	r2, [r3, #16]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	615a      	str	r2, [r3, #20]
}
 80045f6:	bf00      	nop
 80045f8:	3714      	adds	r7, #20
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bc80      	pop	{r7}
 80045fe:	4770      	bx	lr
 8004600:	40012c00 	.word	0x40012c00
 8004604:	40000400 	.word	0x40000400
 8004608:	40000800 	.word	0x40000800

0800460c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800460c:	b480      	push	{r7}
 800460e:	b087      	sub	sp, #28
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a1b      	ldr	r3, [r3, #32]
 800461a:	f023 0201 	bic.w	r2, r3, #1
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a1b      	ldr	r3, [r3, #32]
 8004626:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	699b      	ldr	r3, [r3, #24]
 8004632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800463a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f023 0303 	bic.w	r3, r3, #3
 8004642:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	68fa      	ldr	r2, [r7, #12]
 800464a:	4313      	orrs	r3, r2
 800464c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	f023 0302 	bic.w	r3, r3, #2
 8004654:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	697a      	ldr	r2, [r7, #20]
 800465c:	4313      	orrs	r3, r2
 800465e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	4a1c      	ldr	r2, [pc, #112]	; (80046d4 <TIM_OC1_SetConfig+0xc8>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d10c      	bne.n	8004682 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	f023 0308 	bic.w	r3, r3, #8
 800466e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	697a      	ldr	r2, [r7, #20]
 8004676:	4313      	orrs	r3, r2
 8004678:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	f023 0304 	bic.w	r3, r3, #4
 8004680:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a13      	ldr	r2, [pc, #76]	; (80046d4 <TIM_OC1_SetConfig+0xc8>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d111      	bne.n	80046ae <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004690:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004698:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	695b      	ldr	r3, [r3, #20]
 800469e:	693a      	ldr	r2, [r7, #16]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	699b      	ldr	r3, [r3, #24]
 80046a8:	693a      	ldr	r2, [r7, #16]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	693a      	ldr	r2, [r7, #16]
 80046b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	68fa      	ldr	r2, [r7, #12]
 80046b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	685a      	ldr	r2, [r3, #4]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	697a      	ldr	r2, [r7, #20]
 80046c6:	621a      	str	r2, [r3, #32]
}
 80046c8:	bf00      	nop
 80046ca:	371c      	adds	r7, #28
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bc80      	pop	{r7}
 80046d0:	4770      	bx	lr
 80046d2:	bf00      	nop
 80046d4:	40012c00 	.word	0x40012c00

080046d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046d8:	b480      	push	{r7}
 80046da:	b087      	sub	sp, #28
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a1b      	ldr	r3, [r3, #32]
 80046e6:	f023 0210 	bic.w	r2, r3, #16
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a1b      	ldr	r3, [r3, #32]
 80046f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	699b      	ldr	r3, [r3, #24]
 80046fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004706:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800470e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	021b      	lsls	r3, r3, #8
 8004716:	68fa      	ldr	r2, [r7, #12]
 8004718:	4313      	orrs	r3, r2
 800471a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	f023 0320 	bic.w	r3, r3, #32
 8004722:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	011b      	lsls	r3, r3, #4
 800472a:	697a      	ldr	r2, [r7, #20]
 800472c:	4313      	orrs	r3, r2
 800472e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	4a1d      	ldr	r2, [pc, #116]	; (80047a8 <TIM_OC2_SetConfig+0xd0>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d10d      	bne.n	8004754 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800473e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	011b      	lsls	r3, r3, #4
 8004746:	697a      	ldr	r2, [r7, #20]
 8004748:	4313      	orrs	r3, r2
 800474a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004752:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	4a14      	ldr	r2, [pc, #80]	; (80047a8 <TIM_OC2_SetConfig+0xd0>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d113      	bne.n	8004784 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004762:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800476a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	695b      	ldr	r3, [r3, #20]
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	693a      	ldr	r2, [r7, #16]
 8004774:	4313      	orrs	r3, r2
 8004776:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	699b      	ldr	r3, [r3, #24]
 800477c:	009b      	lsls	r3, r3, #2
 800477e:	693a      	ldr	r2, [r7, #16]
 8004780:	4313      	orrs	r3, r2
 8004782:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	693a      	ldr	r2, [r7, #16]
 8004788:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	68fa      	ldr	r2, [r7, #12]
 800478e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	685a      	ldr	r2, [r3, #4]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	697a      	ldr	r2, [r7, #20]
 800479c:	621a      	str	r2, [r3, #32]
}
 800479e:	bf00      	nop
 80047a0:	371c      	adds	r7, #28
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bc80      	pop	{r7}
 80047a6:	4770      	bx	lr
 80047a8:	40012c00 	.word	0x40012c00

080047ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b087      	sub	sp, #28
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6a1b      	ldr	r3, [r3, #32]
 80047ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a1b      	ldr	r3, [r3, #32]
 80047c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	69db      	ldr	r3, [r3, #28]
 80047d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f023 0303 	bic.w	r3, r3, #3
 80047e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68fa      	ldr	r2, [r7, #12]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80047f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	021b      	lsls	r3, r3, #8
 80047fc:	697a      	ldr	r2, [r7, #20]
 80047fe:	4313      	orrs	r3, r2
 8004800:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4a1d      	ldr	r2, [pc, #116]	; (800487c <TIM_OC3_SetConfig+0xd0>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d10d      	bne.n	8004826 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004810:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	021b      	lsls	r3, r3, #8
 8004818:	697a      	ldr	r2, [r7, #20]
 800481a:	4313      	orrs	r3, r2
 800481c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004824:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a14      	ldr	r2, [pc, #80]	; (800487c <TIM_OC3_SetConfig+0xd0>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d113      	bne.n	8004856 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004834:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800483c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	695b      	ldr	r3, [r3, #20]
 8004842:	011b      	lsls	r3, r3, #4
 8004844:	693a      	ldr	r2, [r7, #16]
 8004846:	4313      	orrs	r3, r2
 8004848:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	699b      	ldr	r3, [r3, #24]
 800484e:	011b      	lsls	r3, r3, #4
 8004850:	693a      	ldr	r2, [r7, #16]
 8004852:	4313      	orrs	r3, r2
 8004854:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	693a      	ldr	r2, [r7, #16]
 800485a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	68fa      	ldr	r2, [r7, #12]
 8004860:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	685a      	ldr	r2, [r3, #4]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	697a      	ldr	r2, [r7, #20]
 800486e:	621a      	str	r2, [r3, #32]
}
 8004870:	bf00      	nop
 8004872:	371c      	adds	r7, #28
 8004874:	46bd      	mov	sp, r7
 8004876:	bc80      	pop	{r7}
 8004878:	4770      	bx	lr
 800487a:	bf00      	nop
 800487c:	40012c00 	.word	0x40012c00

08004880 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004880:	b480      	push	{r7}
 8004882:	b087      	sub	sp, #28
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a1b      	ldr	r3, [r3, #32]
 800488e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a1b      	ldr	r3, [r3, #32]
 800489a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	69db      	ldr	r3, [r3, #28]
 80048a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	021b      	lsls	r3, r3, #8
 80048be:	68fa      	ldr	r2, [r7, #12]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80048ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	031b      	lsls	r3, r3, #12
 80048d2:	693a      	ldr	r2, [r7, #16]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	4a0f      	ldr	r2, [pc, #60]	; (8004918 <TIM_OC4_SetConfig+0x98>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d109      	bne.n	80048f4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	695b      	ldr	r3, [r3, #20]
 80048ec:	019b      	lsls	r3, r3, #6
 80048ee:	697a      	ldr	r2, [r7, #20]
 80048f0:	4313      	orrs	r3, r2
 80048f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	697a      	ldr	r2, [r7, #20]
 80048f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	68fa      	ldr	r2, [r7, #12]
 80048fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	685a      	ldr	r2, [r3, #4]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	693a      	ldr	r2, [r7, #16]
 800490c:	621a      	str	r2, [r3, #32]
}
 800490e:	bf00      	nop
 8004910:	371c      	adds	r7, #28
 8004912:	46bd      	mov	sp, r7
 8004914:	bc80      	pop	{r7}
 8004916:	4770      	bx	lr
 8004918:	40012c00 	.word	0x40012c00

0800491c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800491c:	b480      	push	{r7}
 800491e:	b087      	sub	sp, #28
 8004920:	af00      	add	r7, sp, #0
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	607a      	str	r2, [r7, #4]
 8004928:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	6a1b      	ldr	r3, [r3, #32]
 800492e:	f023 0201 	bic.w	r2, r3, #1
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	699b      	ldr	r3, [r3, #24]
 800493a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6a1b      	ldr	r3, [r3, #32]
 8004940:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	4a1f      	ldr	r2, [pc, #124]	; (80049c4 <TIM_TI1_SetConfig+0xa8>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d00b      	beq.n	8004962 <TIM_TI1_SetConfig+0x46>
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004950:	d007      	beq.n	8004962 <TIM_TI1_SetConfig+0x46>
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	4a1c      	ldr	r2, [pc, #112]	; (80049c8 <TIM_TI1_SetConfig+0xac>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d003      	beq.n	8004962 <TIM_TI1_SetConfig+0x46>
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	4a1b      	ldr	r2, [pc, #108]	; (80049cc <TIM_TI1_SetConfig+0xb0>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d101      	bne.n	8004966 <TIM_TI1_SetConfig+0x4a>
 8004962:	2301      	movs	r3, #1
 8004964:	e000      	b.n	8004968 <TIM_TI1_SetConfig+0x4c>
 8004966:	2300      	movs	r3, #0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d008      	beq.n	800497e <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	f023 0303 	bic.w	r3, r3, #3
 8004972:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004974:	697a      	ldr	r2, [r7, #20]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4313      	orrs	r3, r2
 800497a:	617b      	str	r3, [r7, #20]
 800497c:	e003      	b.n	8004986 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	f043 0301 	orr.w	r3, r3, #1
 8004984:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800498c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	011b      	lsls	r3, r3, #4
 8004992:	b2db      	uxtb	r3, r3
 8004994:	697a      	ldr	r2, [r7, #20]
 8004996:	4313      	orrs	r3, r2
 8004998:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	f023 030a 	bic.w	r3, r3, #10
 80049a0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	f003 030a 	and.w	r3, r3, #10
 80049a8:	693a      	ldr	r2, [r7, #16]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	697a      	ldr	r2, [r7, #20]
 80049b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	693a      	ldr	r2, [r7, #16]
 80049b8:	621a      	str	r2, [r3, #32]
}
 80049ba:	bf00      	nop
 80049bc:	371c      	adds	r7, #28
 80049be:	46bd      	mov	sp, r7
 80049c0:	bc80      	pop	{r7}
 80049c2:	4770      	bx	lr
 80049c4:	40012c00 	.word	0x40012c00
 80049c8:	40000400 	.word	0x40000400
 80049cc:	40000800 	.word	0x40000800

080049d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b087      	sub	sp, #28
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	60f8      	str	r0, [r7, #12]
 80049d8:	60b9      	str	r1, [r7, #8]
 80049da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6a1b      	ldr	r3, [r3, #32]
 80049e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6a1b      	ldr	r3, [r3, #32]
 80049e6:	f023 0201 	bic.w	r2, r3, #1
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	699b      	ldr	r3, [r3, #24]
 80049f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	011b      	lsls	r3, r3, #4
 8004a00:	693a      	ldr	r2, [r7, #16]
 8004a02:	4313      	orrs	r3, r2
 8004a04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	f023 030a 	bic.w	r3, r3, #10
 8004a0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a0e:	697a      	ldr	r2, [r7, #20]
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	693a      	ldr	r2, [r7, #16]
 8004a1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	697a      	ldr	r2, [r7, #20]
 8004a20:	621a      	str	r2, [r3, #32]
}
 8004a22:	bf00      	nop
 8004a24:	371c      	adds	r7, #28
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bc80      	pop	{r7}
 8004a2a:	4770      	bx	lr

08004a2c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b087      	sub	sp, #28
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	60f8      	str	r0, [r7, #12]
 8004a34:	60b9      	str	r1, [r7, #8]
 8004a36:	607a      	str	r2, [r7, #4]
 8004a38:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	6a1b      	ldr	r3, [r3, #32]
 8004a3e:	f023 0210 	bic.w	r2, r3, #16
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	699b      	ldr	r3, [r3, #24]
 8004a4a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6a1b      	ldr	r3, [r3, #32]
 8004a50:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a58:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	021b      	lsls	r3, r3, #8
 8004a5e:	697a      	ldr	r2, [r7, #20]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a6a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	031b      	lsls	r3, r3, #12
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	697a      	ldr	r2, [r7, #20]
 8004a74:	4313      	orrs	r3, r2
 8004a76:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a7e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	011b      	lsls	r3, r3, #4
 8004a84:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004a88:	693a      	ldr	r2, [r7, #16]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	697a      	ldr	r2, [r7, #20]
 8004a92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	693a      	ldr	r2, [r7, #16]
 8004a98:	621a      	str	r2, [r3, #32]
}
 8004a9a:	bf00      	nop
 8004a9c:	371c      	adds	r7, #28
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bc80      	pop	{r7}
 8004aa2:	4770      	bx	lr

08004aa4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b087      	sub	sp, #28
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	60f8      	str	r0, [r7, #12]
 8004aac:	60b9      	str	r1, [r7, #8]
 8004aae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6a1b      	ldr	r3, [r3, #32]
 8004ab4:	f023 0210 	bic.w	r2, r3, #16
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	699b      	ldr	r3, [r3, #24]
 8004ac0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	6a1b      	ldr	r3, [r3, #32]
 8004ac6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ace:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	031b      	lsls	r3, r3, #12
 8004ad4:	697a      	ldr	r2, [r7, #20]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ae0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	011b      	lsls	r3, r3, #4
 8004ae6:	693a      	ldr	r2, [r7, #16]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	697a      	ldr	r2, [r7, #20]
 8004af0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	693a      	ldr	r2, [r7, #16]
 8004af6:	621a      	str	r2, [r3, #32]
}
 8004af8:	bf00      	nop
 8004afa:	371c      	adds	r7, #28
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bc80      	pop	{r7}
 8004b00:	4770      	bx	lr

08004b02 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004b02:	b480      	push	{r7}
 8004b04:	b087      	sub	sp, #28
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	60f8      	str	r0, [r7, #12]
 8004b0a:	60b9      	str	r1, [r7, #8]
 8004b0c:	607a      	str	r2, [r7, #4]
 8004b0e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6a1b      	ldr	r3, [r3, #32]
 8004b14:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	69db      	ldr	r3, [r3, #28]
 8004b20:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	6a1b      	ldr	r3, [r3, #32]
 8004b26:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	f023 0303 	bic.w	r3, r3, #3
 8004b2e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004b30:	697a      	ldr	r2, [r7, #20]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b3e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	011b      	lsls	r3, r3, #4
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	697a      	ldr	r2, [r7, #20]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b52:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	021b      	lsls	r3, r3, #8
 8004b58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b5c:	693a      	ldr	r2, [r7, #16]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	697a      	ldr	r2, [r7, #20]
 8004b66:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	693a      	ldr	r2, [r7, #16]
 8004b6c:	621a      	str	r2, [r3, #32]
}
 8004b6e:	bf00      	nop
 8004b70:	371c      	adds	r7, #28
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bc80      	pop	{r7}
 8004b76:	4770      	bx	lr

08004b78 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b087      	sub	sp, #28
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	60f8      	str	r0, [r7, #12]
 8004b80:	60b9      	str	r1, [r7, #8]
 8004b82:	607a      	str	r2, [r7, #4]
 8004b84:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6a1b      	ldr	r3, [r3, #32]
 8004b8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	69db      	ldr	r3, [r3, #28]
 8004b96:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6a1b      	ldr	r3, [r3, #32]
 8004b9c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ba4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	021b      	lsls	r3, r3, #8
 8004baa:	697a      	ldr	r2, [r7, #20]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004bb6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	031b      	lsls	r3, r3, #12
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	697a      	ldr	r2, [r7, #20]
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004bca:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	031b      	lsls	r3, r3, #12
 8004bd0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004bd4:	693a      	ldr	r2, [r7, #16]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	697a      	ldr	r2, [r7, #20]
 8004bde:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	693a      	ldr	r2, [r7, #16]
 8004be4:	621a      	str	r2, [r3, #32]
}
 8004be6:	bf00      	nop
 8004be8:	371c      	adds	r7, #28
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bc80      	pop	{r7}
 8004bee:	4770      	bx	lr

08004bf0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b085      	sub	sp, #20
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c06:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c08:	683a      	ldr	r2, [r7, #0]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	f043 0307 	orr.w	r3, r3, #7
 8004c12:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	68fa      	ldr	r2, [r7, #12]
 8004c18:	609a      	str	r2, [r3, #8]
}
 8004c1a:	bf00      	nop
 8004c1c:	3714      	adds	r7, #20
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bc80      	pop	{r7}
 8004c22:	4770      	bx	lr

08004c24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b087      	sub	sp, #28
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	60b9      	str	r1, [r7, #8]
 8004c2e:	607a      	str	r2, [r7, #4]
 8004c30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	021a      	lsls	r2, r3, #8
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	431a      	orrs	r2, r3
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	697a      	ldr	r2, [r7, #20]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	697a      	ldr	r2, [r7, #20]
 8004c56:	609a      	str	r2, [r3, #8]
}
 8004c58:	bf00      	nop
 8004c5a:	371c      	adds	r7, #28
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bc80      	pop	{r7}
 8004c60:	4770      	bx	lr

08004c62 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004c62:	b480      	push	{r7}
 8004c64:	b087      	sub	sp, #28
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	60f8      	str	r0, [r7, #12]
 8004c6a:	60b9      	str	r1, [r7, #8]
 8004c6c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	f003 031f 	and.w	r3, r3, #31
 8004c74:	2201      	movs	r2, #1
 8004c76:	fa02 f303 	lsl.w	r3, r2, r3
 8004c7a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	6a1a      	ldr	r2, [r3, #32]
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	43db      	mvns	r3, r3
 8004c84:	401a      	ands	r2, r3
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	6a1a      	ldr	r2, [r3, #32]
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	f003 031f 	and.w	r3, r3, #31
 8004c94:	6879      	ldr	r1, [r7, #4]
 8004c96:	fa01 f303 	lsl.w	r3, r1, r3
 8004c9a:	431a      	orrs	r2, r3
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	621a      	str	r2, [r3, #32]
}
 8004ca0:	bf00      	nop
 8004ca2:	371c      	adds	r7, #28
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bc80      	pop	{r7}
 8004ca8:	4770      	bx	lr
	...

08004cac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b085      	sub	sp, #20
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d101      	bne.n	8004cc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004cc0:	2302      	movs	r3, #2
 8004cc2:	e046      	b.n	8004d52 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2202      	movs	r2, #2
 8004cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	68fa      	ldr	r2, [r7, #12]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	68fa      	ldr	r2, [r7, #12]
 8004cfc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a16      	ldr	r2, [pc, #88]	; (8004d5c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d00e      	beq.n	8004d26 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d10:	d009      	beq.n	8004d26 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a12      	ldr	r2, [pc, #72]	; (8004d60 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d004      	beq.n	8004d26 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a10      	ldr	r2, [pc, #64]	; (8004d64 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d10c      	bne.n	8004d40 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	68ba      	ldr	r2, [r7, #8]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	68ba      	ldr	r2, [r7, #8]
 8004d3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d50:	2300      	movs	r3, #0
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3714      	adds	r7, #20
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bc80      	pop	{r7}
 8004d5a:	4770      	bx	lr
 8004d5c:	40012c00 	.word	0x40012c00
 8004d60:	40000400 	.word	0x40000400
 8004d64:	40000800 	.word	0x40000800

08004d68 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b085      	sub	sp, #20
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004d72:	2300      	movs	r3, #0
 8004d74:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d101      	bne.n	8004d84 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004d80:	2302      	movs	r3, #2
 8004d82:	e03d      	b.n	8004e00 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2201      	movs	r2, #1
 8004d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	4313      	orrs	r3, r2
 8004d98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	4313      	orrs	r3, r2
 8004da6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	691b      	ldr	r3, [r3, #16]
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	695b      	ldr	r3, [r3, #20]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	69db      	ldr	r3, [r3, #28]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	68fa      	ldr	r2, [r7, #12]
 8004df4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004dfe:	2300      	movs	r3, #0
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3714      	adds	r7, #20
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bc80      	pop	{r7}
 8004e08:	4770      	bx	lr

08004e0a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e0a:	b480      	push	{r7}
 8004e0c:	b083      	sub	sp, #12
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e12:	bf00      	nop
 8004e14:	370c      	adds	r7, #12
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bc80      	pop	{r7}
 8004e1a:	4770      	bx	lr

08004e1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b083      	sub	sp, #12
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e24:	bf00      	nop
 8004e26:	370c      	adds	r7, #12
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bc80      	pop	{r7}
 8004e2c:	4770      	bx	lr
	...

08004e30 <__libc_init_array>:
 8004e30:	b570      	push	{r4, r5, r6, lr}
 8004e32:	2500      	movs	r5, #0
 8004e34:	4e0c      	ldr	r6, [pc, #48]	; (8004e68 <__libc_init_array+0x38>)
 8004e36:	4c0d      	ldr	r4, [pc, #52]	; (8004e6c <__libc_init_array+0x3c>)
 8004e38:	1ba4      	subs	r4, r4, r6
 8004e3a:	10a4      	asrs	r4, r4, #2
 8004e3c:	42a5      	cmp	r5, r4
 8004e3e:	d109      	bne.n	8004e54 <__libc_init_array+0x24>
 8004e40:	f000 f822 	bl	8004e88 <_init>
 8004e44:	2500      	movs	r5, #0
 8004e46:	4e0a      	ldr	r6, [pc, #40]	; (8004e70 <__libc_init_array+0x40>)
 8004e48:	4c0a      	ldr	r4, [pc, #40]	; (8004e74 <__libc_init_array+0x44>)
 8004e4a:	1ba4      	subs	r4, r4, r6
 8004e4c:	10a4      	asrs	r4, r4, #2
 8004e4e:	42a5      	cmp	r5, r4
 8004e50:	d105      	bne.n	8004e5e <__libc_init_array+0x2e>
 8004e52:	bd70      	pop	{r4, r5, r6, pc}
 8004e54:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004e58:	4798      	blx	r3
 8004e5a:	3501      	adds	r5, #1
 8004e5c:	e7ee      	b.n	8004e3c <__libc_init_array+0xc>
 8004e5e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004e62:	4798      	blx	r3
 8004e64:	3501      	adds	r5, #1
 8004e66:	e7f2      	b.n	8004e4e <__libc_init_array+0x1e>
 8004e68:	08004ecc 	.word	0x08004ecc
 8004e6c:	08004ecc 	.word	0x08004ecc
 8004e70:	08004ecc 	.word	0x08004ecc
 8004e74:	08004ed0 	.word	0x08004ed0

08004e78 <memset>:
 8004e78:	4603      	mov	r3, r0
 8004e7a:	4402      	add	r2, r0
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d100      	bne.n	8004e82 <memset+0xa>
 8004e80:	4770      	bx	lr
 8004e82:	f803 1b01 	strb.w	r1, [r3], #1
 8004e86:	e7f9      	b.n	8004e7c <memset+0x4>

08004e88 <_init>:
 8004e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e8a:	bf00      	nop
 8004e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e8e:	bc08      	pop	{r3}
 8004e90:	469e      	mov	lr, r3
 8004e92:	4770      	bx	lr

08004e94 <_fini>:
 8004e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e96:	bf00      	nop
 8004e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e9a:	bc08      	pop	{r3}
 8004e9c:	469e      	mov	lr, r3
 8004e9e:	4770      	bx	lr
